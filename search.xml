<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[AS关键字]]></title>
    <url>%2F2017%2F09%2F16%2FAS%E5%B8%83%E5%B1%80%E5%85%B3%E9%94%AE%E5%AD%97%2F</url>
    <content type="text"><![CDATA[计算器思路：1.布局2.声明变量 找到控件地址 设置监听器 处理逻辑 match_parent 是指“填充满”父容器 wrap_content 根据容器内的东西决定组件的大小 android:gravity=”center” bottom|right orientation vertical Bottom android:gravity=”center_vertical” 这个的意思是指 限定它里面的内容要垂直居中显示。 android:layout_gravity=”center_vertical”，这个是指它的位置是相对于它父亲的垂直居中。 substring(a,b) 从一串字符中挑出第a个到第b个------ 布局··123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:tools="http://schemas.android.com/tools" android:id="@+id/activity_main" android:gravity="center" android:layout_width="match_parent" android:layout_height="match_parent" android:paddingBottom="@dimen/activity_vertical_margin" android:paddingLeft="@dimen/activity_horizontal_margin" android:paddingRight="@dimen/activity_horizontal_margin" android:paddingTop="@dimen/activity_vertical_margin" tools:context="com.example.a15581.myapplication.MainActivity"&gt; &lt;RelativeLayout android:layout_width="match_parent" android:layout_height="80sp" android:gravity="center"&gt; &lt;EditText android:layout_width="350dip" android:layout_height="100dip" android:gravity="bottom|right" android:text="0" android:textSize="20sp" android:maxLength="25" android:editable="false" android:id="@+id/showview" /&gt; &lt;/RelativeLayout&gt; &lt;LinearLayout android:layout_width="match_parent" android:layout_height="500sp" android:gravity="center_vertical" android:orientation="vertical" android:layout_alignParentTop="true" android:layout_alignParentLeft="true" android:layout_alignParentStart="true"&gt; &lt;LinearLayout android:layout_width="match_parent" android:layout_height="wrap_content" android:orientation="horizontal"&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_clean" android:text="C" android:textSize="30sp"/&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_delet" android:text="DEL" android:textSize="30sp"/&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_div" android:text="/" android:textSize="30sp"/&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_mulitiply" android:text="*" android:textSize="30sp"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_marginTop="0dp" android:orientation="horizontal"&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_7" android:text="7" android:textSize="30sp"/&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_8" android:text="8" android:textSize="30sp"/&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_9" android:text="9" android:textSize="30sp"/&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_minus" android:text="-" android:textSize="30sp"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_marginTop="0dp" android:orientation="horizontal"&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_4" android:text="4" android:textSize="30sp"/&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_5" android:text="5" android:textSize="30sp"/&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_6" android:text="6" android:textSize="30sp"/&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_add" android:text="+" android:textSize="30sp"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_marginTop="0dp" android:orientation="horizontal"&gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="wrap_content" android:orientation="vertical"&gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="wrap_content" android:orientation="horizontal"&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_1" android:text="1" android:textSize="30sp"/&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_2" android:text="2" android:textSize="30sp"/&gt; &lt;Button android:layout_width="80dp" android:layout_height="80dp" android:id="@+id/btn_3" android:text="3" android:textSize="30sp"/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="wrap_content" android:orientation="horizontal"&gt; &lt;Button android:layout_width="120dp" android:layout_height="80dp" android:text="0" android:textSize="30dp" android:id="@+id/btn_0"/&gt; &lt;Button android:layout_width="120dp" android:layout_height="80dp" android:textSize="30dp" android:text="." android:id="@+id/btn_point"/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="wrap_content" android:orientation="vertical"&gt; &lt;Button android:layout_width="80dp" android:layout_height="160dp" android:id="@+id/btn_equal" android:text="=" android:textSize="30sp"/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt;&lt;/RelativeLayout&gt; MainActivitypackage com.example.a15581.myapplication;import android.renderscript.Double2;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123; //声明变量 private Button btn_0; private Button btn_1; private Button btn_2; private Button btn_3; private Button btn_4; private Button btn_5; private Button btn_6; private Button btn_7; private Button btn_8; private Button btn_9; private Button btn_point;// 小数点 private Button btn_divide;// 除以 private Button btn_multiply;// 乘以 private Button btn_minus;// 减去 private Button btn_pluse;// 加 private Button btn_equal;// 等于 private Button btn_clear; //清空 private Button btn_del; //取消 private EditText et_showview; //输入框 private double dou = 0; //接收结果 private boolean flag;//标志服，判断是否清空编辑框 @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); initView(); &#125; public void initView()&#123; flag=true; //找到按钮地址 btn_0=(Button) findViewById(R.id.btn_0); btn_1 = (Button) findViewById(R.id.btn_1); btn_2 = (Button) findViewById(R.id.btn_2); btn_3 = (Button) findViewById(R.id.btn_3); btn_4 = (Button) findViewById(R.id.btn_4); btn_5 = (Button) findViewById(R.id.btn_5); btn_6 = (Button) findViewById(R.id.btn_6); btn_7 = (Button) findViewById(R.id.btn_7); btn_8 = (Button) findViewById(R.id.btn_8); btn_9 = (Button) findViewById(R.id.btn_9); btn_point = (Button) findViewById(R.id.btn_point);// 小数点 btn_divide = (Button) findViewById(R.id.btn_div);// 除以 btn_multiply = (Button) findViewById(R.id.btn_mulitiply);// 乘以 btn_minus = (Button) findViewById(R.id.btn_minus);// 减去 btn_pluse = (Button) findViewById(R.id.btn_add);// 加 btn_equal = (Button) findViewById(R.id.btn_equal);// 等于 btn_clear = (Button) findViewById(R.id.btn_clean); btn_del = (Button) findViewById(R.id.btn_delet); et_showview = (EditText) findViewById(R.id.showview); //设置监听器 btn_0.setOnClickListener(this); btn_1.setOnClickListener(this); btn_2.setOnClickListener(this); btn_3.setOnClickListener(this); btn_4.setOnClickListener(this); btn_5.setOnClickListener(this); btn_6.setOnClickListener(this); btn_7.setOnClickListener(this); btn_8.setOnClickListener(this); btn_9.setOnClickListener(this); btn_pluse.setOnClickListener(this); btn_minus.setOnClickListener(this); btn_multiply.setOnClickListener(this); btn_divide.setOnClickListener(this); btn_del.setOnClickListener(this); btn_clear.setOnClickListener(this); btn_point.setOnClickListener(this); btn_equal.setOnClickListener(this); &#125; @Override public void onClick(View v) &#123; String str=et_showview.getText().toString(); switch (v.getId())&#123; case R.id.btn_0: case R.id.btn_1: case R.id.btn_2: case R.id.btn_3: case R.id.btn_4: case R.id.btn_5: case R.id.btn_6: case R.id.btn_7: case R.id.btn_8: case R.id.btn_9: if(str.charAt(0)==' ')&#123; et_showview.setText(((Button) v).getText());&#125; else if(str.charAt(0)=='0'&amp;&amp;!str.contains(" ")&amp;&amp;!str.contains("."))&#123; et_showview.setText(((Button) v).getText()); &#125; else et_showview.setText(str+((Button) v).getText()); break; case R.id.btn_point: if(str=="0")&#123; et_showview.setText("0"+"."); &#125;else if(str.contains(".")||str.charAt(str.length()-1)==' ')&#123; et_showview.setText(str); &#125;else &#123; et_showview.setText(str+"."); &#125; break; case R.id.btn_add: case R.id.btn_mulitiply: case R.id.btn_div: case R.id.btn_minus: if(str.charAt(str.length()-1)==' ')&#123; et_showview.setText(str.substring(0,str.length()-3)+" "+((Button) v).getText());//返回一个新的字符串，它是此字符串的一个子字符串。该子字符串从指定索引处的字符开始，直到此字符串末尾。 &#125;else &#123; et_showview.setText(str+" "+((Button) v).getText()); &#125; break; case R.id.btn_delet: if(str.length()==1)&#123; et_showview.setText("0"); &#125;else&#123; et_showview.setText(str.substring(0,str.length()-1)); &#125; break; case R.id.btn_clean: et_showview.setText("0"); break; case R.id.btn_equal: getResult(); break; default: break; &#125; &#125; private void getResult()&#123; flag=false; String result=et_showview.getText().toString(); if(!result.contains(" "))&#123; et_showview.setText("呵呵"); &#125; else &#123; String str1 = result.substring(0, result.indexOf(" "));//第一个数字 String op = result.substring(result.indexOf(" ") + 1, result.indexOf(" ") + 2);//操作符 String str2 = result.substring(result.indexOf(" ") + 3);//第二个数字 if (!str2.equals("")) &#123; Double d1 = Double.parseDouble(str1); Double d2 = Double.parseDouble(str2); if (op.equals("+")) &#123; dou = d1 + d2; &#125; else if (op.equals("-")) &#123; dou = d1 - d2; &#125; else if (op.equals("*")) &#123; dou = d1 * d2; &#125; else if (op.equals("/")) &#123; if (d1 == 0 &amp;&amp; d2 != 0) &#123; dou = 0; &#125; else if (d2 == 0) &#123; dou = 0; Toast.makeText(MainActivity.this, "There is a error", Toast.LENGTH_SHORT).show(); &#125; else &#123; dou = d1 / d2; &#125; &#125; double media = dou - (int) dou; if (media &gt; 0) &#123; String last = String.valueOf(dou); et_showview.setText(last); &#125; else &#123; if (dou &gt; 9999999999999d) &#123; et_showview.setText("over failed"); &#125; else &#123; int inter = (int) dou; String lasr = String.valueOf(inter); et_showview.setText(inter); &#125; &#125; &#125; else &#123; et_showview.setText(result); Toast.makeText(MainActivity.this,"finished",Toast.LENGTH_SHORT ); &#125; &#125; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[图形化找最短两点]]></title>
    <url>%2F2017%2F09%2F13%2F%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AF%BB%E6%89%BE%E6%9C%80%E7%9F%AD%E4%B8%A4%E7%82%B9%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031#include&lt;graphics.h&gt;#include&lt;conio.h&gt;#include&lt;iostream&gt;#include&lt;math.h&gt;using namespace std;int main() &#123; //画点 int x[30], y[30]; for (int i = 0; i &lt; 30; i++) &#123; x[i] = rand() % (60 - 10 + 1) + 10; y[i]= rand() % (60 - 10 + 1) + 10; initgraph(500, 500); setbkcolor(0); putpixel(x[i], y[i], 30); &#125; //画线 int L = 10000; for (int i = 0; i &lt; 30; i++) &#123; for (int j = 0; j &lt; 30; i++) &#123; Line(x[i], y[i], x[j], y[j]); int s = sqrt((x[i] * x[i] - x[j] * x[j]) + (y[i] * y[i] - y[j] * y[j])); if (s &lt; L&amp;&amp;s != 0) L = s; else clearLine(x[i], y[i], x[j], y[j]); &#125; &#125; getch(); closegraph();&#125;]]></content>
      <tags>
        <tag>课后习题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网页计算器]]></title>
    <url>%2F2017%2F09%2F13%2F%E7%BD%91%E9%A1%B5%E8%AE%A1%E7%AE%97%E5%99%A8%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156&lt;html&gt;&lt;body&gt;&lt;div id="calculator"&gt; &lt;div class="LOGO"&gt; &lt;span class="name"&gt;简单的计算器&lt;/span&gt; &lt;span class="verson"&gt;@walker&lt;/span&gt; &lt;/div&gt; &lt;div id="shuRu"&gt; &lt;!--screen输入栏--&gt; &lt;div class="screen"&gt; &lt;input type="text" id="screenName" name="screenName" class="screen"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id="keys"&gt; &lt;!-- j --&gt; &lt;!--第一排--&gt; &lt;input type="button" id="7" onclick="jsq(this.id)" value="7" class="buttons"&gt; &lt;input type="button" id="8" onclick="jsq(this.id)" value="8" class="buttons"&gt; &lt;input type="button" id="9" onclick="jsq(this.id)" value="9" class="buttons"&gt; &lt;input type="button" id="Back" onclick="tuiGe()" value="Back" class="buttons"&gt; &lt;input type="button" id="C" onclick="clearNum()" value="C" class="buttons" style="margin-right:0px"&gt; &lt;!--第二排--&gt; &lt;input type="button" id="4" onclick="jsq(this.id)" value="4" class="buttons"&gt; &lt;input type="button" id="5" onclick="jsq(this.id)" value="5" class="buttons"&gt; &lt;input type="button" id="6" onclick="jsq(this.id)" value="6" class="buttons"&gt; &lt;input type="button" id="*" onclick="jsq(this.id)" value="X" class="buttons"&gt; &lt;input type="button" id="/" onclick="jsq(this.id)" value="/" class="buttons" style="margin-right:0px"&gt; &lt;!--第三排--&gt; &lt;input type="button" id="1" onclick="jsq(this.id)" value="1" class="buttons"&gt; &lt;input type="button" id="2" onclick="jsq(this.id)" value="2" class="buttons"&gt; &lt;input type="button" id="3" onclick="jsq(this.id)" value="3" class="buttons"&gt; &lt;input type="button" id="+" onclick="jsq(this.id)" value="+" class="buttons"&gt; &lt;input type="button" id="-" onclick="jsq(this.id)" value="-" class="buttons" style="margin-right:0px"&gt; &lt;!--第四排--&gt; &lt;input type="button" id="0" onclick="jsq(this.id)" value="0" class="buttons"&gt; &lt;input type="button" id="00" onclick="jsq(this.id)" value="00" class="buttons"&gt; &lt;input type="button" id="." onclick="jsq(this.id)" value="." class="buttons"&gt; &lt;input type="button" id="%" onclick="jsq(this.id)" value="%" class="buttons"&gt; &lt;input type="button" id="eva" onclick="eva()" value="=" class="buttons" style="margin-right:0px"&gt; &lt;/div&gt; &lt;div class="footer"&gt; &lt;span class="aside"&gt;欢迎使用JavaScript计算器&lt;/span&gt; &lt;span class="link"&gt; &lt;a href="#" title="声明" target="_blank"&gt;反馈&lt;/a&gt; &lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt; var num = 0; // 定义第一个输入的数据 function jsq(num) &#123; //获取当前输入 if(num=="%")&#123; document.getElementById('screenName').value=Math.round(document.getElementById('screenName').value)/100; &#125;else&#123; document.getElementById('screenName').value += document.getElementById(num).value; &#125; &#125; function eva() &#123; //计算输入结果 document.getElementById("screenName").value = eval(document.getElementById("screenName").value); &#125; function clearNum() &#123; //清0 document.getElementById("screenName").value = null; document.getElementById("screenName").focus(); &#125; function tuiGe() &#123; //退格 var arr = document.getElementById("screenName"); arr.value = arr.value.substring(0, arr.value.length - 1); &#125;&lt;/script&gt;&lt;style&gt;/*Basic reset*/*&#123; margin:0; padding:0; box-sizing: border-box; font: 14px Arial,sans-serif;&#125;html&#123; height:100%; background-color:lightslategrey;&#125;#calculator&#123; margin: 15px auto; width:330px; height:400px; border: 1px solid lightgray; background-color:darkgrey; padding:15px;&#125;/*LOGO*/.LOGO&#123; height:20px;&#125;.LOGO .name&#123; float:left; line-height:30px;&#125;.LOGO .verson&#123; float:right; line-height:30px;&#125;/*screen*/#shuRu&#123; margin-top:15px;&#125;.screen&#123; margin-top:5px; width:300px; height:40px; text-align: right; padding-right:10px; font-size:20px;&#125;#keys&#123; border:1px solid lightgray; height:223px; margin-top:25px; padding:8px;&#125;#keys .last&#123; margin-right:0px;&#125;.footer&#123; margin-top:20px; height:20px;&#125;.footer .link&#123; float:right;&#125;#keys .buttons&#123; float:left; width: 42px; height: 36px; text-align:center; background-color:lightgray; margin: 0 17px 20px 0;&#125;&lt;/style&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>课后习题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AS运行java程序]]></title>
    <url>%2F2017%2F09%2F12%2FAS%E8%BF%90%E8%A1%8CJAVA%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[当我们装了Android Studio 学习安卓开发的时候，难免会要学习java，这时候，难道在重新装一个编译器吗？不需要，我们直接用 Android Studio 就可以。 1、新建一个空项目，选择红色项目 2。File —–&gt; new —–&gt; new Module… 然后弹出一个框 在more module 里面选择java Library 。一路next。 3、编写相应的代码，记得把上面的第一行注释掉 4、配置，点击 run -&gt; edit configuration，在新弹出的窗口的上方点击绿色的加号按钮，选择“application”，再在右边的窗口添加信息。 5、最后在自己编写代码的界面右键，选择“run class.main()”,或者用快捷键“ctr+shift+F10”进行运行。结果如下图：]]></content>
  </entry>
  <entry>
    <title><![CDATA[数据库知识点]]></title>
    <url>%2F2017%2F09%2F05%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%E7%82%B9%2F</url>
    <content type="text"><![CDATA[要解决的问题 解决方案 如何描述这些数据 E-R模型 关系数据模型 如何创建这些模型和存储这些数据 关系代数 SQL 应用程序如何访问数据库 数据库开发技术 如何提高大量数据访问效率 数据库优化技术 那些人可以操作那些数据 安全性控制 如何保证数据的正确有效 完整性控制 多人如何操作同一数据 并发控制 出现故障 数据恢复]]></content>
      <tags>
        <tag>课后习题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法与设计]]></title>
    <url>%2F2017%2F09%2F05%2F%E7%AE%97%E6%B3%95%E4%B8%8E%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[求根号m1234567891011121314151617181920212223242526#include&lt;iostream&gt;using namespace std;int main()&#123; double m; cin &gt;&gt; m; cout &lt;&lt; sqrt(m); getchar();&#125;double ABS(double x)&#123; return x &lt; 0 ? x*-1 : x;&#125;double sqrt(double m) &#123; double g = m; while ( ABS(g*g - m )&gt; 0.0000001) &#123; g = (g + m / g) / 2; &#125; return g;&#125; 最大公约数12345678910111213141516171819#include&lt;iostream&gt;using namespace std;int main()&#123; int m, n,r; cin &gt;&gt; m &gt;&gt; n; while (n!=0) &#123; r = m%n; m = n; n = r; &#125; cout &lt;&lt; m; system("pause");&#125; gcd(m,n) min{m,n}123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;cstdlib&gt;#include &lt;stack&gt; #include&lt;iostream&gt;using namespace std;int get_prime(int x)&#123; int tmp = 0; int i = 0; int j = 0; int k = 0, d; int a[10] = &#123; 0 &#125;; d = x; tmp = d; //遍历2到d中的所有数，先判断该数是否为素数，再判断该数是否为d的因数，两个条件满足则将其存入数组中；否则进行下一次循环* / for (i = 2; i &lt;= d; i++) &#123; //判断该数是否为素数，若非素数则进行下一次循环 for (j = 2; j&lt;i; j++) &#123; if (i % j == 0) &#123; break; &#125; &#125; //判断i是否为d的因数，如果是则将i存入临时数组，并更新d的值，此处用while是为了满足一个整数中有几个相同的因数的情况 while (d % i == 0) &#123; a[k++] = i; d = d / i; &#125; &#125; //分三段将该数组打印到终端 printf("%d=", tmp); for (i = 0; i&lt;k - 1; i++) &#123; printf("%d*", a[i]); &#125; printf("%d\n", a[k - 1]); return 0;&#125;int get_comment_prime()&#123; return 0;&#125;int main()&#123; int m, n; printf("please input a data:"); cin &gt;&gt; m&gt;&gt;n; get_prime(m); get_prime(n); cout&lt;&lt;get_comment_prime(); system("pause");&#125;]]></content>
      <tags>
        <tag>课后习题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django的MTV模式]]></title>
    <url>%2F2017%2F08%2F30%2FDjango%E7%9A%84MTV%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[##学习目的：建立本地站点 MTV=model templement view pip install Django (前提是配置好python的pip工具 在博客内搜索pip 即可得教程)]]></content>
  </entry>
  <entry>
    <title><![CDATA[爬取猫眼top100]]></title>
    <url>%2F2017%2F08%2F30%2F%E7%88%AC%E5%8F%96%E7%8C%AB%E7%9C%BCtop100%2F</url>
    <content type="text"><![CDATA[学习目的：了解爬虫工作原理 3部分1.获取页面内容html代码12345678910111213141516171819import requestsfrom requests.exceptions import RequestExceptiondef get_one_page(url): try: response=requests.get(url) if response.status_code==200: return response.text return None except RequestException: return Nonedef main(): url='http://maoyan.com/board/4?' html=get_one_page(url) print (html)if __name__ == '__main__': main() 2.筛选有用代码（正则表达式）12345678910111213141516171819202122232425262728import requestsimport refrom requests.exceptions import RequestExceptiondef get_one_page(url): try: response=requests.get(url) if response.status_code==200: return response.text return None except RequestException: return None #正则表达式 根据需要的内容写 这些目前看不懂的东西def parse_one_page(html):#.*?匹配任意字符串 隔开或者想要的目标结果 pattern=re.compile('&lt;dd&gt;.*?board-index.*?&gt;(\d*)&lt;/i&gt;.*?data-src="(.*?)".*?name"&gt;&lt;a' +'.*?&gt;(.*?)&lt;/a&gt;.*?star"&gt;(.*/)&lt;/p&gt;.*?releasetime&gt;(&gt;*?)&lt;/p&gt;' +'&gt;*?integer"&gt;(&gt;*?)&lt;/i&gt;&gt;*?fraction"&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;',re.S)#让.匹配换行符 item=re.findall(pattern,html) print (items)def main(): url='http://maoyan.com/board/4?' html=get_one_page(url) parse_one_page(html)if __name__ == '__main__': main() 3.将筛选后的代码变成字典形式并以文本输出到文件12345678910111213141516171819202122232425262728293031323334353637383940414243import jsonimport requestsimport refrom requests.exceptions import RequestExceptiondef get_one_page(url): try: response=requests.get(url) if response.status_code==200: return response.text return None except RequestException: return Nonedef parse_one_page(html): pattern=re.compile('&lt;dd&gt;.*?board-index.*?&gt;(\d*)&lt;/i&gt;.*?data-src="(.*?)".*?name"&gt;&lt;a' +'.*?&gt;(.*?)&lt;/a&gt;.*?star"&gt;(.*/)&lt;/p&gt;.*?releasetime&gt;(&gt;*?)&lt;/p&gt;' +'&gt;*?integer"&gt;(&gt;*?)&lt;/i&gt;&gt;*?fraction"&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;',re.S) items = re.findall(pattern,html) for item in items: yield &#123; 'index': item[0], 'image': item[1], 'title': item[2], 'actor': item[3].strip()[3:], 'time': item[4].strip()[5:], 'score': item[5]+item[6] &#125;def write_to_file(content): with open('result.txt','a',encoding='utf-8')as f: f.write(json.dumps(content,ensure_ascii=False)+'\n') f.close()def main(): url='http://maoyan.com/board/4?' html=get_one_page(url) for item in parse_one_page(html): print (item) write_to_file(item)if __name__ == '__main__': main() 4.使用循环爬取多个页面123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import jsonimport requestsimport refrom multiprocessing import Poolfrom requests.exceptions import RequestExceptiondef get_one_page(url): try: response=requests.get(url) if response.status_code==200: return response.text return None except RequestException: return Nonedef parse_one_page(html): pattern=re.compile('&lt;dd&gt;.*?board-index.*?&gt;(\d*)&lt;/i&gt;.*?data-src="(.*?)".*?name"&gt;&lt;a' +'.*?&gt;(.*?)&lt;/a&gt;.*?star"&gt;(.*/)&lt;/p&gt;.*?releasetime&gt;(&gt;*?)&lt;/p&gt;' +'&gt;*?integer"&gt;(&gt;*?)&lt;/i&gt;&gt;*?fraction"&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;',re.S) items = re.findall(pattern,html) for item in items: yield &#123; 'index': item[0], 'image': item[1], 'title': item[2], 'actor': item[3].strip()[3:], 'time': item[4].strip()[5:], 'score': item[5]+item[6] &#125;def write_to_file(content): with open('result.txt','a',encoding='utf-8')as f: f.write(json.dumps(content,ensure_ascii=False)+'\n') f.close()def main(offset): url='http://maoyan.com/board/4?offset='+str(offset) html=get_one_page(url) for item in parse_one_page(html): print (item) write_to_file(item)if __name__ == '__main__': for i in range(10): main(i*10) ##多进程实现 ##pool=Pool() ##pool.map(main，[i*10 for i in range(10)]）]]></content>
  </entry>
  <entry>
    <title><![CDATA[semmantical UI的使用]]></title>
    <url>%2F2017%2F08%2F29%2Fsemantical%20UI%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[学习目的：1.熟练使用semantical官网所提供的样式 2.了解常用关键词如inverted vertical等 div的嵌套 3.semantical UI 非常语义话 如div class=”ui big star segment”&gt; 就画啦一个大星星 1.简而言之：别人css javascript theme写好啦等你用。 2.别人的样式semantic.css 区域块样式引用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;first web&lt;/title&gt; &lt;link rel="stylesheet" href="css/semantic.css" media="screen" title="no title" charset="utf-8"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="ui inverted vertical segment"&gt;//样式的引用 inverted 反转（颜色） vertical 垂直（不同块间没有间隙） &lt;div class="ui image"&gt;//通常用div标签表示区域块 &lt;img src="images/banner.jpg" alt="" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="ui vertical segment"&gt; &lt;div class="ui container segment"&gt; &lt;div class="ui blue right ribbon label"&gt; life &lt;/div&gt; &lt;h1 class="ui header"&gt;First web&lt;/h1&gt; &lt;p&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. &lt;/p&gt; &lt;button type="button" name="button" class="ui inverted blue button"&gt;Read more&lt;/button&gt; &lt;/div&gt; &lt;div class="ui container segment"&gt; &lt;div class="ui red right ribbon label"&gt; tech &lt;/div&gt; &lt;h1 class="ui header"&gt;First web&lt;/h1&gt; &lt;p&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. &lt;/p&gt; &lt;button type="button" name="button" class="ui inverted blue button"&gt;Read more&lt;/button&gt; &lt;/div&gt; &lt;div class="ui container segment"&gt; &lt;div class="ui teal right ribbon label"&gt; news &lt;/div&gt; &lt;h1 class="ui header"&gt;First web&lt;/h1&gt; &lt;p&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. &lt;/p&gt; &lt;button type="button" name="button" class="ui inverted blue button"&gt;Read more&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="ui inverted vertical very padded segment"&gt; Mugglecoding® &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 画神盾1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel="stylesheet" href="css/semantic.css" media="screen" title="no title" charset="utf-8"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="ui inverted red circular segment"&gt;//非常语义化的semantical UI &lt;div class="ui circular segment"&gt; &lt;div class="ui inverted red circular segment"&gt; &lt;i class="circular inverted blue big star icon"&gt;&lt;/i&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 3.了解网格grid分布 及柱形分布column123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;First landing page&lt;/title&gt; &lt;link rel="stylesheet" href="css/semantic.css" media="screen" title="no title" charset="utf-8"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="ui fixed inverted menu"&gt;//semantical 的UI menu &lt;a href="#" class="item"&gt;Home&lt;/a&gt;//带有链接的按钮通常用标签a表示 &lt;a href="#" class="item"&gt;About&lt;/a&gt; &lt;a href="#" class="item"&gt;Other&lt;/a&gt; &lt;/div&gt; &lt;div class="ui vertical basic segment"&gt; &lt;div class="ui image"&gt; &lt;img src="images/banner.jpg" alt="" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="ui vertical basic segment"&gt; &lt;div class="ui grid"&gt;//grid网格分布 区域块中存在某种比例 &lt;div class="ten wide column"&gt;//10个柱形区域 &lt;div class="ui image"&gt; &lt;img src="images/devices2.png" alt="" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="six wide column"&gt; 6个柱形区域 &lt;h2 class="ui header"&gt; &lt;i class="icon star"&gt;&lt;/i&gt;//&lt;i&gt; 标签显示斜体文本效果 This ia a title &lt;/h2&gt; &lt;p&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="ui vertical very padded inverted segment"&gt;//padded内聚 文字距离区域块边缘的多少 &lt;div class="ui grid"&gt;a &lt;div class="four wide column"&gt; &lt;div class="ui vertical inverted text menu"&gt; &lt;div class="item"&gt; &lt;h3 class="ui inverted header"&gt;Company&lt;/h3&gt; &lt;/div&gt; &lt;div class="item"&gt; Address : CN &lt;/div&gt; &lt;div class="item"&gt; Tel : 010-66666 &lt;/div&gt; &lt;div class="item"&gt; Fax : 010-66666 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="four wide column"&gt; &lt;div class="ui vertical inverted text menu"&gt; &lt;div class="item"&gt; &lt;h3 class="ui inverted header"&gt;Company&lt;/h3&gt; &lt;/div&gt; &lt;div class="item"&gt; Address : CN &lt;/div&gt; &lt;div class="item"&gt; Tel : 010-66666 &lt;/div&gt; &lt;div class="item"&gt; Fax : 010-66666 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="four wide column"&gt; &lt;div class="ui vertical inverted text menu"&gt; &lt;div class="item"&gt; &lt;h3 class="ui inverted header"&gt;Company&lt;/h3&gt; &lt;/div&gt; &lt;div class="item"&gt; Address : CN &lt;/div&gt; &lt;div class="item"&gt; Tel : 010-66666 &lt;/div&gt; &lt;div class="item"&gt; Fax : 010-66666 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="four wide column"&gt; &lt;div class="ui vertical inverted text menu"&gt; &lt;div class="item"&gt; &lt;h3 class="ui inverted header"&gt;Company&lt;/h3&gt; &lt;/div&gt; &lt;div class="item"&gt; Address : CN &lt;/div&gt; &lt;div class="item"&gt; Tel : 010-66666 &lt;/div&gt; &lt;div class="item"&gt; Fax : 010-66666 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 对semantic较复杂的使用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;link rel="stylesheet" href="css/semantic.css" media="screen" title="no title" charset="utf-8"&gt; &lt;title&gt;Apple(中国)-非官方网站&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 菜单部分开始 --&gt; &lt;div class="ui inverted fixed fitted borderless fluid nine item menu"&gt; &lt;a href="#" class="item"&gt; &lt;div class="ui image"&gt; &lt;img class="" src="images/appleicon.png" alt="" /&gt; &lt;/div&gt; &lt;/a&gt; &lt;a href="#" class="item"&gt;Mac&lt;/a&gt; &lt;a href="#" class="item"&gt;iPad&lt;/a&gt; &lt;a href="#" class="item"&gt;iPhone&lt;/a&gt; &lt;a href="#" class="item"&gt;Watch&lt;/a&gt; &lt;a href="#" class="item"&gt;Music&lt;/a&gt; &lt;a href="#" class="item"&gt;技术支持&lt;/a&gt; &lt;a href="#" class="item"&gt; &lt;div class="ui image"&gt; &lt;img class="" src="images/searchicon.png" alt="" /&gt; &lt;/div&gt; &lt;/a&gt; &lt;a href="#" class="item"&gt; &lt;div class="ui image"&gt; &lt;img class="" src="images/buyicon.png" alt="" /&gt; &lt;/div&gt; &lt;/a&gt; &lt;/div&gt; &lt;!-- 菜单部分结束 --&gt; &lt;!-- 导航图部分开始 --&gt; &lt;div class="ui secondary vertical basic segment "&gt; &lt;div class="ui banner image"&gt; &lt;img src="images/banner.png" alt="" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 导航图部分结束 --&gt; &lt;!-- 4张小图部分开始 --&gt; &lt;div class="ui secondary vertical basic segment "&gt; &lt;div class="ui fitted text menu"&gt; &lt;div class="item"&gt; &lt;img class="ui image" src="images/img1.png" alt="" /&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;img class="ui image" src="images/img2.png" alt="" /&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;img class="ui image" src="images/img3.png" alt="" /&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;img class="ui image" src="images/img4.png" alt="" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 4张小图部分结束 --&gt; &lt;!-- 页尾部分开始 --&gt; &lt;div class="ui vertical secondary very padded segment"&gt; &lt;div class="ui container"&gt; &lt;div class="sub header"&gt; 双镜头摄像头仅于 iPhone 7 Plus 提供。亮黑色外观仅于 128GB 及以上存储容量的机型提供。 &lt;/div&gt; &lt;div class="ui divider"&gt;&lt;/div&gt; &lt;div class="ui five column grid"&gt; &lt;div class="column"&gt; &lt;div class="ui vertical text menu"&gt; &lt;div class="item"&gt; &lt;h4&gt;Apple Store 商店&lt;/h4&gt; &lt;/div&gt; &lt;a class="item"&gt; 查找零售店 &lt;/a&gt; &lt;a class="item"&gt; iPad &lt;/a&gt; &lt;a class="item"&gt; iPhone &lt;/a&gt; &lt;a class="item"&gt; Watch &lt;/a&gt; &lt;a class="item"&gt; iPod &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="column"&gt; &lt;div class="ui vertical text menu"&gt; &lt;div class="item"&gt; &lt;h4&gt;Apple Store 商店&lt;/h4&gt; &lt;/div&gt; &lt;a class="item"&gt; 查找零售店 &lt;/a&gt; &lt;a class="item"&gt; iPad &lt;/a&gt; &lt;a class="item"&gt; iPhone &lt;/a&gt; &lt;a class="item"&gt; Watch &lt;/a&gt; &lt;a class="item"&gt; iPod &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="column"&gt; &lt;div class="ui vertical text menu"&gt; &lt;div class="item"&gt; &lt;h4&gt;Apple Store 商店&lt;/h4&gt; &lt;/div&gt; &lt;a class="item"&gt; 查找零售店 &lt;/a&gt; &lt;div class="item"&gt; &lt;!-- nothing here just want a litte space XD--&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;h4&gt;商务应用&lt;/h4&gt; &lt;/div&gt; &lt;a class="item"&gt; Apple 与商务 &lt;/a&gt; &lt;a class="item"&gt; 商务选购 &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="column"&gt; &lt;div class="ui vertical text menu"&gt; &lt;div class="item"&gt; &lt;h4&gt;Apple Store 商店&lt;/h4&gt; &lt;/div&gt; &lt;a class="item"&gt; 查找零售店 &lt;/a&gt; &lt;div class="item"&gt; &lt;!-- nothing here just want a litte space XD--&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;h4&gt;商务应用&lt;/h4&gt; &lt;/div&gt; &lt;a class="item"&gt; Apple 与商务 &lt;/a&gt; &lt;a class="item"&gt; 商务选购 &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="column"&gt; &lt;div class="ui vertical text menu"&gt; &lt;div class="item"&gt; &lt;h4&gt;Apple Store 商店&lt;/h4&gt; &lt;/div&gt; &lt;a class="item"&gt; 查找零售店 &lt;/a&gt; &lt;a class="item"&gt; iPad &lt;/a&gt; &lt;a class="item"&gt; iPhone &lt;/a&gt; &lt;a class="item"&gt; Watch &lt;/a&gt; &lt;a class="item"&gt; iPod &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 页尾部分结束 --&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[网络爬虫]]></title>
    <url>%2F2017%2F08%2F19%2F%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB1%2F</url>
    <content type="text"><![CDATA[依赖BeautifulSoup Python 主文件spider_main.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# -*- coding:utf-8 -*-# 主程序,负责根url，以及启动爬虫from baike_spider import html_downloderfrom baike_spider import html_outputfrom baike_spider import html_parserfrom baike_spider import url_managerclass SpilderMain: def __init__(self): # 初始化所需要的对象,包括url管理器，网页下载器，网页解析器，输出器 # 来提供给craw（）使用 # 来提供给craw（）使用 self.urls = url_manager.UrlManager() self.downloader = html_downloder.HtmlDownloader() self.parser = html_parser.HtmlParser() self.outputer = html_output.HtmlOutputer() def craw(self, url): count = 1 # url计数 # 添加根url self.urls.add_new_url(url) # 开始解析 while self.urls.has_new_url(): try: # 获取url new_url = self.urls.get_new_url() print("第%d个url：%s" % (count, new_url)) # 将url对应的页面进行下载 html_cont = self.downloader.download(new_url) # 对下载下来的页面进行解析,将解析出来的数据进行保存 new_urls, new_data = self.parser.parse(new_url, html_cont) # 将解析出来的urls添加到url_manager self.urls.add_new_urls(new_urls) # 将数据进行收集 self.outputer.collect_data(new_data) if count == 15: break count += 1 except: print("爬取失败") self.outputer.output_html()if __name__ == "__main__": root_url = "http://baike.baidu.com/view/21087.htm" obj_spider = SpilderMain() # 启动爬虫 obj_spider.craw(root_url) 网页下载器html_downloder.py1234567891011121314# -*- coding:utf-8 -*-# 页面下载器import urllib.requestclass HtmlDownloader(object): def download(self, url): if url is None: return None response = urllib.request.urlopen(url) if response.getcode() != 200: return None return response.read()#页面下载器 网页解析器html_parser.py 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# -*- coding:utf-8 -*-# 网页解析器import refrom bs4 import BeautifulSoupimport urllib.parseclass HtmlParser(object): # 对html_cont的内容进行解析 def parse(self, page_url, html_cont): if page_url is None or html_cont is None: return soup = BeautifulSoup(html_cont, 'html.parser', from_encoding='utf-8') new_urls = self._get_new_urls(page_url, soup) new_data = self._get_new_data(page_url, soup) return new_urls, new_data # 获取页面上所有的url def _get_new_urls(self, page_url, soup): new_urls = set() # 根据分析，链接的格式是：/view/12334.htm links = soup.find_all('a', href=re.compile(r"/view/\d+\.htm")) for link in links: new_url = link['href'] # url格式需要进行拼接，加上 http://baike.baidu.com new_full_url = urllib.parse.urljoin(page_url, new_url) new_urls.add(new_full_url) return new_urls # 获取每一页面的数据，包括标题以及简介 def _get_new_data(self, page_url, soup): # 以一个词典数据类型保存数据 res_data = &#123;&#125; # 保存url res_data['url'] = page_url # 下面是标题的格式 # &lt;dd class="lemmaWgt-lemmaTitle-title"&gt; &lt;h1&gt;Python&lt;/h1&gt; title_node = soup.find('dd', class_="lemmaWgt-lemmaTitle-title").find('h1') res_data['title'] = title_node.get_text() # 开始获取简介的内容 # &lt;div class="lemma-summary" label-module="lemmaSummary"&gt; summary_node = soup.find('div', class_="lemma-summary") res_data['summary'] = summary_node.get_text() return res_dataContact GitHub API Training Shop Blog About© 2017 GitHub, Inc. Terms Privacy Security Status He URL管理器url_manager.py123456789101112131415161718192021222324252627282930313233# -*- coding:utf-8 -*-# url管理器class UrlManager(object): def __init__(self): self.new_urls = set() self.old_urls = set() # 添加url def add_new_url(self, url): if url is None: return # 当url既不在新的列表中也不在旧的列表中时，则将其添加到新的url——set()集合中 if url not in self.new_urls and url not in self.old_urls: self.new_urls.add(url) def add_new_urls(self, urls): if urls is None or len(urls) == 0: return for url in urls: self.add_new_url(url) # 判断是否还有待爬取的url def has_new_url(self): return len(self.new_urls) != 0 def get_new_url(self): new_url = self.new_urls.pop() self.old_urls.add(new_url) return new_urlContact GitHub API Training Shop Blog About© 2017 GitHub, Inc. Terms Privacy Security 定义路径输出结果1234567891011121314151617181920212223242526272829303132333435# -*- coding:utf-8 -*-# 最后的结果输出# 提供两个功能，一个事收集数据，另一个是输出数据class HtmlOutputer(object): # 收集数据需要一个列表list进行维护 def __init__(self): self.datas= [] def collect_data(self, data): if data is None: return self.datas.append(data) # 输出一个html文档 def output_html(self): fileout = open("output.html", "w", encoding='utf-8') fileout.write("&lt;html&gt;") fileout.write("&lt;head&gt;") fileout.write("&lt;meta charset=\'utf-8\'&gt;") fileout.write("&lt;/head&gt;") fileout.write("&lt;body&gt;") fileout.write("&lt;table&gt;") for data in self.datas: fileout.write("&lt;tr&gt;") fileout.write("&lt;td&gt;%s&lt;/td&gt;" % data['url']) fileout.write("&lt;td&gt;%s&lt;/td&gt;" % data['title']) fileout.write("&lt;td&gt;%s&lt;/td&gt;" % data['summary']) fileout.write("&lt;/tr&gt;") fileout.write("&lt;/table&gt;") fileout.write("&lt;/body&gt;") fileout.write("&lt;/html&gt;") fileout.close()]]></content>
  </entry>
  <entry>
    <title><![CDATA[象棋棋盘]]></title>
    <url>%2F2017%2F08%2F19%2F%E6%A3%8B%E7%9B%98%E8%A6%86%E7%9B%96%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177#include &lt;graphics.h&gt; // 绘图库头文件，绘图语句需要#include &lt;conio.h&gt; // 控制台输入输出头文件，getch()语句需要void main()&#123; initgraph(500, 550); // 初始化640x480的绘图屏幕 setbkcolor(RGB(255, 255, 255)); //加载图片 clearcliprgn(); for (int i = 50; i &lt;= 450; i = i + 50) &#123; setlinecolor(RGB(200, 0, 0)); line(i, 50, i, 250); line(i, 300, i, 500); &#125; for (int i = 50; i &lt;= 500; i = i + 50) &#123; setlinecolor(RGB(200, 0, 0)); line(50, i, 450, i); &#125; //将 士 line(200, 50, 300, 150); line(200, 150, 300, 50); line(200, 500, 300, 400); line(200, 400, 300, 500); line(50, 250, 50, 300); line(450, 250, 450, 300); //图片 IMAGE img; // 定义 IMAGE 对象 loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BRS.GIF"); // 读取图片黑车到 img 对象中 putimage(30, 30, &amp;img); // 在坐标 (0, 0) 位置显示 IMAGE 对象 IMAGE img2; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BA.GIF");//黑士 putimage(180, 30, &amp;img); IMAGE img3; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BB.GIF");//黑象 putimage(130, 30, &amp;img); IMAGE img4; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BKS.GIF");//黑将 putimage(230, 30, &amp;img); IMAGE img5; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BNS.GIF");//黑马 putimage(80, 30, &amp;img); IMAGE img6; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BAS.GIF");//黑士 putimage(280, 30, &amp;img); IMAGE img7; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BBS.GIF");//黑象 putimage(330, 30, &amp;img); IMAGE img8; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BNS.GIF");//黑马 putimage(380, 30, &amp;img); IMAGE img9; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BR.GIF");//黑车 putimage(430, 30, &amp;img); IMAGE img10; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BP.GIF");//黑卒 putimage(30, 180, &amp;img); IMAGE img11; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BP1.GIF");//黑卒 putimage(130, 180, &amp;img); IMAGE img12; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BP2.GIF");//黑卒 putimage(230, 180, &amp;img); IMAGE img13; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BP3.GIF");//黑卒 putimage(330, 180, &amp;img); IMAGE img14; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BP4.GIF");//黑卒 putimage(430, 180, &amp;img); IMAGE img15; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BC.GIF");//黑炮 putimage(80, 130, &amp;img); IMAGE img16; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\BCS.GIF");//黑炮 putimage(380, 130, &amp;img); //红方 IMAGE img17; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RK.GIF");//红帅 putimage(230, 480, &amp;img); IMAGE img18; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RA.GIF");//红士 putimage(180, 480, &amp;img); IMAGE img19; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RAS.GIF");//红士 putimage(280,480, &amp;img); IMAGE img20; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RB.GIF");//红相 putimage(130, 480, &amp;img); IMAGE img21; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RBS.GIF");//红相 putimage(330, 480, &amp;img); IMAGE img22; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RN.GIF");//红马 putimage(380, 480, &amp;img); IMAGE img23; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RNS.GIF");//红马 putimage(80, 480, &amp;img); IMAGE img24; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RR.GIF");//红车 putimage(30, 480, &amp;img); IMAGE img25; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RR.GIF");//红车 putimage(30, 480, &amp;img); IMAGE img26; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RR.GIF");//红车 putimage(30, 480, &amp;img); IMAGE img36; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RRS.GIF");//红车 putimage(430, 480, &amp;img); IMAGE img27; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RPS.GIF");//红卒 putimage(30, 330, &amp;img); IMAGE img28; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RPS1.GIF");//红卒 putimage(130, 330, &amp;img); IMAGE img29; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RPS2.GIF");//红卒 putimage(230, 330, &amp;img); IMAGE img30; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RPS3.GIF");//红卒 putimage(330, 330, &amp;img); IMAGE img31; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RPS4.GIF");//红卒 putimage(430, 330, &amp;img); IMAGE img32; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RC.GIF");//红车 putimage(80, 380, &amp;img); IMAGE img33; loadimage(&amp;img, "C:\\IMAGES_S\\POLISH\\RCS.GIF");//红车 putimage(380, 380, &amp;img); _getch(); // 按任意键 closegraph(); // 关闭绘图屏幕&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[wechar robot]]></title>
    <url>%2F2017%2F08%2F19%2F%E5%9B%BE%E7%81%B5%E6%9C%BA%E5%99%A8%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[python的安装 pip的安装 下载weBot源码 注册图灵账号并创建机器人获得apikey 然后开始搞事情 1.python的安装 pip的安装 别忘啦配置路径 python安装 重点说pip（为安装一些依赖库而生）这个坑python官网下载文件如图 打开cmd 直接输入python 结果如下，则python已搞定注意 需要将pip的路径配给系统变量Path 需要将python安装目录下的Scripts文件路径陪给系统变量Path 配置好的pip，运行如下： 注册图灵账号并获得apikey 搞事情详情见wxbot的readme.md 在bot.py所在目录下新建conf.ini配置文件 里面的内容 运行bot.py(用cmd打开bot.py文件所在目录) 用手机微信扫描二维码登录 扫描后如下： 到这步就成功啦 要注意的是 群聊@你的备注 机器人不回复，将你的备注改成你的用户名就行拉 效果如图]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F08%2F19%2F%E5%8A%A8%E6%89%8B%E5%86%99%E7%BD%91%E9%A1%B51%2F</url>
    <content type="text"><![CDATA[&lt;!DOCTYPE html&gt; 菜鸟练网页input[type=text] { width: 130px; box-sizing: border-box; border: 2px solid #ccc; border-radius: 4px; font-size: 16px; background-color: white; background-image: url(‘searchicon.png’); background-position: 10px 10px; background-repeat: no-repeat; padding: 12px 20px 12px 40px; -webkit-transition: width 0.4s ease-in-out; transition: width 0.4s ease-in-out;}input[type=text]:focus { width: 100%;}body{ background-image: url(‘http://p1.bqimg.com/567571/1487e5929ef40176.jpg‘);}#myInput { background-image: url(‘https://static.runoob.com/images/mix/searchicon.png‘); / 搜索按钮 / background-position: 10px 12px; / 定位搜索按钮 / background-repeat: no-repeat; / 不重复图片 / width: 100%; font-size: 16px; padding: 12px 20px 12px 40px; border: 1px solid #ddd; margin-bottom: 12px;}#myTable { border-collapse: collapse; width: 100%; border: 1px solid #ddd; font-size: 18px;}#myTable th, #myTable td { text-align: left; padding: 12px;}#myTable tr { / 表格添加边框 / border-bottom: 1px solid #ddd;}#myTable tr.header, #myTable tr:hover { / 表头及鼠标移动过 tr 时添加背景 / background-color: #f1f1f1;} function myFunction() { // 声明变量 var input, filter, table, tr, td, i; input = document.getElementById(“myInput”); filter = input.value.toUpperCase(); table = document.getElementById(“myTable”); tr = table.getElementsByTagName(“tr”); // 循环表格每一行，查找匹配项 for (i = 0; i &lt; tr.length; i++) { td = tr[i].getElementsByTagName(“td”)[0]; if (td) { if (td.innerHTML.toUpperCase().indexOf(filter) &gt; -1) { tr[i].style.display = “”; } else { tr[i].style.display = “none”; } } }}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F08%2F19%2F%E5%8A%A8%E6%89%8B%E5%86%99%E7%BD%91%E9%A1%B5%2F</url>
    <content type="text"><![CDATA[&lt;!DOCTYPE html&gt; 我的第一个网页]]></content>
  </entry>
  <entry>
    <title><![CDATA[wechar robot]]></title>
    <url>%2F2017%2F08%2F19%2Fwechar%20robot%2F</url>
    <content type="text"><![CDATA[python的安装 pip的安装 下载weBot源码 注册图灵账号并创建机器人获得apikey 然后开始搞事情 1.python的安装 pip的安装 别忘啦配置路径 python安装 重点说pip（为安装一些依赖库而生）这个坑python官网下载文件如图 打开cmd 直接输入python 结果如下，则python已搞定注意 需要将pip的路径配给系统变量Path 需要将python安装目录下的Scripts文件路径陪给系统变量Path 配置好的pip，运行如下： 注册图灵账号并获得apikey 搞事情详情见wxbot的readme.md 在bot.py所在目录下新建conf.ini配置文件 里面的内容 运行bot.py(用cmd打开bot.py文件所在目录) 用手机微信扫描二维码登录 扫描后如下： 到这步就成功啦 要注意的是 群聊@你的备注 机器人不回复，将你的备注改成你的用户名就行拉 效果如图]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F08%2F19%2FUnity3d%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[PAT知识点]]></title>
    <url>%2F2017%2F08%2F19%2FPAT%E7%9F%A5%E8%AF%86%E7%82%B9%2F</url>
    <content type="text"><![CDATA[vector12345678910vecotr&lt;int&gt; // 声明向量容器 TM就是指针组 大小不确定vector&lt;int&gt; v(n);//见乙级1065vector&lt;int&gt;::iterator//定义向量迭代器vector&lt;int&gt;::iterator result=find(v.begin(),v.end(),table[v[i]]);// 见1065v.push_back(v[i]);//在v的末尾增加一个值为v[i]的元素举个例子for(vector&lt;int&gt;::iterator it=v.begin();it!=v.end();it++) cout&lt;&lt;*it&lt;&lt;endl;就把里面的内容都输出了 函数algorithm1234567以很好的平均效率排序 sort()sort(doge.begin(),doge.end());//见1065排序，并维持相同元素的原有顺序 stable_sort()将序列的前一部分排好序 partial_sort()复制的同时将序列的前一部分排好序 partial_sort_copy()在序列中找出某个值的第一次出现的位置 find()find(v.begin(),v.end(),table[v[i]]);//table[v[i]]为要找的元素 见乙级1065 qsort1234567891011121314151617181920212223242526272829qsort（即，quicksort）主要根据你给的比较条件给一个快速排序，主要是通过指针移动实现排序功能。排序之后的结果仍然放在原来数组中。参数意义如下:第一个参数 base 是 需要排序的目标数组名（或者也可以理解成开始排序的地址，因为可以写&amp;s[i]这样的表达式）第二个参数 num 是 参与排序的目标数组元素个数第三个参数 width 是单个元素的大小（或者目标数组中每一个元素长度），推荐使用sizeof(s[0]）这样的表达式第四个参数 compare 就是让很多人觉得非常困惑的比较函数啦int compare(const void *a_t, const void *b_t)&#123; int *a = (int *)a_t, *b = (int *)b_t; if(a[3] != b[3])&#123; return a[3] - b[3]; //type升序 &#125; else if(a[1] + a[2] != b[1] + b[2])&#123; return (b[1] + b[2]) - (a[1] + a[2]); //总分降序 &#125; else if(a[1] != b[1])&#123; return b[1] - a[1]; //德分降序 &#125; else&#123; return a[0] - b[0]; //学号升序 &#125;&#125;int main()&#123;qsort(&amp;sTable[0], n, sizeof(sTable[0]), compare);//数组名 元素个数 单个元素大小 比较函数&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[JAVA实验题]]></title>
    <url>%2F2017%2F08%2F19%2FJAVA%E5%AE%9E%E9%AA%8C%E9%A2%98%2F</url>
    <content type="text"><![CDATA[01123456789public class HelloWorld &#123; public static void main(String []args) &#123; System.out.println(" J A V V A "); System.out.println(" J A A V V A A"); System.out.println("J J AAAAA V V AAAAA"); System.out.println(" JJ A A V A A"); &#125;&#125; 0212345678public class HelloWorld &#123; public static void main(String []args) &#123; float pai; pai=4*(1-1/3+1/5-1/7+1/9-1/11+1/13); System.out.println("pai="+pai); &#125;&#125; 03123456789101112131415161718192021222324252627import java.util.Scanner;public class A*B&#123; public static void main(String[] args) &#123; double a[3][3],b[3][3]; double [][] A=&#123;&#123;a[0][0],a[0][1],a[0][2]&#125; &#123;a[1][0],a[1][1],a[1][2]&#125; &#123;a[2][0],a[2][1],a[2][2]&#125;&#125; double [][] B=&#123;&#123;b[0][0],b[0][1],b[0][2]&#125; &#123;b[1][0],b[1][1],b[1][2]&#125; &#123;b[2][0],b[2][1],b[2][2]&#125;&#125; double [][] C=&#123;&#123;c[0][0],c[0][1],c[0][2]&#125; &#123;c[1][0],c[1][1],c[1][2]&#125; &#123;c[2][0],c[2][1],c[2][2]&#125;&#125; //输入 Scanner in=new Scanner(System in); a[3][3]=scanner.nextLine(); b[3][3]=scanner.nextLine(); //计算 for(int i=0;i&lt;3;i++)&#123; for(int j=0;j&lt;3;j++)&#123; double m+=a[i][j]*b[j][i] &#125; &#125; &#125;&#125; 04 矩阵相乘算法12345678910111213141516171819202122232425262728293031323334353637383940public class ArrayMult &#123; public static void main(String[] args) &#123; int[][] a = &#123;&#123;1,2&#125;,&#123;3,4&#125;,&#123;5,6&#125;&#125;; int[][] b = &#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;; //m表示数组a的行数，n表示数组b的列数，s表示数组a的列数和数组b的行数 int m = a.length, n = b[0].length, s1 = a[0].length, s2 = b.length; //判断两个数组是否能够相乘求积 if(s1 != s2) &#123; System.out.println("数组不能相乘，数组a的列数不等于数组b的行数"); return; &#125; //动态创建数组c用来保存结果 int[][] c = new int[m][n]; for(int i=0; i&lt;m; i++) //i表示数组c的每一行 for(int j=0; j&lt;n; j++) &#123; //j表示数组c的每一列 int temp = 0; for(int k=0; k&lt;s1; k++) //k表示数组a的列号和数组b的行号 temp+=a[i][k]*b[k][j]; c[i][j] = temp; &#125; print(a); print(b); print(c); &#125; private static void print(int[][] c) &#123; int m = c.length; int n = c[0].length; for(int i=0; i&lt;m; i++) &#123; for(int j=0; j&lt;n; j++) &#123; if(c[i][j]&lt;10) System.out.print(" "); System.out.print(c[i][j] + " "); &#125; System.out.println(); &#125; System.out.println("--------------------------------------"); &#125; &#125; 061234567891011121314151617181920212223242526272829303132333435363738import java.util.Scanner;public class FingNearstPoints&#123; public static void main(String[] args) &#123; //输入 Scanner input=new Scanner(System in); System.out.println("Enter the number of points:"); int numberOfPoints=intput.nextLine(); // double[][] points=new double[numberOfPoints][2]; System.out.println("Enter"+numberOfPoints+"points"); for(int i=0;i&lt;points.length;i++)&#123; points[i][0]=input.nextDouble(); points[i][1]=input.nextDouble(); &#125; int p1=0,p2=1; double shortDistance=distance(points[p1][0],points[p1][1],points[p2][0],points[p2][1]); for(int i=0;i&lt;points.length;i++)&#123; for(int j=i+1;j&lt;points.length;j++)&#123; double distance=distance(points[i][0],points[i][10],points[j][0],points[j][10]); if(shortDistance&gt;distance)&#123; p1=i;p2=j; shortDistance=distance; &#125; &#125; &#125; System.out.println("The two points are"+"("+points[p1][0]+","+points[p1][1]+")and("+points[p2][0]+","+points[p2][1]+")"); &#125; public static double distance (double x1,double y1,double x2,double y2) &#123; return Math.sqrt(x2-x1)*(x2-x1)+(y2-y1)*(y2-y1); &#125; &#125;&#125; 03 日历 时钟package textchess;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Graphics;import java.util.Date; import java.awt.event.*;import javax.swing.*;import javax.swing.border.TitledBorder; import java.util.*;import javax.swing.JPanel; import javax.swing.JTextField; import java.awt.GridLayout;import javax.swing.JFrame; import javax.swing.JLabel;import javax.swing.SwingUtilities;import javax.swing.UIManager;public class Test extends JFrame&#123; private static final long serialVersionUID = 1L;//测试 public Test() &#123; Clock clock =new Clock(); Calender cal = new Calender(); @SuppressWarnings("unused") JPanel jp2 = new JPanel(); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setSize(560,300); setVisible(true); this.setContentPane(clock); this.getContentPane().add(cal,BorderLayout.WEST); setResizable(false); &#125;//////////////////////////////////// //画时钟public class DrawClock extends JPanel implements Runnable &#123; private static final long serialVersionUID = 1L; Thread newThread; //线程 public int RADIUS = 80; //时钟的半径 //设置时钟位置 public int centerX = 150; //设置时钟x轴 public int centerY = 120; //设置时钟y轴 public int hr, min, sec; //小时，分钟，秒 public int[] xPoint = new int[4]; //指针的4个坐标 public int[] yPoint = new int[4]; public double hrAlpha, minAlpha, secAlpha, theta; private JTextField timeZone; //启动时钟 public void start() &#123; newThread = new Thread(this); newThread.start(); //启动线程 &#125; //终止线程 public void stop() &#123; newThread = null; &#125; @SuppressWarnings("deprecation") public void paint(Graphics g) &#123; super.paint(g); //画出时钟刻度 double minuteAlpha = Math.PI/30.0; int count = 0; for(double alpha=0; alpha&lt;2.0*Math.PI; alpha+=minuteAlpha) &#123; int tX = (int)(centerX+RADIUS*0.9*Math.sin(alpha)); int tY = (int)(centerY-RADIUS*0.9*Math.cos(alpha)); if(count%5 == 0) &#123; g.setColor(Color.CYAN); g.fill3DRect(tX, tY, 3, 3, false); if(count%3==0) &#123; int m = count /15; switch(m)&#123; case 1: g.drawString("3", centerX+RADIUS-18, centerY+5);break; case 2: g.drawString("6", centerX-3, centerY+RADIUS-10);break; case 3: g.drawString("9", centerX-RADIUS+11,centerY+6);break; default: g.drawString("12", centerX-5, centerY-RADIUS+22); &#125; &#125; &#125; else &#123; g.setColor(Color.DARK_GRAY); g.fill3DRect(tX, tY, 2, 2, false); &#125; count++; &#125; //画出时钟时针 g.setColor(Color.gray); // 定义颜色 drawPointer(g, centerX+2, centerY+2, (int)(RADIUS*0.75), hrAlpha); g.setColor(Color.CYAN); // 定义颜色 drawPointer(g, centerX, centerY, (int)(RADIUS*0.75), hrAlpha); //画出分针 g.setColor(Color.gray); // 定义颜色 drawPointer(g, centerX+2, centerY+2, (int)(RADIUS*0.83), minAlpha); g.setColor(Color.CYAN); // 定义颜色 drawPointer(g, centerX, centerY, (int)(RADIUS*0.83), minAlpha); //画出秒针 g.setColor(Color.DARK_GRAY); //定义颜色 g.drawLine( centerX,centerY, (int)(centerX+(int)(RADIUS*0.79)*Math.sin(secAlpha)), (int)(centerY-(int)(RADIUS*0.79)*Math.cos(secAlpha)) ); setBorder(new TitledBorder("时间")); setBackground(Color.white); // 定义颜色 g.drawRect(85, 210, 130, 20); g.setColor(Color.WHITE); g.setColor(Color.DARK_GRAY); Date timeNow = new Date(); g.drawString(timeNow.toLocaleString(), 100,225); &#125; public Date getDate() &#123; Date timeNow = new Date(); return timeNow; &#125; // 刷新图层 public void update(Graphics g) &#123; paint(g); &#125; // 画出一个帧的图像 public void run() &#123; while(newThread != null) &#123; repaint(); try &#123; Thread.sleep(800); &#125; catch(InterruptedException E) &#123;&#125; Date timeNow = new Date(); @SuppressWarnings("deprecation") int hours = timeNow.getHours(); //这里不知道为什么会画横线的 @SuppressWarnings("deprecation") int minutes = timeNow.getMinutes(); //这里不知道为什么会画横线的 @SuppressWarnings("deprecation") int seconds = timeNow.getSeconds(); //这里不知道为什么会画横线的 hr = hours; min = minutes; sec = seconds; theta = Math.PI/6.0/20.0; hrAlpha = (double)(hr*3600 + min*60 + sec) /(12.0*3600.0)*2.0*Math.PI; minAlpha = (double)(min*60 + sec)/3600.0*2.0*Math.PI; secAlpha = (double)sec/60.0 * 2.0*Math.PI; &#125; &#125; private void drawPointer(Graphics g, int x, int y, int len, double theta) &#123; xPoint[0] = (int)(x+len*0.3*Math.sin(theta-Math.PI)); yPoint[0] = (int)(y-len*0.3*Math.cos(theta-Math.PI)); xPoint[1] = (int)(xPoint[0]+len*0.3*Math.sin (theta-(double)(10.0/180)*Math.PI)); yPoint[1] = (int)(yPoint[0]-len*0.3*Math.cos (theta-(double)(10.0/180)*Math.PI)); xPoint[2] = (int)(xPoint[0]+len * Math.sin(theta)); yPoint[2] = (int)(yPoint[0]-len * Math.cos(theta)); xPoint[3] = (int)(xPoint[0]+len*0.3*Math.sin (theta+(double)(10.0/180)*Math.PI)); yPoint[3] = (int)(yPoint[0]-len*0.3*Math.cos (theta+(double)(10.0/180)*Math.PI)); g.fillPolygon(xPoint, yPoint, 4); &#125; public JTextField getTimeZone() &#123; return timeZone; &#125; public void setTimeZone(JTextField timeZone) &#123; this.timeZone = timeZone; &#125; &#125; ////////////////////////////////// //时钟public class Clock extends JPanel &#123; private static final long serialVersionUID = 1L; private UIManager.LookAndFeelInfo looks[]; private DrawClock clock ; @SuppressWarnings("unused") private JPanel pane_clock ; JPanel pane_cal; public Clock() &#123; super(); looks = UIManager.getInstalledLookAndFeels(); changeTheLookAndFeel(2); clock = new DrawClock(); clock.start(); this.setBackground(Color.GRAY); this.setLayout(new BorderLayout()); this.setOpaque(false); this.add(clock); this.setBorder(new TitledBorder("时间日期")); setSize( 300, 300 ); setVisible( true ); &#125; private void changeTheLookAndFeel(int i) &#123; try &#123; UIManager.setLookAndFeel(looks[i].getClassName()); SwingUtilities.updateComponentTreeUI(this); &#125; catch(Exception exception) &#123; exception.printStackTrace(); &#125; &#125; &#125; /////////////////////////////////// //设计日历public class Calender extends JPanel implements ActionListener &#123; private static final long serialVersionUID = 1L; public final String HOUR_OF_DAY = null; //定义 @SuppressWarnings("rawtypes") JComboBox Month = new JComboBox(); @SuppressWarnings("rawtypes") JComboBox Year = new JComboBox(); JLabel Year_l = new JLabel("年"); JLabel Month_l = new JLabel("月"); Date now_date = new Date(); JLabel[] Label_day = new JLabel[49]; @SuppressWarnings("deprecation") int now_year = now_date.getYear() + 1900; @SuppressWarnings("deprecation") int now_month = now_date.getMonth(); boolean bool = false; String year_int = null; int month_int; JPanel pane_ym = new JPanel(); JPanel pane_day = new JPanel(); @SuppressWarnings("unchecked") public Calender() &#123; super(); //设定年月 for (int i = now_year - 10; i &lt;= now_year + 20; i++) &#123; Year.addItem(i + ""); &#125; for (int i = 1; i &lt; 13; i++) &#123; Month.addItem(i + ""); &#125; Year.setSelectedIndex(10); pane_ym.add(new JLabel(" ")); pane_ym.add(Year); pane_ym.add(Year_l); Month.setSelectedIndex(now_month); pane_ym.add(Month); pane_ym.add(Month_l); pane_ym.add(new JLabel(" ")); Month.addActionListener(this); Year.addActionListener(this); //初始化日期并绘制 pane_day.setLayout(new GridLayout(7, 7, 10, 10)); for (int i = 0; i &lt; 49; i++) &#123; Label_day[i] = new JLabel(" "); pane_day.add(Label_day[i]); &#125; this.setDay(); this.setLayout(new BorderLayout()); this.add(pane_day, BorderLayout.CENTER); this.add(pane_ym, BorderLayout.NORTH); this.setSize(100,200); this.setBorder(new TitledBorder("日历")); setSize(300,300); &#125; @SuppressWarnings("deprecation") void setDay() &#123; if (bool) &#123; year_int = now_year + ""; month_int = now_month; &#125; else &#123; year_int = Year.getSelectedItem().toString(); month_int = Month.getSelectedIndex(); &#125; int year_sel = Integer.parseInt(year_int) - 1900; //获得年份值 //@SuppressWarnings("deprecation") Date dt = new Date(year_sel, month_int, 1); //构造一个日期 GregorianCalendar cal = new GregorianCalendar(); //创建一个Calendar实例 cal.setTime(dt); String week[] = &#123; "日", "一","二", "三", "四", "五", "六" &#125;; int day = 0; int day_week = 0; for (int i = 0; i &lt; 7; i++) &#123; Label_day[i].setText(week[i]); &#125; //月份 if (month_int == 0||month_int == 2 ||month_int == 4 || month_int == 6 || month_int == 9 ||month_int == 11) &#123; day = 31; &#125; else if (month_int == 3 ||month_int == 5 || month_int == 7|| month_int == 8 ||month_int == 10|| month_int == 1) &#123; day = 30; &#125; else &#123; if (cal.isLeapYear(year_sel)) &#123; day = 29; &#125; else &#123; day = 28; &#125; &#125; day_week = 7 + dt.getDay(); int count = 1; for (int i = day_week; i &lt; day_week + day; count++, i++) &#123; if (i % 7 == 0 ||i == 13||i == 20||i == 27|| i == 48 ||i == 34 ||i == 41) &#123; if (i == day_week + now_date.getDate() - 1) &#123; Label_day[i].setForeground(Color.blue); Label_day[i].setText(count + ""); &#125; else &#123; Label_day[i].setForeground(Color.red); Label_day[i].setText(count + ""); &#125; &#125; else &#123; if (i == day_week + now_date.getDate() - 1) &#123; Label_day[i].setForeground(Color.blue); Label_day[i].setText(count + ""); &#125; else &#123; Label_day[i].setForeground(Color.black); Label_day[i].setText(count + ""); &#125; &#125; &#125; if (day_week == 0) &#123; for (int i = day; i &lt; 49; i++) &#123; Label_day[i].setText(" "); &#125; &#125; else &#123; for (int i = 7; i &lt; day_week; i++) &#123; Label_day[i].setText(" "); &#125; for (int i = day_week + day; i &lt; 49; i++) &#123; Label_day[i].setText(" "); &#125; &#125; &#125; public void actionPerformed(ActionEvent e) &#123; if (e.getSource() == Year || e.getSource() == Month) &#123; bool = false; this.setDay(); &#125; &#125; &#125;//////////////////////////////////public static void main(String[] args)&#123;try&#123; Test frame = new Test(); frame.setTitle("日历");&#125;catch (Exception e)&#123; System.out.print("run error!"); &#125;&#125;&#125; 4 棋盘覆盖package textchess;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Font;import java.awt.GridLayout;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.Random;import javax.print.attribute.standard.JobHoldUntil;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JTextArea;import javax.swing.JTextField;public class chessBoard extends JFrame &#123; private int tr, tc, dr, dc, size;//定义各成员变量 int tile = 1; float red,green,blue; JPanel centerPanel; JPanel southPanel; JButton[][] button; JTextField TrText, TcText, DrText, DcText, SizeText; JLabel TrLabel, TcLabel, DrLabel, DcLabel, SizeLabel; JButton OKButton; JButton CancelButton; JPanel panel = new JPanel(); public chessBoard() &#123; super(); setTitle("棋盘覆盖"); this.setResizable(false); centerPanel = new JPanel(); southPanel = new JPanel(); OKButton = new JButton("确定或开始"); OKButton.addActionListener(new OKButtonAction()); CancelButton = new JButton("取消或清除"); CancelButton.addActionListener(new OKButtonAction()); setBounds(300, -10, 900, 900);//设置窗口大小与位置 TrText = new JTextField("0",2);//定义各组件 TcText = new JTextField("0",2); DrText = new JTextField("0",2); DcText = new JTextField("0",2); SizeText = new JTextField("4",2); TrLabel = new JLabel("起始方格坐标x: "); TcLabel = new JLabel("起始方格坐标y: "); DrLabel = new JLabel("特殊方格坐标x: "); DcLabel = new JLabel("特殊方格坐标y: "); SizeLabel = new JLabel("棋盘规模size: "); TrText.setEnabled(false); TcText.setEnabled(false); int tR = Integer.parseInt(TrText.getText()); int tC = Integer.parseInt(TcText.getText()); int dR = Integer.parseInt(DrText.getText()); int dC = Integer.parseInt(DcText.getText()); int Size = 1; for (int i=0;i&lt;Integer.parseInt(SizeText.getText());i++) Size*=2; tr = tR; tc = tC; dr = dR; dc = dC; size = Size; southPanel.add(CancelButton);//添加各组件到窗体 southPanel.add(TrLabel); southPanel.add(TrText); southPanel.add(TcLabel); southPanel.add(TcText); southPanel.add(DrLabel); southPanel.add(DrText); southPanel.add(DcLabel); southPanel.add(DcText); southPanel.add(SizeLabel); southPanel.add(SizeText); southPanel.add(OKButton); getContentPane().add(southPanel, BorderLayout.NORTH); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); &#125; class gridLayout &#123; public gridLayout() &#123; centerPanel.setLayout(new GridLayout(0, size)); button = new JButton[size][size]; for (int i = 0; i &lt; size; i++) &#123; for (int j = 0; j &lt; size; j++) &#123; button[i][j] = new JButton(); if (i == dr &amp;&amp; j == dc) &#123; button[i][j].setBackground(Color.BLUE); button[i][j].setText("&lt;html&gt;&lt;font size='3' color='white'&gt;棋盘覆盖&lt;br&gt;Done By Java!&lt;/font&gt;&lt;/html&gt;"); button[i][j].setEnabled(false); &#125; centerPanel.add(button[i][j]); &#125; &#125; &#125; private void sleep() &#123; for (int i=0;i&lt;100;i++) for(int j=0;j&lt;1000;j++); &#125; public void ChessBoard(int tr, int tc, int dr, int dc, int size) &#123;//算法实现 if (size == 1) // 棋盘方格大小为1,说明递归到最里层 return; int t = tile++;// 每次递增1 Random rd = new Random(); red=rd.nextFloat(); green=rd.nextFloat(); blue=rd.nextFloat(); Color col = new Color(red,green,blue); sleep(); int s = size / 2; // 棋盘中间的行、列号(相等的) // 检查特殊方块是否在左上角子棋盘中 if (dr &lt; tr + s &amp;&amp; dc &lt; tc + s) // 在 ChessBoard(tr, tc, dr, dc, s); else // 不在，将该子棋盘右下角的方块视为特殊方块 &#123; button[tr + s - 1][tc + s - 1].setBackground(col); button[tr + s - 1][tc + s - 1].setEnabled(false); button[tr + s - 1][tc + s - 1].setText("&lt;html&gt;&lt;Font size='4',color='white'&gt;"+t+"&lt;/Font&gt;&lt;/html&gt;"); ChessBoard(tr, tc, tr + s - 1, tc + s - 1, s); sleep(); &#125; // 检查特殊方块是否在右上角子棋盘中 if (dr &lt; tr + s &amp;&amp; dc &gt;= tc + s) // 在 ChessBoard(tr, tc + s, dr, dc, s); else // 不在，将该子棋盘左下角的方块视为特殊方块 &#123; button[tr + s - 1][tc + s].setBackground(col); button[tr + s - 1][tc + s].setEnabled(false); button[tr + s - 1][tc + s ].setText("&lt;html&gt;&lt;Font size='4',color='white'&gt;"+t+"&lt;/Font&gt;&lt;/html&gt;"); ChessBoard(tr, tc + s, tr + s - 1, tc + s, s); sleep(); &#125; // 检查特殊方块是否在左下角子棋盘中 if (dr &gt;= tr + s &amp;&amp; dc &lt; tc + s) // 在 ChessBoard(tr + s, tc, dr, dc, s); else // 不在，将该子棋盘右上角的方块视为特殊方块 &#123; button[tr + s][tc + s - 1].setBackground(col); button[tr + s][tc + s - 1].setEnabled(false); button[tr + s ][tc + s - 1].setText("&lt;html&gt;&lt;Font size='4',color='white'&gt;"+t+"&lt;/Font&gt;&lt;/html&gt;"); ChessBoard(tr + s, tc, tr + s, tc + s - 1, s); sleep(); &#125; // 检查特殊方块是否在右下角子棋盘中 if (dr &gt;= tr + s &amp;&amp; dc &gt;= tc + s) // 在 ChessBoard(tr + s, tc + s, dr, dc, s); else // 不在，将该子棋盘左上角的方块视为特殊方块 &#123; button[tr + s][tc + s].setBackground(col); button[tr + s][tc + s].setEnabled(false); button[tr + s ][tc + s ].setText("&lt;html&gt;&lt;Font size='4',color='white'&gt;"+t+"&lt;/Font&gt;&lt;/html&gt;"); ChessBoard(tr + s, tc + s, tr + s, tc + s, s); sleep(); &#125; &#125; &#125; public class OKButtonAction implements ActionListener &#123;//点下一个按钮时的事件响应 @Override public void actionPerformed(ActionEvent e) &#123; // TODO Auto-generated method stub JButton whichButton = (JButton) e.getSource();//获取点击的事件，即是点下了哪个按钮 String whichName = whichButton.getActionCommand(); if(whichName.equals("确定或开始")) &#123; getContentPane().add(centerPanel, BorderLayout.CENTER); int tR = Integer.parseInt(TrText.getText()); int tC = Integer.parseInt(TcText.getText()); int dR = Integer.parseInt(DrText.getText()); int dC = Integer.parseInt(DcText.getText()); int Size = 1; for (int i=0;i&lt;Integer.parseInt(SizeText.getText());i++) Size*=2; tr = tR; tc = tC; dr = dR; dc = dC; size = Size; try &#123; gridLayout grid = new gridLayout(); grid.ChessBoard(tr, tc, dr, dc, size); centerPanel.updateUI(); &#125; catch (Exception EX) &#123; EX.printStackTrace(); &#125; panel.removeAll(); OKButton.setEnabled(false); &#125; if (whichName.equals("取消或清除")) &#123;//当你点下一个提示按钮时的事件响应 JLabel label = new JLabel(); label.setHorizontalAlignment(JLabel.CENTER); label.setText("&lt;html&gt;&lt;Font size='+8',color='red'&gt;&lt;center&gt;&lt;b&gt;&lt;br&gt; 您取消了操作或是 &lt;br&gt;&lt;Font size='+8',color='blue'&gt;&lt;center&gt;您清除了前一个棋盘……" + "&lt;br&gt;&lt;Font size='+8',color='green'&gt;&lt;center&gt;下面是关于题目的介绍&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/b&gt;&lt;/Font&gt;&lt;/html&gt;");// JLabel l = new JLabel("题目要求"); JTextArea area = new JTextArea("在一个2k x 2k ( 即：2^k x 2^k )个方格组成的棋盘中，恰有一个方格与其他方格不同，" + "称该方格为一特殊方格，且称该棋盘为一特殊棋盘。在棋盘覆盖问题中，要用4种不同形态的L型骨牌覆盖给定的特殊棋盘上除特殊方格以外的所有方格，" + "且任何2个L型骨牌不得重叠覆盖。",7,60); area.setLineWrap(true); area.setBackground(Color.blue); area.setForeground(Color.white); area.setFont (new Font("SansSerif", Font.PLAIN, 14)); area.setEditable(false);// FlowLayout layout = new FlowLayout();// layout.addLayoutComponent(arg0, arg1) panel.add(label,centerPanel );// panel.add(l,southPanel); panel.add(area,southPanel); getContentPane().add(panel, BorderLayout.CENTER); panel.updateUI(); tile=1; centerPanel.removeAll(); OKButton.setEnabled(true); &#125; &#125; &#125; public static void main(String[] args) &#123;//主函数方法实现 chessBoard chess = new chessBoard(); chess.setVisible(true); Runtime run = Runtime.getRuntime(); run.gc();//手动清除数据垃圾 &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F08%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[coolweather6]]></title>
    <url>%2F2017%2F08%2F17%2FCoolweather6%2F</url>
    <content type="text"><![CDATA[学习目的：1.获取必应每日一图 1.获取必应每日一图 每日一图接口：http://guolin.tech/api/bing_pic 服务器返回http://cn.bing.com/az/hprichbg/rb/AlaskaLynx_ROW9337883641_1920x1080.jpg每日一图背景 使用Glide加载即可 修改activity_weather```xml //…3qe]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[coolweather5]]></title>
    <url>%2F2017%2F08%2F17%2FCoolweather5%2F</url>
    <content type="text"><![CDATA[学习目的:1.将天气显示到界面上 首先在Utility类中添加解析JSON数据的方法 12345678910111213141516171819public class Utility &#123; //... /** * 将返回的JSON数据解析成Weather实体类 */ public static Weather handleWeatherResponse(String response) &#123; try &#123; JSONObject jsonObject = new JSONObject(response); JSONArray jsonArray = jsonObject.getJSONArray("HeWeather"); String weatherContent = jsonArray.getJSONObject(0).toString(); return new Gson().fromJson(weatherContent, Weather.class); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null; &#125;&#125; handleWeatherResponse()方法通过jsonObject jsonArray将天气主体内容解析出来 如下：12345678&#123; "status"："ok", "basic":&#123;&#125;, "aqi"：&#123;&#125;, "now":&#123;&#125;, "suggestion":&#123;&#125;, "daily_forecast":[]&#125; 按照上面数据格式定义的GSON实体类，只需通过fromjson()直接将JSON数据转换成weather对象。 接下来 在活动中请求天气数据 以及将数据展示在界面上。修改WeatherAcivitypackage com.coolweather.android;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.os.Build;import android.os.Bundle;import android.preference.PreferenceManager;import android.support.v4.view.GravityCompat;import android.support.v4.widget.DrawerLayout;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.app.AppCompatActivity;import android.view.LayoutInflater;import android.view.View;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ScrollView;import android.widget.TextView;import android.widget.Toast;import com.bumptech.glide.Glide;import com.coolweather.android.gson.Forecast;import com.coolweather.android.gson.Weather;import com.coolweather.android.service.AutoUpdateService;import com.coolweather.android.util.HttpUtil;import com.coolweather.android.util.Utility;import java.io.IOException;import okhttp3.Call;import okhttp3.Callback;import okhttp3.Response;public class WeatherActivity extends AppCompatActivity &#123; public DrawerLayout drawerLayout; public SwipeRefreshLayout swipeRefresh; private ScrollView weatherLayout; private Button navButton; private TextView titleCity; private TextView titleUpdateTime; private TextView degreeText; private TextView weatherInfoText; private LinearLayout forecastLayout; private TextView aqiText; private TextView pm25Text; private TextView comfortText; private TextView carWashText; private TextView sportText; private ImageView bingPicImg; private String mWeatherId; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); if (Build.VERSION.SDK_INT &gt;= 21) &#123; View decorView = getWindow().getDecorView(); decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE); getWindow().setStatusBarColor(Color.TRANSPARENT); &#125; setContentView(R.layout.activity_weather); // 初始化各控件 bingPicImg = (ImageView) findViewById(R.id.bing_pic_img); weatherLayout = (ScrollView) findViewById(R.id.weather_layout); titleCity = (TextView) findViewById(R.id.title_city); titleUpdateTime = (TextView) findViewById(R.id.title_update_time); degreeText = (TextView) findViewById(R.id.degree_text); weatherInfoText = (TextView) findViewById(R.id.weather_info_text); forecastLayout = (LinearLayout) findViewById(R.id.forecast_layout); aqiText = (TextView) findViewById(R.id.aqi_text); pm25Text = (TextView) findViewById(R.id.pm25_text); comfortText = (TextView) findViewById(R.id.comfort_text); carWashText = (TextView) findViewById(R.id.car_wash_text); sportText = (TextView) findViewById(R.id.sport_text); swipeRefresh = (SwipeRefreshLayout) findViewById(R.id.swipe_refresh); swipeRefresh.setColorSchemeResources(R.color.colorPrimary); drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout); navButton = (Button) findViewById(R.id.nav_button); SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this); String weatherString = prefs.getString("weather", null); if (weatherString != null) &#123; // 有缓存时直接解析天气数据 Weather weather = Utility.handleWeatherResponse(weatherString); mWeatherId = weather.basic.weatherId; showWeatherInfo(weather); &#125; else &#123; // 无缓存时去服务器查询天气 mWeatherId = getIntent().getStringExtra("weather_id"); weatherLayout.setVisibility(View.INVISIBLE); requestWeather(mWeatherId); &#125; swipeRefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() &#123; @Override public void onRefresh() &#123; requestWeather(mWeatherId); &#125; &#125;); navButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; drawerLayout.openDrawer(GravityCompat.START); &#125; &#125;); String bingPic = prefs.getString("bing_pic", null); if (bingPic != null) &#123; Glide.with(this).load(bingPic).into(bingPicImg); &#125; else &#123; loadBingPic(); &#125; &#125; /** * 根据天气id请求城市天气信息。 */ public void requestWeather(final String weatherId) &#123; String weatherUrl = "http://guolin.tech/api/weather?cityid=" + weatherId + "&amp;key=bc0418b57b2d4918819d3974ac1285d9"; HttpUtil.sendOkHttpRequest(weatherUrl, new Callback() &#123; @Override public void onResponse(Call call, Response response) throws IOException &#123; final String responseText = response.body().string(); final Weather weather = Utility.handleWeatherResponse(responseText); runOnUiThread(new Runnable() &#123; @Override public void run() &#123; if (weather != null &amp;&amp; "ok".equals(weather.status)) &#123; SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(WeatherActivity.this).edit(); editor.putString("weather", responseText); editor.apply(); mWeatherId = weather.basic.weatherId; showWeatherInfo(weather); &#125; else &#123; Toast.makeText(WeatherActivity.this, "获取天气信息失败", Toast.LENGTH_SHORT).show(); &#125; swipeRefresh.setRefreshing(false); &#125; &#125;); &#125; @Override public void onFailure(Call call, IOException e) &#123; e.printStackTrace(); runOnUiThread(new Runnable() &#123; @Override public void run() &#123; Toast.makeText(WeatherActivity.this, "获取天气信息失败", Toast.LENGTH_SHORT).show(); swipeRefresh.setRefreshing(false); &#125; &#125;); &#125; &#125;); loadBingPic(); &#125; /** * 处理并展示Weather实体类中的数据。 */ private void showWeatherInfo(Weather weather) &#123; String cityName = weather.basic.cityName; String updateTime = weather.basic.update.updateTime.split(" ")[1]; String degree = weather.now.temperature + "℃"; String weatherInfo = weather.now.more.info; titleCity.setText(cityName); titleUpdateTime.setText(updateTime); degreeText.setText(degree); weatherInfoText.setText(weatherInfo); forecastLayout.removeAllViews(); for (Forecast forecast : weather.forecastList) &#123; View view = LayoutInflater.from(this).inflate(R.layout.forecast_item, forecastLayout, false); TextView dateText = (TextView) view.findViewById(R.id.date_text); TextView infoText = (TextView) view.findViewById(R.id.info_text); TextView maxText = (TextView) view.findViewById(R.id.max_text); TextView minText = (TextView) view.findViewById(R.id.min_text); dateText.setText(forecast.date); infoText.setText(forecast.more.info); maxText.setText(forecast.temperature.max); minText.setText(forecast.temperature.min); forecastLayout.addView(view); &#125; if (weather.aqi != null) &#123; aqiText.setText(weather.aqi.city.aqi); pm25Text.setText(weather.aqi.city.pm25); &#125; String comfort = "舒适度：" + weather.suggestion.comfort.info; String carWash = "洗车指数：" + weather.suggestion.carWash.info; String sport = "运行建议：" + weather.suggestion.sport.info; comfortText.setText(comfort); carWashText.setText(carWash); sportText.setText(sport); weatherLayout.setVisibility(View.VISIBLE); Intent intent = new Intent(this, AutoUpdateService.class); startService(intent); &#125;&#125; 接下来，如何从省市列表跳转到天气界面修改ChooseAreaFragment12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879package com.coolweather.android;import android.app.ProgressDialog;import android.content.Intent;import android.os.Bundle;import android.support.v4.app.Fragment;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import com.coolweather.android.db.City;import com.coolweather.android.db.County;import com.coolweather.android.db.Province;import com.coolweather.android.util.HttpUtil;import com.coolweather.android.util.Utility;import org.litepal.crud.DataSupport;import java.io.IOException;import java.util.ArrayList;import java.util.List;import okhttp3.Call;import okhttp3.Callback;import okhttp3.Response;public class ChooseAreaFragment extends Fragment &#123; //... @Override public void onActivityCreated(Bundle savedInstanceState) &#123; super.onActivityCreated(savedInstanceState); listView.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123; @Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123; if (currentLevel == LEVEL_PROVINCE) &#123; selectedProvince = provinceList.get(position); queryCities(); &#125; else if (currentLevel == LEVEL_CITY) &#123; selectedCity = cityList.get(position); queryCounties(); &#125; else if (currentLevel == LEVEL_COUNTY) &#123; String weatherId = countyList.get(position).getWeatherId(); if (getActivity() instanceof MainActivity) &#123; Intent intent = new Intent(getActivity(), WeatherActivity.class); intent.putExtra("weather_id", weatherId); startActivity(intent); getActivity().finish(); &#125; else if (getActivity() instanceof WeatherActivity) &#123; WeatherActivity activity = (WeatherActivity) getActivity(); activity.drawerLayout.closeDrawers(); activity.swipeRefresh.setRefreshing(true); activity.requestWeather(weatherId); &#125; &#125; &#125; &#125;); backButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; if (currentLevel == LEVEL_COUNTY) &#123; queryCities(); &#125; else if (currentLevel == LEVEL_CITY) &#123; queryProvinces(); &#125; &#125; &#125;); queryProvinces(); &#125;&#125; onItemClick()加拉一个if判断 当前级别是LEVEL_COUNTY 就启动WeatherActivity 把当前选择县的id传过去 还需在MainActivit加入缓存数据判断 MainActivit12345678910111213141516171819202122import android.content.Intent;import android.content.SharedPreferences;import android.preference.PreferenceManager;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this); if (prefs.getString("weather", null) != null) &#123; Intent intent = new Intent(this, WeatherActivity.class); startActivity(intent); finish(); &#125; &#125;&#125; 现在onCreate()方法一开始先从SharedPreferences文件中读取数据 不为null就说明之前请求过天气数据 直接跳转到WeatherActivity即可]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简易版小恐龙]]></title>
    <url>%2F2017%2F08%2F16%2F%E7%AE%80%E6%98%93%E7%89%88%E5%B0%8F%E6%81%90%E9%BE%99%2F</url>
    <content type="text"><![CDATA[别人的代码，目前还在研究。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Chrome Dinosaur Game&lt;/title&gt; &lt;style type="text/css"&gt; #game &#123; background-color: black; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;canvas id="game" height="400" width="800"&gt;&lt;/canvas&gt; &lt;script type="text/javascript"&gt; /////////////////////// // Utility Functions // /////////////////////// function topWall(obj) &#123; return obj.y; &#125; function bottomWall(obj) &#123; return obj.y + obj.height; &#125; function leftWall(obj) &#123; return obj.x; &#125; function rightWall(obj) &#123; return obj.x + obj.width; &#125; ////////////////// // Game Objects // ////////////////// // ---------- // DINOSAUR function Dinosaur (x, dividerY) &#123; this.width = 55; this.height = 70; this.x = x; this.y = dividerY - this.height; this.vy = 0; this.jumpVelocity = -20; &#125; Dinosaur.prototype.draw = function(context) &#123; var oldFill = context.fillStyle; context.fillStyle = "yellow"; context.fillRect(this.x, this.y, this.width, this.height); context.fillStyle = oldFill; &#125;; Dinosaur.prototype.jump = function() &#123; console.log("Jump called"); this.vy = this.jumpVelocity; &#125;; Dinosaur.prototype.update = function(divider, gravity) &#123; this.y += this.vy; this.vy += gravity; if (bottomWall(this) &gt; topWall(divider) &amp;&amp; this.vy &gt; 0) &#123; this.y = topWall(divider) - this.height; this.vy = 0; return; &#125; &#125;; // ---------- // DIVIDER function Divider (gameWidth, gameHeight) &#123; this.width = gameWidth; this.height = 4; this.x = 0; this.y = gameHeight - this.height - Math.floor(0.2 * gameHeight); &#125; Divider.prototype.draw = function(context) &#123; context.fillRect(this.x, this.y, this.width, this.height); &#125;; // ---------- // ---------- // CACTUS function Cactus(gameWidth, groundY)&#123; this.width = 16; //fixed width cactus this.height = (Math.random() &gt; 0.5) ? 30 : 70// two different cactus this.x = gameWidth; this.x = gameWidth;// spawn cactus at screen end this.y = groundY - this.height; &#125; Cactus.prototype.draw = function(context)&#123; var oldFill = context.fillStyle; context.fillStyle = "green"; context.fillRect(this.x, this.y, this.width, this.height); context.fillStyle = oldFill; &#125;; // ---------- // GAME function Game () &#123; var canvas = document.getElementById("game"); this.width = canvas.width; this.height = canvas.height; this.context = canvas.getContext("2d"); this.context.fillStyle = "brown"; document.spacePressed = false; document.addEventListener("keydown", function(e) &#123; if (e.key === " ") this.spacePressed = true; &#125;); document.addEventListener("keyup", function(e) &#123; if (e.key === " ") this.spacePressed = false; &#125;); this.gravity = 1.5; this.divider = new Divider(this.width, this.height); this.dino = new Dinosaur(Math.floor(0.1 * this.width), this.divider.y); this.cacti = []; this.runSpeed = -10; this.paused = false; this.noOfFrames = 0; &#125; Game.prototype.spawnCactus = function(probability) //Spawns a new cactus depending upon the probability &#123; if(Math.random() &lt;= probability)&#123; this.cacti.push(new Cactus(this.width, this.divider.y)); &#125; &#125; Game.prototype.update = function () &#123; // Dinosaur jump start if(this.paused)&#123; return; &#125; if (document.spacePressed == true &amp;&amp; bottomWall(this.dino) &gt;= topWall(this.divider)) &#123; console.log("Conditions met"); this.dino.jump(); &#125; this.dino.update(this.divider, this.gravity); // Removing old cacti that cross the eft border of the screen if(this.cacti.length &gt; 0 &amp;&amp; rightWall(this.cacti[0]) &lt; 0) &#123; this.cacti.shift(); &#125; // Spawning new cacti //Case 1: There are no cacti on the screen if(this.cacti.length == 0)&#123; //Spawn a cactus with high probability this.spawnCactus(0.5); &#125; //Case 2: There is atleast one cactus else if ( this.cacti.length &gt; 0 &amp;&amp; this.width - leftWall(this.cacti[this.cacti.length-1]) &gt; this.jumpDistance + 150) &#123; this.spawnCactus(0.05); &#125; // Moving the cacti for (i = 0; i &lt; this.cacti.length; i++)&#123; this.cacti[i].x += this.runSpeed; &#125; //Collision Detection for(i = 0; i &lt; this.cacti.length; i++)&#123; if( rightWall(this.dino) &gt;= leftWall(this.cacti[i]) &amp;&amp; leftWall(this.dino) &lt;= rightWall(this.cacti[i]) &amp;&amp; bottomWall(this.dino) &gt;= topWall(this.cacti[i])) &#123; // COLLISION OCCURED this.paused = true; &#125; this.noOfFrames++; this.score = Math.floor(this.noOfFrames/10); &#125; //Jump Distance of the Dinosaur // This is a CONSTANT in this gamebecause run speed is constant //Equations: time = t * 2 * v / g where v is the jump velocity // Horizontal ditance s = vx * t where vx is the run speed this.jumpDistance = Math.floor(this.runSpeed * (2 * this.dino.jumpVelocity) / this.gravity); // Math.floor() because we only use integer value. &#125;; Game.prototype.draw = function () &#123; // clear rectangle of game this.context.clearRect(0, 0, this.width, this.height); // draw divider line this.divider.draw(this.context); // draw the dinosaur this.dino.draw(this.context); //drawing the cactii for (i = 0; i &lt; this.cacti.length; i++)&#123; this.cacti[i].draw(this.context); &#125; var oldFill = this.context.fillStyle; this.context.fillStyle = "white"; this.context.fillText(this.score, this.width-40, 30); this.context.fillStyle = oldFill; &#125;; var game = new Game(); function main (timeStamp) &#123; game.update(); game.draw(); window.requestAnimationFrame(main); &#125; var startGame = window.requestAnimationFrame(main); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[高级技巧]]></title>
    <url>%2F2017%2F08%2F15%2FCODE%202%20chaper13%2F</url>
    <content type="text"><![CDATA[学习目的：1.全局获取Context技巧（活动本身就是一个context对象）2. 使用INtent传递对象（serializable与Parcclablc方式）创建MyApplication类继承Application123456789public clss MyApplication extends Application&#123; private static Context context; public void onCreate()&#123; context=getApplicationContext(); &#125; public static Context getContext()&#123; return context; &#125;&#125; 修改AndroidMaifest.xml12345678910111213141516171819&lt;application android:name="com.example.networktest.MyApplication"//添加一行就行 路径一定要正确 android:allowBackup="true" android:icon="@mipmap/ic_launcher" android:label="@string/app_name" android:supportsRtl="true" android:theme="@style/AppTheme"&gt; &lt;meta-data android:name="com.baidu.lbsapi.API_KEY" android:value="i6VD2fHKM3msMfZtIOXAhFSzDiYGFIwL" /&gt; &lt;activity android:name=".MainActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.MAIN" /&gt; &lt;category android:name="android.intent.category.LAUNCHER" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;service android:name="com.baidu.location.f" android:enabled="true" android:process=":remote"&gt; &lt;/service&gt; &lt;/application&gt; 使用INtent传递对象（serializable与Parcclablc方式） serializable 序列化（方法：让类实现serializable接口）如：定义person类12345678910111213141516public class person implements Serializable&#123; private String name; private int age; public String getName()&#123; return name; &#125; public void setName()&#123; this.name=name; &#125; public int getAge()&#123; return age; &#125; public void setAge()&#123; this.age=age; &#125;&#125; FristActivity123456Person person=new person();person.setName();person.setAge();Intent intent=new Intent(FristActivity.this,SecondActivity.class);intent.putExtra(Person_data,person);startActivity(intent); 在SecondActivity获取这个对象1Person person=(Person)getIntent().getSerializableExtra("Person_data"); Parcclablc方式 (将一个完整的对象进行分解)]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[coolweather4]]></title>
    <url>%2F2017%2F08%2F15%2FCoolweather4%2F</url>
    <content type="text"><![CDATA[学习目的:1.显示天气信息 2.编写天气界面 1.显示天气信息（由于和风天气返回的json数据很复杂，用JSONObject解析很麻烦，这里借助Gson解析）回顾返回数据的大致格式123456789101112&#123; "HeWeather":[ &#123; "status":"ok", "basic":&#123;&#125;, "api":&#123;&#125;, "suggestion":&#123;&#125;, "daily_forecast":[] &#125; ]&#125; 可以将status api等5个部分内容定义为5个实体类例：“basic”;{ “city”:”苏州”， “id”:”CN101190401”, “update”:{ “loc”:”2016-08-08 21:58” }} 12345678910111213141516171819202122按照此结构早GSON下建一个Basic类```javaimport com.google.gson.annotations.SerializedName;public class Basic &#123; @SerializedName(&quot;city&quot;) public String cityName; @SerializedName(&quot;id&quot;) public String weatherId; public Update update; public class Update &#123; @SerializedName(&quot;loc&quot;) public String updateTime; &#125;&#125; 类推12345678910111213public class AQI &#123; public AQICity city; public class AQICity &#123; public String aqi; public String pm25; &#125;&#125; 123456789101112131415161718import com.google.gson.annotations.SerializedName;public class Now &#123; @SerializedName("tmp") public String temperature; @SerializedName("cond") public More more; public class More &#123; @SerializedName("txt") public String info; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334import com.google.gson.annotations.SerializedName;public class Suggestion &#123; @SerializedName("comf") public Comfort comfort; @SerializedName("cw") public CarWash carWash; public Sport sport; public class Comfort &#123; @SerializedName("txt") public String info; &#125; public class CarWash &#123; @SerializedName("txt") public String info; &#125; public class Sport &#123; @SerializedName("txt") public String info; &#125;&#125; 12345678910111213141516171819202122232425262728import com.google.gson.annotations.SerializedName;public class Forecast &#123; public String date; @SerializedName("tmp") public Temperature temperature; @SerializedName("cond") public More more; public class Temperature &#123; public String max; public String min; &#125; public class More &#123; @SerializedName("txt_d") public String info; &#125;&#125; 新建Weather类对五个类进行引用1234567891011121314151617181920import com.google.gson.annotations.SerializedName;import java.util.List;public class Weather &#123; public String status; public Basic basic; public AQI aqi; public Now now; public Suggestion suggestion; @SerializedName("daily_forecast") public List&lt;Forecast&gt; forecastList;&#125; 2.编写天气界面 新建WeatherActivity 并指定布局activity_weather.xml 新建title.xml作为头布局123456789101112131415161718192021222324252627282930313233&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="?attr/actionBarSize"&gt; &lt;Button android:id="@+id/nav_button" android:layout_width="30dp" android:layout_height="30dp" android:layout_marginLeft="10dp" android:layout_alignParentLeft="true" android:layout_centerVertical="true" android:background="@drawable/ic_home" /&gt; &lt;TextView android:id="@+id/title_city" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_centerInParent="true" android:textColor="#fff" android:textSize="20sp" /&gt; &lt;TextView android:id="@+id/title_update_time" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_marginRight="10dp" android:layout_alignParentRight="true" android:layout_centerVertical="true" android:textColor="#fff" android:textSize="16sp"/&gt;&lt;/RelativeLayout&gt; 居中更新城市名 居右更新时间 新建now.xml作为当前天气信息布局123456789101112131415161718192021222324&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_margin="15dp"&gt; &lt;TextView android:id="@+id/degree_text" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="end" android:textColor="#fff" android:textSize="60sp" /&gt; &lt;TextView android:id="@+id/weather_info_text" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="end" android:textColor="#fff" android:textSize="20sp" /&gt;&lt;/LinearLayout&gt; 两个TextView 一个显示气温 一个显示天气概况 新建forecast.xml作为未来几天天气布局12345678910111213141516171819202122232425&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_margin="15dp" android:background="#8000"&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_marginLeft="15dp" android:layout_marginTop="15dp" android:text="预报" android:textColor="#fff" android:textSize="20sp"/&gt; &lt;LinearLayout android:id="@+id/forecast_layout" android:orientation="vertical" android:layout_width="match_parent" android:layout_height="wrap_content"&gt; &lt;/LinearLayout&gt;&lt;/LinearLayout&gt; LinearLayout做一个半透明背景 TextView标题 LinearLayout显示未来几天天气布局 定义未来几天天气子布局forecast_item.xml1234567891011121314151617181920212223242526272829303132333435363738394041&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_margin="15dp"&gt; &lt;TextView android:id="@+id/date_text" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_gravity="center_vertical" android:layout_weight="2" android:textColor="#fff"/&gt; &lt;TextView android:id="@+id/info_text" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_gravity="center_vertical" android:layout_weight="1" android:gravity="center" android:textColor="#fff"/&gt; &lt;TextView android:id="@+id/max_text" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_gravity="center" android:layout_weight="1" android:gravity="right" android:textColor="#fff"/&gt; &lt;TextView android:id="@+id/min_text" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_gravity="center" android:layout_weight="1" android:gravity="right" android:textColor="#fff"/&gt;&lt;/LinearLayout&gt; 四个TextView 天气预报日期 天气概况 最高温度 最低温度 新建aqi.xml作为空气质量信息布局1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_margin="15dp" android:background="#8000"&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_marginLeft="15dp" android:layout_marginTop="15dp" android:text="空气质量" android:textColor="#fff" android:textSize="20sp"/&gt; &lt;LinearLayout android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_margin="15dp"&gt; &lt;RelativeLayout android:layout_width="0dp" android:layout_height="match_parent" android:layout_weight="1"&gt; &lt;LinearLayout android:orientation="vertical" android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_centerInParent="true"&gt; &lt;TextView android:id="@+id/aqi_text" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="center" android:textColor="#fff" android:textSize="40sp" /&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="center" android:text="AQI指数" android:textColor="#fff"/&gt; &lt;/LinearLayout&gt; &lt;/RelativeLayout&gt; &lt;RelativeLayout android:layout_width="0dp" android:layout_height="match_parent" android:layout_weight="1"&gt; &lt;LinearLayout android:orientation="vertical" android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_centerInParent="true"&gt; &lt;TextView android:id="@+id/pm25_text" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="center" android:textColor="#fff" android:textSize="40sp" /&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="center" android:text="PM2.5指数" android:textColor="#fff" /&gt; &lt;/LinearLayout&gt; &lt;/RelativeLayout&gt; &lt;/LinearLayout&gt;&lt;/LinearLayout&gt; LinearLayout半透明背景 TextView定义标题 RelativeLayout左右平分居中对齐 用于显示AQI和PM2.5 新建suggestion.xml作为生活建议信息的布局123456789101112131415161718192021222324252627282930313233343536373839&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_margin="15dp" android:background="#8000"&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_marginLeft="15dp" android:layout_marginTop="15dp" android:text="生活建议" android:textColor="#fff" android:textSize="20sp"/&gt; &lt;TextView android:id="@+id/comfort_text" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_margin="15dp" android:textColor="#fff" /&gt; &lt;TextView android:id="@+id/car_wash_text" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_margin="15dp" android:textColor="#fff" /&gt; &lt;TextView android:id="@+id/sport_text" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_margin="15dp" android:textColor="#fff" /&gt;&lt;/LinearLayout&gt; LinearLayout半透明背景 TextView定义标题 其他三个TextView显示舒适度 洗车指数 运动建议相关数据 将每个部分布局引入到activity_weather.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent" android:background="@color/colorPrimary"&gt; &lt;ImageView android:id="@+id/bing_pic_img" android:layout_width="match_parent" android:layout_height="match_parent" android:scaleType="centerCrop" /&gt; &lt;android.support.v4.widget.DrawerLayout android:id="@+id/drawer_layout" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;android.support.v4.widget.SwipeRefreshLayout android:id="@+id/swipe_refresh" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;ScrollView android:id="@+id/weather_layout" android:layout_width="match_parent" android:layout_height="match_parent" android:scrollbars="none" android:overScrollMode="never"&gt; &lt;LinearLayout android:orientation="vertical" android:layout_width="match_parent" android:layout_height="wrap_content" android:fitsSystemWindows="true"&gt; &lt;include layout="@layout/title" /&gt; &lt;include layout="@layout/now" /&gt; &lt;include layout="@layout/forecast" /&gt; &lt;include layout="@layout/aqi" /&gt; &lt;include layout="@layout/suggestion" /&gt; &lt;/LinearLayout&gt; &lt;/ScrollView&gt; &lt;/android.support.v4.widget.SwipeRefreshLayout&gt; &lt;fragment android:id="@+id/choose_area_fragment" android:name="com.coolweather.android.ChooseAreaFragment" android:layout_width="match_parent" android:layout_height="match_parent" android:layout_gravity="start" /&gt; &lt;/android.support.v4.widget.DrawerLayout&gt;&lt;/FrameLayout&gt; ScrollViewn允许滚动]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高级技巧]]></title>
    <url>%2F2017%2F08%2F15%2F1.CODE%202%20chaper13%2F</url>
    <content type="text"><![CDATA[学习目的：1.定制自己的日志工具 2.调试android程序 新建LogUitl类1234567891011121314151617181920212223242526272829303132333435public class LogUitl&#123; public static final int VERBOSE=1; public static final int DEBUG=2; public static final int INFO=3; public static final int WARN=4; public static final int VERROR=5; public static final int NOTHING=1; public static int level=VERBOSE; public static void v(String tag,String msg)&#123; if(level&lt;=VERBOSE)&#123; Log.v(tag,msg); &#125; &#125; public static void d(String tag,String msg)&#123; if(level&lt;=DEBUG)&#123; Log.d(tag,msg); &#125; &#125; public static void i (String tag,String msg)&#123; if(level&lt;=INFO)&#123; Log.i(tag,msg); &#125; &#125; public static void w(String tag,String msg)&#123; if(level&lt;=WARN)&#123; Log.w(tag,msg); &#125; &#125; public static void e(String tag,String msg)&#123; if(level&lt;=ERROR)&#123; Log.e(tag,msg); &#125; &#125;&#125; 使用 如打印WARN级别的日志1LogUitl.w("TAG","warn log"); 2.调试android程序 3.创建定时任务 Alarm机制如：设置一个任务10s后执行12long triggerAtTime=SystemClock.elapsedRealtime()+10*1000;manager.set(AlarmManager.ELAPSED_REALLTIME_WAKEUP,triggerAtTime,pendingIntent); ELAPSED_REALLTIME_WAKEUP四种模式的其中一种]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[coolweather3]]></title>
    <url>%2F2017%2F08%2F14%2FCoolweather3%2F</url>
    <content type="text"><![CDATA[学习目的：1.布局+数据库 显示市级界面 县级界面 省级界面 新建choose_area.xml 12345678910111213141516171819202122232425262728293031323334353637&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="match_parent" android:layout_height="match_parent" android:background="#fff" android:fitsSystemWindows="true"&gt; &lt;RelativeLayout android:layout_width="match_parent" android:layout_height="?attr/actionBarSize" android:background="?attr/colorPrimary"&gt; &lt;TextView android:id="@+id/title_text" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_centerInParent="true" android:textColor="#fff" android:textSize="20sp"/&gt; &lt;Button android:id="@+id/back_button" android:layout_width="25dp" android:layout_height="25dp" android:layout_marginLeft="10dp" android:layout_alignParentLeft="true" android:layout_centerVertical="true" android:background="@drawable/ic_back"/&gt; &lt;/RelativeLayout&gt; &lt;ListView android:id="@+id/list_view" android:layout_width="match_parent" android:layout_height="match_parent"/&gt;&lt;/LinearLayout&gt; 关键：编写用于遍历省市县数据的碎片 新建Choose-AreaFragment类继承Fragmentimport android.app.ProgressDialog;import android.content.Intent;import android.os.Bundle;import android.support.v4.app.Fragment;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import com.coolweather.android.db.City;import com.coolweather.android.db.County;import com.coolweather.android.db.Province;import com.coolweather.android.util.HttpUtil;import com.coolweather.android.util.Utility;import org.litepal.crud.DataSupport;import java.io.IOException;import java.util.ArrayList;import java.util.List;import okhttp3.Call;import okhttp3.Callback;import okhttp3.Response;public class ChooseAreaFragment extends Fragment &#123; private static final String TAG = "ChooseAreaFragment"; public static final int LEVEL_PROVINCE = 0; public static final int LEVEL_CITY = 1; public static final int LEVEL_COUNTY = 2; private ProgressDialog progressDialog; private TextView titleText; private Button backButton; private ListView listView; private ArrayAdapter&lt;String&gt; adapter; private List&lt;String&gt; dataList = new ArrayList&lt;&gt;(); /** * 省列表 */ private List&lt;Province&gt; provinceList; /** * 市列表 */ private List&lt;City&gt; cityList; /** * 县列表 */ private List&lt;County&gt; countyList; /** * 选中的省份 */ private Province selectedProvince; /** * 选中的城市 */ private City selectedCity; /** * 当前选中的级别 */ private int currentLevel; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; View view = inflater.inflate(R.layout.choose_area, container, false); titleText = (TextView) view.findViewById(R.id.title_text); backButton = (Button) view.findViewById(R.id.back_button); listView = (ListView) view.findViewById(R.id.list_view); adapter = new ArrayAdapter&lt;&gt;(getContext(), android.R.layout.simple_list_item_1, dataList); listView.setAdapter(adapter); return view; &#125; @Override public void onActivityCreated(Bundle savedInstanceState) &#123; super.onActivityCreated(savedInstanceState); listView.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123; @Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123; if (currentLevel == LEVEL_PROVINCE) &#123; selectedProvince = provinceList.get(position); queryCities(); &#125; else if (currentLevel == LEVEL_CITY) &#123; selectedCity = cityList.get(position); queryCounties(); &#125; else if (currentLevel == LEVEL_COUNTY) &#123; String weatherId = countyList.get(position).getWeatherId(); if (getActivity() instanceof MainActivity) &#123; Intent intent = new Intent(getActivity(), WeatherActivity.class); intent.putExtra("weather_id", weatherId); startActivity(intent); getActivity().finish(); &#125; else if (getActivity() instanceof WeatherActivity) &#123; WeatherActivity activity = (WeatherActivity) getActivity(); activity.drawerLayout.closeDrawers(); activity.swipeRefresh.setRefreshing(true); activity.requestWeather(weatherId); &#125; &#125; &#125; &#125;); backButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; if (currentLevel == LEVEL_COUNTY) &#123; queryCities(); &#125; else if (currentLevel == LEVEL_CITY) &#123; queryProvinces(); &#125; &#125; &#125;); queryProvinces(); &#125; /** * 查询全国所有的省，优先从数据库查询，如果没有查询到再去服务器上查询。 */ private void queryProvinces() &#123; titleText.setText("中国"); backButton.setVisibility(View.GONE); provinceList = DataSupport.findAll(Province.class); if (provinceList.size() &gt; 0) &#123; dataList.clear(); for (Province province : provinceList) &#123; dataList.add(province.getProvinceName()); &#125; adapter.notifyDataSetChanged(); listView.setSelection(0); currentLevel = LEVEL_PROVINCE; &#125; else &#123; String address = "http://guolin.tech/api/china"; queryFromServer(address, "province"); &#125; &#125; /** * 查询选中省内所有的市，优先从数据库查询，如果没有查询到再去服务器上查询。 */ private void queryCities() &#123; titleText.setText(selectedProvince.getProvinceName()); backButton.setVisibility(View.VISIBLE); cityList = DataSupport.where("provinceid = ?", String.valueOf(selectedProvince.getId())).find(City.class); if (cityList.size() &gt; 0) &#123; dataList.clear(); for (City city : cityList) &#123; dataList.add(city.getCityName()); &#125; adapter.notifyDataSetChanged(); listView.setSelection(0); currentLevel = LEVEL_CITY; &#125; else &#123; int provinceCode = selectedProvince.getProvinceCode(); String address = "http://guolin.tech/api/china/" + provinceCode; queryFromServer(address, "city"); &#125; &#125; /** * 查询选中市内所有的县，优先从数据库查询，如果没有查询到再去服务器上查询。 */ private void queryCounties() &#123; titleText.setText(selectedCity.getCityName()); backButton.setVisibility(View.VISIBLE); countyList = DataSupport.where("cityid = ?", String.valueOf(selectedCity.getId())).find(County.class); if (countyList.size() &gt; 0) &#123; dataList.clear(); for (County county : countyList) &#123; dataList.add(county.getCountyName()); &#125; adapter.notifyDataSetChanged(); listView.setSelection(0); currentLevel = LEVEL_COUNTY; &#125; else &#123; int provinceCode = selectedProvince.getProvinceCode(); int cityCode = selectedCity.getCityCode(); String address = "http://guolin.tech/api/china/" + provinceCode + "/" + cityCode; queryFromServer(address, "county"); &#125; &#125; /** * 根据传入的地址和类型从服务器上查询省市县数据。 */ private void queryFromServer(String address, final String type) &#123; showProgressDialog(); HttpUtil.sendOkHttpRequest(address, new Callback() &#123; @Override public void onResponse(Call call, Response response) throws IOException &#123; String responseText = response.body().string(); boolean result = false; if ("province".equals(type)) &#123; result = Utility.handleProvinceResponse(responseText); &#125; else if ("city".equals(type)) &#123; result = Utility.handleCityResponse(responseText, selectedProvince.getId()); &#125; else if ("county".equals(type)) &#123; result = Utility.handleCountyResponse(responseText, selectedCity.getId()); &#125; if (result) &#123; getActivity().runOnUiThread(new Runnable() &#123; @Override public void run() &#123; closeProgressDialog(); if ("province".equals(type)) &#123; queryProvinces(); &#125; else if ("city".equals(type)) &#123; queryCities(); &#125; else if ("county".equals(type)) &#123; queryCounties(); &#125; &#125; &#125;); &#125; &#125; @Override public void onFailure(Call call, IOException e) &#123; // 通过runOnUiThread()方法回到主线程处理逻辑 getActivity().runOnUiThread(new Runnable() &#123; @Override public void run() &#123; closeProgressDialog(); Toast.makeText(getContext(), "加载失败", Toast.LENGTH_SHORT).show(); &#125; &#125;); &#125; &#125;); &#125; /** * 显示进度对话框 */ private void showProgressDialog() &#123; if (progressDialog == null) &#123; progressDialog = new ProgressDialog(getActivity()); progressDialog.setMessage("正在加载..."); progressDialog.setCanceledOnTouchOutside(false); &#125; progressDialog.show(); &#125; /** * 关闭进度对话框 */ private void closeProgressDialog() &#123; if (progressDialog != null) &#123; progressDialog.dismiss(); &#125; &#125;&#125; 遍历省市县数据完成 但碎片不能直接显示在界面上 还需添加到活动里activity_main.xml123456789101112&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;fragment android:id="@+id/choose_area_fragment" android:name="com.coolweather.android.ChooseAreaFragment" android:layout_width="match_parent" android:layout_height="match_parent" /&gt;&lt;/FrameLayout&gt; 另外 由于碎片布局已定义标题栏 所以不需要ActionBar 所以修改style.xml1234567891011&lt;resources&gt; &lt;!-- Base application theme. --&gt; &lt;style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar"&gt; &lt;!-- Customize your theme here. --&gt; &lt;item name="colorPrimary"&gt;@color/colorPrimary&lt;/item&gt; &lt;item name="colorPrimaryDark"&gt;@color/colorPrimaryDark&lt;/item&gt; &lt;item name="colorAccent"&gt;@color/colorAccent&lt;/item&gt; &lt;/style&gt;&lt;/resources&gt; 申请权限1&lt;uses-permission android:name="android.permission.INTERNET" /&gt; 到此可以显示市级界面 县级界面 省级界面 ！]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[coolweather2]]></title>
    <url>%2F2017%2F08%2F14%2FCoolweather2%2F</url>
    <content type="text"><![CDATA[学习目的：1.遍历全国省市县数据（获取json数据 处理返回的json数据） 1.遍历全国省市县数据 在Util包新建HttpUtil类 获取json数据123456789101112import okhttp3.OkHttpClient;import okhttp3.Request;public class HttpUtil &#123; public static void sendOkHttpRequest(String address, okhttp3.Callback callback) &#123; OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder().url(address).build(); client.newCall(request).enqueue(callback); &#125;&#125; 再新建Utility类处理返回的json数据1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798import android.text.TextUtils;import com.coolweather.android.db.City;import com.coolweather.android.db.County;import com.coolweather.android.db.Province;import com.coolweather.android.gson.Weather;import com.google.gson.Gson;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;public class Utility &#123; /** * 解析和处理服务器返回的省级数据 */ public static boolean handleProvinceResponse(String response) &#123; if (!TextUtils.isEmpty(response)) &#123; try &#123; JSONArray allProvinces = new JSONArray(response); for (int i = 0; i &lt; allProvinces.length(); i++) &#123; JSONObject provinceObject = allProvinces.getJSONObject(i); Province province = new Province(); province.setProvinceName(provinceObject.getString("name")); province.setProvinceCode(provinceObject.getInt("id")); province.save(); &#125; return true; &#125; catch (JSONException e) &#123; e.printStackTrace(); &#125; &#125; return false; &#125; /** * 解析和处理服务器返回的市级数据 */ public static boolean handleCityResponse(String response, int provinceId) &#123; if (!TextUtils.isEmpty(response)) &#123; try &#123; JSONArray allCities = new JSONArray(response); for (int i = 0; i &lt; allCities.length(); i++) &#123; JSONObject cityObject = allCities.getJSONObject(i); City city = new City(); city.setCityName(cityObject.getString("name")); city.setCityCode(cityObject.getInt("id")); city.setProvinceId(provinceId); city.save(); &#125; return true; &#125; catch (JSONException e) &#123; e.printStackTrace(); &#125; &#125; return false; &#125; /** * 解析和处理服务器返回的县级数据 */ public static boolean handleCountyResponse(String response, int cityId) &#123; if (!TextUtils.isEmpty(response)) &#123; try &#123; JSONArray allCounties = new JSONArray(response); for (int i = 0; i &lt; allCounties.length(); i++) &#123; JSONObject countyObject = allCounties.getJSONObject(i); County county = new County(); county.setCountyName(countyObject.getString("name")); county.setWeatherId(countyObject.getString("weather_id")); county.setCityId(cityId); county.save(); &#125; return true; &#125; catch (JSONException e) &#123; e.printStackTrace(); &#125; &#125; return false; &#125; /** * 将返回的JSON数据解析成Weather实体类 */ public static Weather handleWeatherResponse(String response) &#123; try &#123; JSONObject jsonObject = new JSONObject(response); JSONArray jsonArray = jsonObject.getJSONArray("HeWeather"); String weatherContent = jsonArray.getJSONObject(0).toString(); return new Gson().fromJson(weatherContent, Weather.class); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null; &#125;&#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[coolweather]]></title>
    <url>%2F2017%2F08%2F13%2FCoolweather%2F</url>
    <content type="text"><![CDATA[学习目的：1.功能需求和可行性分析 2.加入创建数据库和表的各项配置 1.功能需求和可行性分析 可以罗列出全国的省 市 县 可以查看全国任意城市的天气信息 可以自由切换城市，去看其他城市天气 提供手动更新和后台自动更新天气功能 有API key（key=bf79cd24a8494d0eb2c7c949fce6c383）和weather id（cityid=CN101190401）就能获取任意天气信息 如：查看苏州天气：http://guolin.tech/api/weather?cityid=CN101190401&amp;key=bf79cd24a8494d0eb2c7c949fce6c383 信息以json格式返回 提取下重要信息123456789101112&#123; "HeWeather":[ &#123; "status":"ok", "basic":&#123;&#125;, "api":&#123;&#125;, "suggestion":&#123;&#125;, "daily_forecast":[] &#125; ]&#125; 2.创建数据库和表 添加依赖123compile 'org.litepal.android:core:1.3.2' compile 'com.squareup.okhttp3:okhttp:3.4.1' compile 'com.google.code.gson:gson:2.7' 在DB包下新建Province类 City类 Country类12345678910111213141516171819202122232425262728293031323334import org.litepal.crud.DataSupport;public class Province extends DataSupport &#123; private int id; private String provinceName; private int provinceCode; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getProvinceName() &#123; return provinceName; &#125; public void setProvinceName(String provinceName) &#123; this.provinceName = provinceName; &#125; public int getProvinceCode() &#123; return provinceCode; &#125; public void setProvinceCode(int provinceCode) &#123; this.provinceCode = provinceCode; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445mport org.litepal.crud.DataSupport;public class County extends DataSupport &#123; private int id; private String countyName; private String weatherId; private int cityId; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getCountyName() &#123; return countyName; &#125; public void setCountyName(String countyName) &#123; this.countyName = countyName; &#125; public String getWeatherId() &#123; return weatherId; &#125; public void setWeatherId(String weatherId) &#123; this.weatherId = weatherId; &#125; public int getCityId() &#123; return cityId; &#125; public void setCityId(int cityId) &#123; this.cityId = cityId; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445import org.litepal.crud.DataSupport;public class City extends DataSupport &#123; private int id; private String cityName; private int cityCode; private int provinceId; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getCityName() &#123; return cityName; &#125; public void setCityName(String cityName) &#123; this.cityName = cityName; &#125; public int getCityCode() &#123; return cityCode; &#125; public void setCityCode(int cityCode) &#123; this.cityCode = cityCode; &#125; public int getProvinceId() &#123; return provinceId; &#125; public void setProvinceId(int provinceId) &#123; this.provinceId = provinceId; &#125;&#125; 配置litepal.xml文件 将实体类添加到映射表中app/src/main-&gt;New-&gt;Directory-&gt;assets-&gt;litepal.xml12345678910111213litepal&gt; &lt;dbname value="cool_weather" /&gt; &lt;version value="1" /&gt; &lt;list&gt; &lt;mapping class="com.coolweather.android.db.Province" /&gt; &lt;mapping class="com.coolweather.android.db.City" /&gt; &lt;mapping class="com.coolweather.android.db.County" /&gt; &lt;/list&gt;&lt;/litepal&gt; 还需配置LitePalApplication 修改AndroidManifest.xml12&lt;application android:name="org.litepal.LitePalApplication" 数据库配置完成！]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[materialtest6(最佳UI体验)]]></title>
    <url>%2F2017%2F08%2F11%2FMaterialtest6%2F</url>
    <content type="text"><![CDATA[学习目的：3.可折叠的标题栏(逻辑编写) 4.充分利用系统状态栏空间（上拉时背景图与状态栏融合）FruitActivity12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class FruitActivity extends AppCompatActivity &#123; public static final String FRUIT_NAME = "fruit_name"; public static final String FRUIT_IMAGE_ID = "fruit_image_id"; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_fruit); Intent intent = getIntent(); String fruitName = intent.getStringExtra(FRUIT_NAME); int fruitImageId = intent.getIntExtra(FRUIT_IMAGE_ID, 0); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar); ImageView fruitImageView = (ImageView) findViewById(R.id.fruit_image_view); TextView fruitContentText = (TextView) findViewById(R.id.fruit_content_text); setSupportActionBar(toolbar); ActionBar actionBar = getSupportActionBar(); if (actionBar != null) &#123; actionBar.setDisplayHomeAsUpEnabled(true); &#125; collapsingToolbar.setTitle(fruitName); Glide.with(this).load(fruitImageId).into(fruitImageView); String fruitContent = generateFruitContent(fruitName); fruitContentText.setText(fruitContent); &#125; private String generateFruitContent(String fruitName) &#123; StringBuilder fruitContent = new StringBuilder(); for (int i = 0; i &lt; 500; i++) &#123; fruitContent.append(fruitName); &#125; return fruitContent.toString(); &#125; @Override public boolean onOptionsItemSelected(MenuItem item) &#123; switch (item.getItemId()) &#123; case android.R.id.home: finish(); return true; &#125; return super.onOptionsItemSelected(item); &#125;&#125; FruitAdapter1234567891011121314151617181920212223242526public class FruitAdapter extends RecyclerView.Adapter&lt;FruitAdapter.ViewHolder&gt;&#123; //... @Override public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; if (mContext == null) &#123; mContext = parent.getContext(); &#125; View view = LayoutInflater.from(mContext).inflate(R.layout.fruit_item, parent, false); final ViewHolder holder = new ViewHolder(view); holder.cardView.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; int position = holder.getAdapterPosition(); Fruit fruit = mFruitList.get(position); Intent intent = new Intent(mContext, FruitActivity.class); intent.putExtra(FruitActivity.FRUIT_NAME, fruit.getName()); intent.putExtra(FruitActivity.FRUIT_IMAGE_ID, fruit.getImageId()); mContext.startActivity(intent); &#125; &#125;); return holder; &#125; //...&#125; 充分利用系统状态栏空间（上拉时背景图与状态栏融合）activity_fruit123456789101112131415161718192021222324252627282930313233&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent" android:fitsSystemWindows="true"&gt;//上拉时背景图与状态栏融合 还需设置主题透明 &lt;android.support.design.widget.AppBarLayout android:id="@+id/appBar" android:layout_width="match_parent" android:layout_height="250dp" android:fitsSystemWindows="true"&gt;//上拉时背景图与状态栏融合 还需设置主题透明 &lt;android.support.design.widget.CollapsingToolbarLayout android:id="@+id/collapsing_toolbar" android:layout_width="match_parent" android:layout_height="match_parent" android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar" android:fitsSystemWindows="true"//上拉时背景图与状态栏融合 还需设置主题透明 app:contentScrim="?attr/colorPrimary" app:layout_scrollFlags="scroll|exitUntilCollapsed"&gt; &lt;ImageView android:id="@+id/fruit_image_view" android:layout_width="match_parent" android:layout_height="match_parent" android:scaleType="centerCrop" android:fitsSystemWindows="true" app:layout_collapseMode="parallax" /&gt; //...&lt;/android.support.design.widget.CoordinatorLayout&gt; 还需设置主题透明 创建New-&gt;Directory-&gt;values-v21-&gt;New-&gt;Values resource file-&gt;style.xml1234567891011121314&lt;resources&gt; &lt;!-- Base application theme. --&gt; &lt;style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar"&gt; &lt;!-- Customize your theme here. --&gt; &lt;item name="colorPrimary"&gt;@color/colorPrimary&lt;/item&gt; &lt;item name="colorPrimaryDark"&gt;@color/colorPrimaryDark&lt;/item&gt; &lt;item name="colorAccent"&gt;@color/colorAccent&lt;/item&gt; &lt;/style&gt; &lt;style name="FruitActivityTheme" parent="AppTheme"&gt; &lt;/style&gt;&lt;/resources&gt; AndroidMaifest.xml1234&lt;activity android:name=".FruitActivity" android:theme="@style/FruitActivityTheme"&gt; &lt;/activity&gt;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[materialtest5(最佳UI体验)]]></title>
    <url>%2F2017%2F08%2F11%2FMaterialtest5%2F</url>
    <content type="text"><![CDATA[学习目的：3.可折叠的标题栏(界面编写) 3.可折叠的标题栏（借助CollapsingToolbarLayout基于Toolbar的布局） CollapsingToolbarLayout被限定作为AppBarLayout的子布局来使用 首先实现标题栏123456789&lt;android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto"//定义命名空间 android:layout_width="match_parent" android:layout_height="match_parent" android:fitsSystemWindows="true"&gt;&lt;/android.support.design.widget.CoordinatorLayout&gt; 套入 AppBarLayout123456789101112131415&lt;android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent" android:fitsSystemWindows="true"&gt; &lt;android.support.design.widget.AppBarLayout android:id="@+id/appBar" android:layout_width="match_parent" android:layout_height="250dp" android:fitsSystemWindows="true"&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt; 再套入CollapsingToolbarLayout1234567891011121314151617181920212223242526&lt;android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent" android:fitsSystemWindows="true"&gt; &lt;android.support.design.widget.AppBarLayout android:id="@+id/appBar" android:layout_width="match_parent" android:layout_height="250dp" android:fitsSystemWindows="true"&gt; &lt;android.support.design.widget.CollapsingToolbarLayout android:id="@+id/collapsing_toolbar" android:layout_width="match_parent" android:layout_height="match_parent" android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar" android:fitsSystemWindows="true" app:contentScrim="?attr/colorPrimary" app:layout_scrollFlags="scroll|exitUntilCollapsed"&gt; &lt;/android.support.design.widget.CollapsingToolbarLayout&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt; 在CollapsingToolbarLayout定义标题栏的内容12345678910111213141516171819202122232425262728293031323334353637383940&lt;android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent" android:fitsSystemWindows="true"&gt; &lt;android.support.design.widget.AppBarLayout android:id="@+id/appBar" android:layout_width="match_parent" android:layout_height="250dp" android:fitsSystemWindows="true"&gt; &lt;android.support.design.widget.CollapsingToolbarLayout android:id="@+id/collapsing_toolbar" android:layout_width="match_parent" android:layout_height="match_parent" android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar" android:fitsSystemWindows="true" app:contentScrim="?attr/colorPrimary" app:layout_scrollFlags="scroll|exitUntilCollapsed"&gt; &lt;ImageView android:id="@+id/fruit_image_view" android:layout_width="match_parent" android:layout_height="match_parent" android:scaleType="centerCrop"//指定折叠模式 android:fitsSystemWindows="true" app:layout_collapseMode="parallax" /&gt;//在折叠过程中产生错位偏移 &lt;android.support.v7.widget.Toolbar android:id="@+id/toolbar" android:layout_width="match_parent" android:layout_height="?attr/actionBarSize" app:layout_collapseMode="pin" /&gt; &lt;/android.support.design.widget.CollapsingToolbarLayout&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt; 水果的标题栏界面完成 编写水果内容详情(NestedScrollView滚动)只能放一个字布局activity_fruit.xml123456789101112131415161718192021222324&lt;android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent" android:fitsSystemWindows="true"&gt; &lt;android.support.design.widget.AppBarLayout android:id="@+id/appBar" android:layout_width="match_parent" android:layout_height="250dp" android:fitsSystemWindows="true"&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;android.support.v4.widget.NestedScrollView android:layout_width="match_parent" android:layout_height="match_parent" app:layout_behavior="@string/appbar_scrolling_view_behavior"&gt; &lt;/android.support.v4.widget.NestedScrollView&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt; 套入布局123456789101112131415161718192021222324252627&lt;android.support.v4.widget.NestedScrollViewandroid:layout_width="match_parent"android:layout_height="match_parent"app:layout_behavior="@string/appbar_scrolling_view_behavior"&gt;&lt;LinearLayout android:orientation="vertical" android:layout_width="match_parent" android:layout_height="wrap_content"&gt; &lt;android.support.v7.widget.CardView android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_marginBottom="15dp" android:layout_marginLeft="15dp" android:layout_marginRight="15dp" android:layout_marginTop="35dp" app:cardCornerRadius="4dp"&gt; &lt;TextView android:id="@+id/fruit_content_text" android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_margin="10dp" /&gt; &lt;/android.support.v7.widget.CardView&gt; &lt;/LinearLayout&gt;&lt;/android.support.v4.widget.NestedScrollView&gt; 添加悬浮按钮 &lt;android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent" android:fitsSystemWindows="true"&gt; &lt;android.support.design.widget.FloatingActionButton android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_margin="16dp" android:src="@drawable/ic_comment" app:layout_anchor="@id/appBar" app:layout_anchorGravity="bottom|end" /&gt; &lt;/android.support.v4.widget.NestedScrollView&gt;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[materialtest3(最佳UI体验)]]></title>
    <url>%2F2017%2F08%2F10%2FMaterialtest3%2F</url>
    <content type="text"><![CDATA[学习目的：1.悬浮按钮（FloatingAcgtionButton有投影）和可交互提示(Snackbar更先进的提示工具) FloatingAcgtionButton(Design support的一个控件) 12345678&lt;android.support.design.widget.FloatingActionButton android:id="@+id/fab" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="bottom|end" android:layout_margin="16dp" android:src="@drawable/ic_done" app：elevation="8dp" /&gt;//指定悬浮高度 高度越大投影效果小 FloatingActionButton的点击事件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab); fab.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Toast.makeText(MainActivity.this, "Data restored", Toast.LENGTH_SHORT).show(); &#125; &#125;);``` Snackbar更先进的提示工具（Design support）(用户接到提示可以进行（按钮形式）逻辑操作 toast不行)```javaFloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab); fab.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Snackbar.make(view, "Data deleted", Snackbar.LENGTH_SHORT) .setAction("Undo", new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Toast.makeText(MainActivity.this, "Data restored", Toast.LENGTH_SHORT).show(); &#125; &#125;) .show(); &#125; &#125;);``` 如此提示会遮挡FloatingActionButton解决方法Coordinatorlayout(将FrameLayout替换成Coordinatorlayoutactivity_main```xml&lt;android.support.design.widget.CoordinatorLayout android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;android.support.design.widget.AppBarLayout android:layout_width="match_parent" android:layout_height="wrap_content"&gt; &lt;android.support.v7.widget.Toolbar android:id="@+id/toolbar" android:layout_width="match_parent" android:layout_height="?attr/actionBarSize" android:background="?attr/colorPrimary" android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar" app:popupTheme="@style/ThemeOverlay.AppCompat.Light" app:layout_scrollFlags="scroll|enterAlways|snap" /&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;android.support.v4.widget.SwipeRefreshLayout android:id="@+id/swipe_refresh" android:layout_width="match_parent" android:layout_height="match_parent" app:layout_behavior="@string/appbar_scrolling_view_behavior"&gt; &lt;android.support.v7.widget.RecyclerView android:id="@+id/recycler_view" android:layout_width="match_parent" android:layout_height="match_parent" /&gt; &lt;/android.support.v4.widget.SwipeRefreshLayout&gt; &lt;android.support.design.widget.FloatingActionButton android:id="@+id/fab" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="bottom|end" android:layout_margin="16dp" android:src="@drawable/ic_done" /&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[materialtest4(最佳UI体验)]]></title>
    <url>%2F2017%2F08%2F10%2FMaterialtest4%2F</url>
    <content type="text"><![CDATA[学习目的：2.卡片式布局（CardView）实际上也是一个FrameLayout 2.卡片式布局（CardView）实际上也是一个FrameLayout添加依赖123compile 'com.android.support:recyclerview-v7:24.2.1' compile 'com.android.support:cardview-v7:24.2.1' compile 'com.github.bumptech.glide:glide:3.7.0'//glide是超级强大的图片加载库 activity_main1234&lt;android.support.v7.widget.RecyclerView android:id="@+id/recycler_view" android:layout_width="match_parent" android:layout_height="match_parent" /&gt; Fruit类123456789101112131415161718public class Fruit &#123; private String name; private int imageId; public Fruit(String name, int imageId) &#123; this.name = name; this.imageId = imageId; &#125; public String getName() &#123; return name; &#125; public int getImageId() &#123; return imageId; &#125; fruit_item.xml123456789101112131415161718192021222324252627282930&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;android.support.v7.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_margin="5dp" app:cardCornerRadius="4dp"&gt; &lt;LinearLayout android:orientation="vertical" android:layout_width="match_parent" android:layout_height="wrap_content"&gt; &lt;ImageView android:id="@+id/fruit_image" android:layout_width="match_parent" android:layout_height="100dp" android:scaleType="centerCrop" /&gt; &lt;TextView android:id="@+id/fruit_name" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="center_horizontal" android:layout_margin="5dp" android:textSize="16sp" /&gt; &lt;/LinearLayout&gt;&lt;/android.support.v7.widget.CardView&gt; 适配器RecyclerView.Adapter 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186ublic class FruitAdapter extends RecyclerView.Adapter&lt;FruitAdapter.ViewHolder&gt;&#123; private static final String TAG = "FruitAdapter"; private Context mContext; private List&lt;Fruit&gt; mFruitList; static class ViewHolder extends RecyclerView.ViewHolder &#123; CardView cardView; ImageView fruitImage; TextView fruitName; public ViewHolder(View view) &#123; super(view); cardView = (CardView) view; fruitImage = (ImageView) view.findViewById(R.id.fruit_image); fruitName = (TextView) view.findViewById(R.id.fruit_name); &#125; &#125; public FruitAdapter(List&lt;Fruit&gt; fruitList) &#123; mFruitList = fruitList; &#125; @Override public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; if (mContext == null) &#123; mContext = parent.getContext(); &#125; View view = LayoutInflater.from(mContext).inflate(R.layout.fruit_item, parent, false); final ViewHolder holder = new ViewHolder(view); holder.cardView.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; int position = holder.getAdapterPosition(); Fruit fruit = mFruitList.get(position); Intent intent = new Intent(mContext, FruitActivity.class); intent.putExtra(FruitActivity.FRUIT_NAME, fruit.getName()); intent.putExtra(FruitActivity.FRUIT_IMAGE_ID, fruit.getImageId()); mContext.startActivity(intent); &#125; &#125;); return holder; &#125; @Override public void onBindViewHolder(ViewHolder holder, int position) &#123; Fruit fruit = mFruitList.get(position); holder.fruitName.setText(fruit.getName()); Glide.with(mContext).load(fruit.getImageId()).into(holder.fruitImage); &#125; @Override public int getItemCount() &#123; return mFruitList.size(); &#125;&#125;``` MainActivity```javapublic class MainActivity extends AppCompatActivity &#123; private DrawerLayout mDrawerLayout; private Fruit[] fruits = &#123;new Fruit("Apple", R.drawable.apple), new Fruit("Banana", R.drawable.banana), new Fruit("Orange", R.drawable.orange), new Fruit("Watermelon", R.drawable.watermelon), new Fruit("Pear", R.drawable.pear), new Fruit("Grape", R.drawable.grape), new Fruit("Pineapple", R.drawable.pineapple), new Fruit("Strawberry", R.drawable.strawberry), new Fruit("Cherry", R.drawable.cherry), new Fruit("Mango", R.drawable.mango)&#125;; private List&lt;Fruit&gt; fruitList = new ArrayList&lt;&gt;(); private FruitAdapter adapter; private SwipeRefreshLayout swipeRefresh; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout); NavigationView navView = (NavigationView) findViewById(R.id.nav_view); ActionBar actionBar = getSupportActionBar(); if (actionBar != null) &#123; actionBar.setDisplayHomeAsUpEnabled(true); actionBar.setHomeAsUpIndicator(R.drawable.ic_menu); &#125; navView.setCheckedItem(R.id.nav_call); navView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() &#123; @Override public boolean onNavigationItemSelected(MenuItem item) &#123; mDrawerLayout.closeDrawers(); return true; &#125; &#125;); FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab); fab.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; Snackbar.make(view, "Data deleted", Snackbar.LENGTH_SHORT) .setAction("Undo", new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Toast.makeText(MainActivity.this, "Data restored", Toast.LENGTH_SHORT).show(); &#125; &#125;) .show(); &#125; &#125;); initFruits(); RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view); GridLayoutManager layoutManager = new GridLayoutManager(this, 2); recyclerView.setLayoutManager(layoutManager); adapter = new FruitAdapter(fruitList); recyclerView.setAdapter(adapter); swipeRefresh = (SwipeRefreshLayout) findViewById(R.id.swipe_refresh); swipeRefresh.setColorSchemeResources(R.color.colorPrimary); swipeRefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() &#123; @Override public void onRefresh() &#123; refreshFruits(); &#125; &#125;); &#125; private void refreshFruits() &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; runOnUiThread(new Runnable() &#123; @Override public void run() &#123; initFruits(); adapter.notifyDataSetChanged(); swipeRefresh.setRefreshing(false); &#125; &#125;); &#125; &#125;).start(); &#125; private void initFruits() &#123; fruitList.clear(); for (int i = 0; i &lt; 50; i++) &#123; Random random = new Random(); int index = random.nextInt(fruits.length); fruitList.add(fruits[index]); &#125; &#125; public boolean onCreateOptionsMenu(Menu menu) &#123; getMenuInflater().inflate(R.menu.toolbar, menu); return true; &#125; @Override public boolean onOptionsItemSelected(MenuItem item) &#123; switch (item.getItemId()) &#123; case android.R.id.home: mDrawerLayout.openDrawer(GravityCompat.START); break; case R.id.backup: Toast.makeText(this, "You clicked Backup", Toast.LENGTH_SHORT).show(); break; case R.id.delete: Toast.makeText(this, "You clicked Delete", Toast.LENGTH_SHORT).show(); break; case R.id.settings: Toast.makeText(this, "You clicked Settings", Toast.LENGTH_SHORT).show(); break; default: &#125; return true; &#125;&#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[materialtest2(最佳UI体验)]]></title>
    <url>%2F2017%2F08%2F09%2FMaterialtest2%2F</url>
    <content type="text"><![CDATA[学习目的：1.NavigationView 2.nav_head.xml(放置头像 邮箱 用户名) 3.使用NavigationView 1.NavigationView 添加依赖12345678910111213141516171819202122232425262728293031compile 'com.android.support:design:24.2.1'//Design supprot compile 'de.hdodenhof:circleimageview:2.1.0'//开源项目 轻松实现图片圆形化``` 在menu下创建nav_menu.xml```java?xml version="1.0" encoding="utf-8"?&gt;&lt;menu xmlns:android="http://schemas.android.com/apk/res/android"&gt; &lt;group android:checkableBehavior="single"&gt; &lt;item android:id="@+id/nav_call" android:icon="@drawable/nav_call" android:title="Call" /&gt; &lt;item android:id="@+id/nav_friends" android:icon="@drawable/nav_friends" android:title="Friends" /&gt; &lt;item android:id="@+id/nav_location" android:icon="@drawable/nav_location" android:title="Location" /&gt; &lt;item android:id="@+id/nav_mail" android:icon="@drawable/nav_mail" android:title="Mail" /&gt; &lt;item android:id="@+id/nav_task" android:icon="@drawable/nav_task" android:title="Tasks" /&gt; &lt;/group&gt;&lt;/menu&gt; 3.nav_head.xml(放置头像 邮箱 用户名)123456789101112131415161718192021222324252627282930313233&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="180dp" android:background="?attr/colorPrimary" android:padding="10dp"&gt; &lt;de.hdodenhof.circleimageview.CircleImageView//图片圆形化控件 android:id="@+id/icon_image" android:layout_width="70dp" android:layout_height="70dp" android:layout_centerInParent="true" android:src="@drawable/nav_icon" /&gt; &lt;TextView android:id="@+id/username" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_alignParentBottom="true" android:text="tonygreendev@gmail.com" android:textColor="#FFF" android:textSize="14sp" /&gt; &lt;TextView android:id="@+id/mail" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_above="@id/username" android:text="Tony Green" android:textColor="#FFF" android:textSize="14sp" /&gt;&lt;/RelativeLayout&gt; 使用NavigationViewactivity_maind的TextView替换成1234567&lt;android.support.design.widget.NavigationView android:id="@+id/nav_view" android:layout_width="match_parent" android:layout_height="match_parent" android:layout_gravity="start" app:headerLayout="@layout/nav_header" app:menu="@menu/nav_menu" /&gt; 设置点击事件123456789101112131415161718192021222324252627public class MainActivity extends AppCompatActivity &#123; private DrawerLayout mDrawerLayout; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout); NavigationView navView = (NavigationView) findViewById(R.id.nav_view); ActionBar actionBar = getSupportActionBar(); if (actionBar != null) &#123; actionBar.setDisplayHomeAsUpEnabled(true); actionBar.setHomeAsUpIndicator(R.drawable.ic_menu); &#125; navView.setCheckedItem(R.id.nav_call); navView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() &#123; @Override public boolean onNavigationItemSelected(MenuItem item) &#123; mDrawerLayout.closeDrawers(); return true; &#125; &#125;); &#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[materialtest(最佳UI体验)]]></title>
    <url>%2F2017%2F08%2F08%2FMaterialtest%2F</url>
    <content type="text"><![CDATA[学习目的：1.什么是Materrial Design 2.Toolbar与Actionbar（已淘汰） (Materrial控件) 3.app命名空间 1.什么是Materrial Design:Google推出的全新界面语言 2.Toolbar与Actionbar（已淘汰） (Materrial控件)1android:theme="@style/AppTheme"&gt; res/values/styles.xml12345678910&lt;style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar"&gt;//默认使用Actionbar &lt;!-- Customize your theme here. --&gt; &lt;item name="colorPrimary"&gt;@color/colorPrimary&lt;/item&gt; &lt;item name="colorPrimaryDark"&gt;@color/colorPrimaryDark&lt;/item&gt; &lt;item name="colorAccent"&gt;@color/colorAccent&lt;/item&gt; &lt;/style&gt;``` 禁用Actionbar```javaname="AppTheme" parent="Theme.AppCompat.Light.NoActionBar 用Toolbar替代Actionbar12345678&lt;android.support.v7.widget.Toolbar android:id="@+id/toolbar" android:layout_width="match_parent" android:layout_height="?attr/actionBarSize" android:background="?attr/colorPrimary" android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar" app:popupTheme="@style/ThemeOverlay.AppCompat.Light" app:layout_scrollFlags="scroll|enterAlways|snap" /&gt; 3.创建mene文件夹 新建toolbar.xml12345678910111213141516171819&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;menu xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto"&gt; &lt;item android:id="@+id/backup" android:icon="@drawable/ic_backup" android:title="Backup" app:showAsAction="always"/&gt; &lt;item android:id="@+id/delete" android:icon="@drawable/ic_delete" android:title="Delete" app:showAsAction="ifRoom"/&gt; &lt;item android:id="@+id/settings" android:icon="@drawable/ic_settings" android:title="Settings" app:showAsAction="never"/&gt;&lt;/menu&gt; app:showAsAction指定显示位置 never永远在菜单栏 ifRoom屏幕空间足够则显示在Toolbar中 always永远显示在Toolbar中 4.滑动菜单DrawerLayout(一种布局：能放两个直接子控件 一个子控件显示主屏幕内容 另一个子控件是滑动菜单显示内容)activity_main123456789101112131415161718192021222324252627282930&lt;android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:id="@+id/drawer_layout" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;FrameLayout android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;android.support.v7.widget.Toolbar android:id="@+id/toolbar" android:layout_width="match_parent" android:layout_height="?attr/actionBarSize" android:background="?attr/colorPrimary" android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar" app:popupTheme="@style/ThemeOverlay.AppCompat.Light" app:layout_scrollFlags="scroll|enterAlways|snap" /&gt; &lt;/FrameLayout&gt; &lt;TextView android:layout_width="match_parent" android:layout_height="match_parent" android:layout_gravity="start" android:text="This is name" android:testSize="30sp" android:background="#FFF"/&gt;&lt;/android.support.v4.widget.DrawerLayout&gt; 防止用户不知道左边可以滑动（设置导航栏）MainActivity12345678910111213141516171819202122232425262728293031323334public class MainActivity extends AppCompatActivity &#123; private DrawerLayout mDrawerLayout; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout); NavigationView navView = (NavigationView) findViewById(R.id.nav_view); ActionBar actionBar = getSupportActionBar(); if (actionBar != null) &#123; actionBar.setDisplayHomeAsUpEnabled(true); actionBar.setHomeAsUpIndicator(R.drawable.ic_menu); &#125; &#125;//... @Override public boolean onOptionsItemSelected(MenuItem item) &#123; switch (item.getItemId()) &#123; case android.R.id.home: mDrawerLayout.openDrawer(GravityCompat.START); break; //... default: &#125; return true; &#125;&#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lbstest2]]></title>
    <url>%2F2017%2F08%2F07%2FLbstest2%2F</url>
    <content type="text"><![CDATA[androidMainifest12345678910111213141516171819202122232425262728293031323334&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.lbstest"&gt; &lt;uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/&gt; &lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/&gt; &lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/&gt; &lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/&gt; &lt;uses-permission android:name="android.permission.CHANGE_WIFI_STATE"/&gt; &lt;uses-permission android:name="android.permission.READ_PHONE_STATE"/&gt; &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/&gt; &lt;uses-permission android:name="android.permission.INTERNET"/&gt; &lt;uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/&gt; &lt;uses-permission android:name="android.permission.WAKE_LOCK"/&gt; &lt;application android:allowBackup="true" android:icon="@mipmap/ic_launcher" android:label="@string/app_name" android:supportsRtl="true" android:theme="@style/AppTheme"&gt; &lt;meta-data android:name="com.baidu.lbsapi.API_KEY" android:value="i6VD2fHKM3msMfZtIOXAhFSzDiYGFIwL" /&gt; &lt;activity android:name=".MainActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.MAIN" /&gt; &lt;category android:name="android.intent.category.LAUNCHER" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;service android:name="com.baidu.location.f" android:enabled="true" android:process=":remote"&gt; &lt;/service&gt; &lt;/application&gt;&lt;/manifest&gt; MainActivity123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141public class MainActivity extends AppCompatActivity &#123; public LocationClient mLocationClient; private TextView positionText; private MapView mapView; private BaiduMap baiduMap; private boolean isFirstLocate = true; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); mLocationClient = new LocationClient(getApplicationContext()); mLocationClient.registerLocationListener(new MyLocationListener()); SDKInitializer.initialize(getApplicationContext()); setContentView(R.layout.activity_main); mapView = (MapView) findViewById(R.id.bmapView); baiduMap = mapView.getMap(); baiduMap.setMyLocationEnabled(true); positionText = (TextView) findViewById(R.id.position_text_view); List&lt;String&gt; permissionList = new ArrayList&lt;&gt;(); if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) &#123; permissionList.add(Manifest.permission.ACCESS_FINE_LOCATION); &#125; if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) &#123; permissionList.add(Manifest.permission.READ_PHONE_STATE); &#125; if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123; permissionList.add(Manifest.permission.WRITE_EXTERNAL_STORAGE); &#125; if (!permissionList.isEmpty()) &#123; String [] permissions = permissionList.toArray(new String[permissionList.size()]); ActivityCompat.requestPermissions(MainActivity.this, permissions, 1); &#125; else &#123; requestLocation(); &#125; &#125; private void navigateTo(BDLocation location) &#123; if (isFirstLocate) &#123; Toast.makeText(this, "nav to " + location.getAddrStr(), Toast.LENGTH_SHORT).show(); LatLng ll = new LatLng(location.getLatitude(), location.getLongitude()); MapStatusUpdate update = MapStatusUpdateFactory.newLatLng(ll); baiduMap.animateMapStatus(update); update = MapStatusUpdateFactory.zoomTo(16f); baiduMap.animateMapStatus(update); isFirstLocate = false; &#125; MyLocationData.Builder locationBuilder = new MyLocationData. Builder(); locationBuilder.latitude(location.getLatitude()); locationBuilder.longitude(location.getLongitude()); MyLocationData locationData = locationBuilder.build(); baiduMap.setMyLocationData(locationData); &#125; private void requestLocation() &#123; initLocation(); mLocationClient.start(); &#125; private void initLocation()&#123; LocationClientOption option = new LocationClientOption(); option.setScanSpan(5000); option.setIsNeedAddress(true); mLocationClient.setLocOption(option); &#125; @Override protected void onResume() &#123; super.onResume(); mapView.onResume(); &#125; @Override protected void onPause() &#123; super.onPause(); mapView.onPause(); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); mLocationClient.stop(); mapView.onDestroy(); baiduMap.setMyLocationEnabled(false); &#125; @Override public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123; switch (requestCode) &#123; case 1: if (grantResults.length &gt; 0) &#123; for (int result : grantResults) &#123; if (result != PackageManager.PERMISSION_GRANTED) &#123; Toast.makeText(this, "必须同意所有权限才能使用本程序", Toast.LENGTH_SHORT).show(); finish(); return; &#125; &#125; requestLocation(); &#125; else &#123; Toast.makeText(this, "发生未知错误", Toast.LENGTH_SHORT).show(); finish(); &#125; break; default: &#125; &#125; public class MyLocationListener implements BDLocationListener &#123; @Override public void onReceiveLocation(BDLocation location) &#123;// StringBuilder currentPosition = new StringBuilder();// currentPosition.append("纬度：").append(location.getLatitude()).append("\n");// currentPosition.append("经线：").append(location.getLongitude()).append("\n");// currentPosition.append("国家：").append(location.getCountry()).append("\n");// currentPosition.append("省：").append(location.getProvince()).append("\n");// currentPosition.append("市：").append(location.getCity()).append("\n");// currentPosition.append("区：").append(location.getDistrict()).append("\n");// currentPosition.append("街道：").append(location.getStreet()).append("\n");// currentPosition.append("定位方式：");// if (location.getLocType() == BDLocation.TypeGpsLocation) &#123;// currentPosition.append("GPS");// &#125; else if (location.getLocType() == BDLocation.TypeNetWorkLocation) &#123;// currentPosition.append("网络");// &#125;// positionText.setText(currentPosition); if (location.getLocType() == BDLocation.TypeGpsLocation || location.getLocType() == BDLocation.TypeNetWorkLocation) &#123; navigateTo(location); &#125; &#125; &#125;&#125; 布局123456789101112131415161718&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="match_parent" android:layout_height="match_parent" &gt; &lt;TextView android:id="@+id/position_text_view" android:layout_width="wrap_content" android:layout_height="wrap_content" android:visibility="gone" /&gt; &lt;com.baidu.mapapi.map.MapView android:id="@+id/bmapView" android:layout_width="match_parent" android:layout_height="match_parent" android:clickable="true" /&gt;&lt;/LinearLayout&gt;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lbstest]]></title>
    <url>%2F2017%2F08%2F07%2FLbstest%2F</url>
    <content type="text"><![CDATA[学习目的：1.LBS(基于位置的服务)确定用户位置的两种方式（GPS 网络定位(手机与各基站的距离算出位置)） http://developer.baidu.com/user/reg（申请成为百度开发者） 申请APIkey http://lbsyun.baidu.com/apiconsole/key 使用百度定位 准备LBS SDK http://lbsyun.baidu.com/sdk/download androidMainifest.xml12345678910111213141516171819202122232425262728293031323334&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.lbstest"&gt; &lt;uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/&gt; &lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/&gt; &lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/&gt; &lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/&gt; &lt;uses-permission android:name="android.permission.CHANGE_WIFI_STATE"/&gt; &lt;uses-permission android:name="android.permission.READ_PHONE_STATE"/&gt; &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/&gt; &lt;uses-permission android:name="android.permission.INTERNET"/&gt; &lt;uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/&gt; &lt;uses-permission android:name="android.permission.WAKE_LOCK"/&gt; &lt;application android:allowBackup="true" android:icon="@mipmap/ic_launcher" android:label="@string/app_name" android:supportsRtl="true" android:theme="@style/AppTheme"&gt; &lt;meta-data android:name="com.baidu.lbsapi.API_KEY" android:value="i6VD2fHKM3msMfZtIOXAhFSzDiYGFIwL" /&gt; &lt;activity android:name=".MainActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.MAIN" /&gt; &lt;category android:name="android.intent.category.LAUNCHER" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;service android:name="com.baidu.location.f" android:enabled="true" android:process=":remote"&gt; &lt;/service&gt; &lt;/application&gt;&lt;/manifest&gt; MainActivity1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283public class MainActivity extends AppCompatActivity &#123; public LocationClient mLocationClient; private TextView positionText; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); mLocationClient = new LocationClient(getApplicationContext());//LocationClient实例创建Context参数 mLocationClient.registerLocationListener(new MyLocationListener());//注册一个监听器 当获取到位置信息就会回调这个监听器 setContentView(R.layout.activity_main); positionText = (TextView) findViewById(R.id.position_text_view); List&lt;String&gt; permissionList = new ArrayList&lt;&gt;();//创建List集合 没有授权的权限加入到List中 if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) &#123; permissionList.add(Manifest.permission.ACCESS_FINE_LOCATION); &#125; if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) &#123; permissionList.add(Manifest.permission.READ_PHONE_STATE); &#125; if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123; permissionList.add(Manifest.permission.WRITE_EXTERNAL_STORAGE); &#125; if (!permissionList.isEmpty()) &#123; String [] permissions = permissionList.toArray(new String[permissionList.size()]); ActivityCompat.requestPermissions(MainActivity.this, permissions, 1); &#125; else &#123; requestLocation(); &#125; &#125; private void requestLocation() &#123; mLocationClient.start(); &#125; @Override public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123; switch (requestCode) &#123; case 1: if (grantResults.length &gt; 0) &#123; for (int result : grantResults) &#123; if (result != PackageManager.PERMISSION_GRANTED) &#123; Toast.makeText(this, "必须同意所有权限才能使用本程序", Toast.LENGTH_SHORT).show(); finish(); return; &#125; &#125; requestLocation(); &#125; else &#123; Toast.makeText(this, "发生未知错误", Toast.LENGTH_SHORT).show(); finish(); &#125; break; default: &#125; &#125; public class MyLocationListener implements BDLocationListener &#123; @Override public void onReceiveLocation(BDLocation location) &#123; StringBuilder currentPosition = new StringBuilder(); currentPosition.append("定位方式："); if (location.getLocType() == BDLocation.TypeGpsLocation) &#123; currentPosition.append("GPS"); &#125; else if (location.getLocType() == BDLocation.TypeNetWorkLocation) &#123; currentPosition.append("网络"); &#125; positionText.setText(currentPosition); &#125; &#125;&#125; 问题:LocationClient的start()只会定位一次 快速移动定位需要LBS SDK提供的方法MainActivity中添加12345678910111213141516171819private void requestLocation() &#123; initLocation(); mLocationClient.start(); &#125; private void initLocation()&#123; LocationClientOption option = new LocationClientOption();//更新的间隔 option.setScanSpan(5000); mLocationClient.setLocOption(option); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); mLocationClient.stop();//停止定位 &#125; 强制指定GPS进行定位123456private void initLocation()&#123; LocationClientOption option = new LocationClientOption(); option.setLocationMode(LocationClientOption.LocationMode.Device_Sensors); mLocationClient.setLocOption(option); &#125; 到此，位置信息以文本显示 具体化位置信息12345678910111213141516171819202122232425262728293031323334private void initLocation()&#123; LocationClientOption option = new LocationClientOption(); option.setScanSpan(5000); option.setIsNeedAddress(true); mLocationClient.setLocOption(option); &#125; public class MyLocationListener implements BDLocationListener &#123; @Override public void onReceiveLocation(BDLocation location) &#123; StringBuilder currentPosition = new StringBuilder(); currentPosition.append("纬度：").append(location.getLatitude()).append("\n"); currentPosition.append("经线：").append(location.getLongitude()).append("\n"); currentPosition.append("国家：").append(location.getCountry()).append("\n"); currentPosition.append("省：").append(location.getProvince()).append("\n"); currentPosition.append("市：").append(location.getCity()).append("\n"); currentPosition.append("区：").append(location.getDistrict()).append("\n"); currentPosition.append("街道：").append(location.getStreet()).append("\n"); currentPosition.append("定位方式："); if (location.getLocType() == BDLocation.TypeGpsLocation) &#123; currentPosition.append("GPS"); &#125; else if (location.getLocType() == BDLocation.TypeNetWorkLocation) &#123; currentPosition.append("网络"); &#125; positionText.setText(currentPosition); if (location.getLocType() == BDLocation.TypeGpsLocation || location.getLocType() == BDLocation.TypeNetWorkLocation) &#123; navigateTo(location); &#125; &#125; &#125; 到此，位置信息以文本显示 使用百度地图(显示地图)1234567891011&lt;TextView android:id="@+id/position_text_view" android:layout_width="wrap_content" android:layout_height="wrap_content" android:visibility="gone" /&gt; &lt;com.baidu.mapapi.map.MapView android:id="@+id/bmapView" android:layout_width="match_parent" android:layout_height="match_parent" android:clickable="true" /&gt; 修改MainActivity123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175public class MainActivity extends AppCompatActivity &#123; private MapView mapView; //... @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); mLocationClient = new LocationClient(getApplicationContext()); mLocationClient.registerLocationListener(new MyLocationListener()); SDKInitializer.initialize(getApplicationContext()); setContentView(R.layout.activity_main); mapView = (MapView) findViewById(R.id.bmapView); //... &#125; //... @Override protected void onResume() &#123; super.onResume(); mapView.onResume(); &#125; @Override protected void onPause() &#123; super.onPause(); mapView.onPause(); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); mLocationClient.stop(); mapView.onDestroy(); baiduMap.setMyLocationEnabled(false); &#125; //...&#125;``` 移动到我的位置(BaiduMap类 地图的总控制器)```javapublic class MainActivity extends AppCompatActivity &#123; public LocationClient mLocationClient; private TextView positionText; private MapView mapView; private BaiduMap baiduMap; private boolean isFirstLocate = true; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); mLocationClient = new LocationClient(getApplicationContext()); mLocationClient.registerLocationListener(new MyLocationListener()); SDKInitializer.initialize(getApplicationContext()); setContentView(R.layout.activity_main); mapView = (MapView) findViewById(R.id.bmapView); baiduMap = mapView.getMap(); baiduMap.setMyLocationEnabled(true); positionText = (TextView) findViewById(R.id.position_text_view); List&lt;String&gt; permissionList = new ArrayList&lt;&gt;(); if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) &#123; permissionList.add(Manifest.permission.ACCESS_FINE_LOCATION); &#125; if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) &#123; permissionList.add(Manifest.permission.READ_PHONE_STATE); &#125; if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123; permissionList.add(Manifest.permission.WRITE_EXTERNAL_STORAGE); &#125; if (!permissionList.isEmpty()) &#123; String [] permissions = permissionList.toArray(new String[permissionList.size()]); ActivityCompat.requestPermissions(MainActivity.this, permissions, 1); &#125; else &#123; requestLocation(); &#125; &#125; private void navigateTo(BDLocation location) &#123; if (isFirstLocate) &#123; Toast.makeText(this, "nav to " + location.getAddrStr(), Toast.LENGTH_SHORT).show(); LatLng ll = new LatLng(location.getLatitude(), location.getLongitude()); MapStatusUpdate update = MapStatusUpdateFactory.newLatLng(ll); baiduMap.animateMapStatus(update); update = MapStatusUpdateFactory.zoomTo(16f); baiduMap.animateMapStatus(update); isFirstLocate = false; &#125; MyLocationData.Builder locationBuilder = new MyLocationData. Builder(); locationBuilder.latitude(location.getLatitude()); locationBuilder.longitude(location.getLongitude()); MyLocationData locationData = locationBuilder.build(); baiduMap.setMyLocationData(locationData); &#125; private void requestLocation() &#123; initLocation(); mLocationClient.start(); &#125; private void initLocation()&#123; LocationClientOption option = new LocationClientOption(); option.setScanSpan(5000); option.setIsNeedAddress(true); mLocationClient.setLocOption(option); &#125; @Override protected void onResume() &#123; super.onResume(); mapView.onResume(); &#125; @Override protected void onPause() &#123; super.onPause(); mapView.onPause(); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); mLocationClient.stop(); mapView.onDestroy(); baiduMap.setMyLocationEnabled(false); &#125; @Override public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123; switch (requestCode) &#123; case 1: if (grantResults.length &gt; 0) &#123; for (int result : grantResults) &#123; if (result != PackageManager.PERMISSION_GRANTED) &#123; Toast.makeText(this, "必须同意所有权限才能使用本程序", Toast.LENGTH_SHORT).show(); finish(); return; &#125; &#125; requestLocation(); &#125; else &#123; Toast.makeText(this, "发生未知错误", Toast.LENGTH_SHORT).show(); finish(); &#125; break; default: &#125; &#125; public class MyLocationListener implements BDLocationListener &#123; @Override public void onReceiveLocation(BDLocation location) &#123; if (location.getLocType() == BDLocation.TypeGpsLocation || location.getLocType() == BDLocation.TypeNetWorkLocation) &#123; navigateTo(location); &#125; &#125; &#125;&#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[servicebesttest]]></title>
    <url>%2F2017%2F08%2F04%2FServicebestpractice%2F</url>
    <content type="text"><![CDATA[学习目的：1.完整版下载示例 （@verride表示重写方法 无则是新建方法） 添加依赖1compile 'com.squareup.okhttp3:okhttp:3.4.1' 定义一个回调接口（对下载过程中的各种状态进行监听和回调）DownloadListenter12345678910111213public interface DownloadListener &#123; void onProgress(int progress); void onSuccess(); void onFailed(); void onPaused(); void onCanceled();&#125; AsynsTask实现下载功能123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142//三个参数 传入数据 进度显示数据单位 反馈执行结果数据类型public class DownloadTask extends AsyncTask&lt;String, Integer, Integer&gt; &#123; public static final int TYPE_SUCCESS = 0; public static final int TYPE_FAILED = 1; public static final int TYPE_PAUSED = 2; public static final int TYPE_CANCELED = 3; private DownloadListener listener; private boolean isCanceled = false; private boolean isPaused = false; private int lastProgress; public DownloadTask(DownloadListener listener) &#123; this.listener = listener; &#125; //下载逻辑 @Override protected Integer doInBackground(String... params) &#123; InputStream is = null; RandomAccessFile savedFile = null; File file = null; try &#123; long downloadedLength = 0; // 记录已下载的文件长度 String downloadUrl = params[0]; String fileName = downloadUrl.substring(downloadUrl.lastIndexOf("/")); String directory = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath(); file = new File(directory + fileName); if (file.exists()) &#123; downloadedLength = file.length(); &#125; long contentLength = getContentLength(downloadUrl); if (contentLength == 0) &#123; return TYPE_FAILED; &#125; else if (contentLength == downloadedLength) &#123; // 已下载字节和文件总字节相等，说明已经下载完成了 return TYPE_SUCCESS; &#125; OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder() // 断点下载，指定从哪个字节开始下载 .addHeader("RANGE", "bytes=" + downloadedLength + "-") .url(downloadUrl) .build(); Response response = client.newCall(request).execute(); if (response != null) &#123; is = response.body().byteStream(); savedFile = new RandomAccessFile(file, "rw"); savedFile.seek(downloadedLength); // 跳过已下载的字节 byte[] b = new byte[1024]; int total = 0; int len; while ((len = is.read(b)) != -1) &#123; if (isCanceled) &#123; return TYPE_CANCELED; &#125; else if(isPaused) &#123; return TYPE_PAUSED; &#125; else &#123; total += len; savedFile.write(b, 0, len); // 计算已下载的百分比 int progress = (int) ((total + downloadedLength) * 100 / contentLength); publishProgress(progress); &#125; &#125; response.body().close(); return TYPE_SUCCESS; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; try &#123; if (is != null) &#123; is.close(); &#125; if (savedFile != null) &#123; savedFile.close(); &#125; if (isCanceled &amp;&amp; file != null) &#123; file.delete(); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; return TYPE_FAILED; &#125; //界面显示当前下载进度 @Override protected void onProgressUpdate(Integer... values) &#123; int progress = values[0]; if (progress &gt; lastProgress) &#123; listener.onProgress(progress); lastProgress = progress; &#125; &#125; //通知最终下载结果 @Override protected void onPostExecute(Integer status) &#123; switch (status) &#123; case TYPE_SUCCESS: listener.onSuccess(); break; case TYPE_FAILED: listener.onFailed(); break; case TYPE_PAUSED: listener.onPaused(); break; case TYPE_CANCELED: listener.onCanceled(); default: break; &#125; &#125; public void pauseDownload() &#123; isPaused = true; &#125; public void cancelDownload() &#123; isCanceled = true; &#125; //获取下载文件总长度 private long getContentLength(String downloadUrl) throws IOException &#123; OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder() .url(downloadUrl) .build(); Response response = client.newCall(request).execute(); if (response != null &amp;&amp; response.isSuccessful()) &#123; long contentLength = response.body().contentLength(); response.close(); return contentLength; &#125; return 0; &#125; 创建下载服务DownloadService（重写5个方法） DownloadBinder内部类（重写3个方法）两个类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112public class DownloadService extends Service &#123; private DownloadTask downloadTask; private String downloadUrl; private DownloadListener listener = new DownloadListener() &#123; @Override public void onProgress(int progress) &#123; getNotificationManager().notify(1, getNotification("Downloading...", progress)); &#125; @Override public void onSuccess() &#123; downloadTask = null; // 下载成功时将前台服务通知关闭，并创建一个下载成功的通知 stopForeground(true); getNotificationManager().notify(1, getNotification("Download Success", -1)); Toast.makeText(DownloadService.this, "Download Success", Toast.LENGTH_SHORT).show(); &#125; @Override public void onFailed() &#123; downloadTask = null; // 下载失败时将前台服务通知关闭，并创建一个下载失败的通知 stopForeground(true); getNotificationManager().notify(1, getNotification("Download Failed", -1)); Toast.makeText(DownloadService.this, "Download Failed", Toast.LENGTH_SHORT).show(); &#125; @Override public void onPaused() &#123; downloadTask = null; Toast.makeText(DownloadService.this, "Paused", Toast.LENGTH_SHORT).show(); &#125; @Override public void onCanceled() &#123; downloadTask = null; stopForeground(true); Toast.makeText(DownloadService.this, "Canceled", Toast.LENGTH_SHORT).show(); &#125; &#125;; private DownloadBinder mBinder = new DownloadBinder(); @Override public IBinder onBind(Intent intent) &#123; return mBinder; &#125; class DownloadBinder extends Binder &#123; public void startDownload(String url) &#123; if (downloadTask == null) &#123; downloadUrl = url; downloadTask = new DownloadTask(listener); downloadTask.execute(downloadUrl); startForeground(1, getNotification("Downloading...", 0)); Toast.makeText(DownloadService.this, "Downloading...", Toast.LENGTH_SHORT).show(); &#125; &#125; public void pauseDownload() &#123; if (downloadTask != null) &#123; downloadTask.pauseDownload(); &#125; &#125; public void cancelDownload() &#123; if (downloadTask != null) &#123; downloadTask.cancelDownload(); &#125; else &#123; if (downloadUrl != null) &#123; // 取消下载时需将文件删除，并将通知关闭 String fileName = downloadUrl.substring(downloadUrl.lastIndexOf("/")); String directory = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath(); File file = new File(directory + fileName); if (file.exists()) &#123; file.delete(); &#125; getNotificationManager().cancel(1); stopForeground(true); Toast.makeText(DownloadService.this, "Canceled", Toast.LENGTH_SHORT).show(); &#125; &#125; &#125; &#125; private NotificationManager getNotificationManager() &#123; return (NotificationManager) getSystemService(NOTIFICATION_SERVICE); &#125; private Notification getNotification(String title, int progress) &#123; Intent intent = new Intent(this, MainActivity.class); PendingIntent pi = PendingIntent.getActivity(this, 0, intent, 0); NotificationCompat.Builder builder = new NotificationCompat.Builder(this); builder.setSmallIcon(R.mipmap.ic_launcher); builder.setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher)); builder.setContentIntent(pi); builder.setContentTitle(title); if (progress &gt;= 0) &#123; // 当progress大于或等于0时才需显示下载进度 builder.setContentText(progress + "%"); builder.setProgress(100, progress, false); &#125; return builder.build(); &#125;&#125; MainActivity12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576public class MainActivity extends AppCompatActivity implements View.OnClickListener&#123; private DownloadService.DownloadBinder downloadBinder; private ServiceConnection connection = new ServiceConnection() &#123; @Override public void onServiceDisconnected(ComponentName name) &#123; &#125; @Override public void onServiceConnected(ComponentName name, IBinder service) &#123; downloadBinder = (DownloadService.DownloadBinder) service; &#125; &#125;; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button startDownload = (Button) findViewById(R.id.start_download); Button pauseDownload = (Button) findViewById(R.id.pause_download); Button cancelDownload = (Button) findViewById(R.id.cancel_download); startDownload.setOnClickListener(this); pauseDownload.setOnClickListener(this); cancelDownload.setOnClickListener(this); Intent intent = new Intent(this, DownloadService.class); startService(intent); // 启动服务 bindService(intent, connection, BIND_AUTO_CREATE); // 绑定服务 if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123; ActivityCompat.requestPermissions(MainActivity.this, new String[]&#123; Manifest.permission. WRITE_EXTERNAL_STORAGE &#125;, 1); &#125; &#125; @Override public void onClick(View v) &#123; if (downloadBinder == null) &#123; return; &#125; switch (v.getId()) &#123; case R.id.start_download: String url = "https://raw.githubusercontent.com/guolindev/eclipse/master/eclipse-inst-win64.exe"; downloadBinder.startDownload(url); break; case R.id.pause_download: downloadBinder.pauseDownload(); break; case R.id.cancel_download: downloadBinder.cancelDownload(); break; default: break; &#125; &#125; @Override public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123; switch (requestCode) &#123; case 1: if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] != PackageManager.PERMISSION_GRANTED) &#123; Toast.makeText(this, "拒绝权限将无法使用程序", Toast.LENGTH_SHORT).show(); finish(); &#125; break; default: &#125; &#125; @Override protected void onDestroy() &#123; super.onDestroy(); unbindService(connection); &#125;&#125; 权限声明 &lt;service android:name=".DownloadService" android:enabled="true" android:exported="true" /&gt;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[servicetest]]></title>
    <url>%2F2017%2F08%2F04%2FServicetest%2F</url>
    <content type="text"><![CDATA[学习目的：1.定义一个服务(服务都需要注册) 2.启动和停止活动 3.活动与服务进行通信 4.服务的生命周期 5.服务的更多技巧（前台服务，intentService） 1.定义一个服务New-&gt;Service-&gt;Service 以下自动生成的代码123456789public class MyService extends Service &#123; public MyService() &#123; &#125; @Override public IBinder onBind(Intent intent) &#123; throw new UnsupportedOperationException("Not yet implemented"); &#125; 重写Service中的方法123456789101112131415161718@Override public void onCreate() &#123; super.onCreate(); &#125; @Override public int onStartCommand(Intent intent, int flags, int startId) &#123; return super.onStartCommand(intent, flags, startId); &#125; @Override public void onDestroy() &#123; super.onDestroy(); &#125; 注册自动完成123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;application android:allowBackup="true" android:icon="@mipmap/ic_launcher" android:label="@string/app_name" android:supportsRtl="true" android:theme="@style/AppTheme"&gt; &lt;activity android:name=".MainActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.MAIN" /&gt; &lt;category android:name="android.intent.category.LAUNCHER" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;service android:name=".MyService" android:enabled="true" android:exported="true" /&gt; &lt;service android:name=".MyIntentService" /&gt; &lt;/application&gt;``` 2.启动和停止活动```javapublic class MainActivity extends AppCompatActivity implements View.OnClickListener&#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button startService = (Button) findViewById(R.id.start_service); Button stopService = (Button) findViewById(R.id.stop_service); startService.setOnClickListener(this); stopService.setOnClickListener(this); &#125; @Override public void onClick(View v) &#123; switch (v.getId()) &#123; case R.id.start_service: Intent startIntent = new Intent(this, MyService.class); startService(startIntent); // 启动服务 break; case R.id.stop_service: Intent stopIntent = new Intent(this, MyService.class); stopService(stopIntent); // 停止服务 break; &#125; &#125;&#125; 3.活动与服务进行通信（让活动具有下载功能，活动可以随时调用）思路：创建Binder对象对下载功能进行管理MyService1234567891011121314151617181920212223242526272829ublic class MyService extends Service &#123; public MyService() &#123; &#125; private DownloadBinder mBinder = new DownloadBinder(); class DownloadBinder extends Binder &#123; public void startDownload() &#123; Log.d("MyService", "startDownload executed"); &#125; public int getProgress() &#123; Log.d("MyService", "getProgress executed"); return 0; &#125; &#125; @Override public IBinder onBind(Intent intent) &#123; return mBinder; &#125;&#125; 活动与服务绑定``javapublic class MainActivity extends AppCompatActivity implements View.OnClickListener{ private MyService.DownloadBinder downloadBinder; private ServiceConnection connection = new ServiceConnection() { @Override public void onServiceDisconnected(ComponentName name) { } @Override public void onServiceConnected(ComponentName name, IBinder service) { downloadBinder = (MyService.DownloadBinder) service; downloadBinder.startDownload(); downloadBinder.getProgress(); } }; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button bindService = (Button) findViewById(R.id.bind_service); Button unbindService = (Button) findViewById(R.id.unbind_service); bindService.setOnClickListener(this); unbindService.setOnClickListener(this); } @Override public void onClick(View v) { switch (v.getId()) { case R.id.bind_service: Intent bindIntent = new Intent(this, MyService.class); bindService(bindIntent, connection, BIND_AUTO_CREATE); // 绑定服务 break; case R.id.unbind_service: unbindService(connection); // 解绑服务 break; default: break; } } }12345678910111213141516171819202122232425262728294.服务的生命周期```textA started service 被开启的service通过其他组件调用 startService()被创建。 这种service可以无限地运行下去，必须调用stopSelf()方法或者其他组件调用stopService()方法来停止它。 当service被停止时，系统会销毁它。A bound service 被绑定的service是当其他组件（一个客户）调用bindService()来创建的。 客户可以通过一个IBinder接口和service进行通信。 客户可以通过 unbindService()方法来关闭这种连接。 一个service可以同时和多个客户绑定，当多个客户都解除绑定之后，系统会销毁service。 这两条路径并不是完全分开的。 即是说，你可以和一个已经调用了 startService()而被开启的service进行绑定。 比如，一个后台音乐service可能因调用 startService()方法而被开启了，稍后，可能用户想要控制播放器或者得到一些当前歌曲的信息，可以通过bindService()将一个activity和service绑定。这种情况下，stopService()或 stopSelf()实际上并不能停止这个service，除非所有的客户都解除绑定。 5.服务的更多技巧（前台服务，intentService)创建前台服务12345678910111213141516171819202122public class MyService extends Service &#123; public MyService() &#123; &#125; @Override public void onCreate() &#123; super.onCreate(); Log.d("MyService", "onCreate executed"); Intent intent = new Intent(this, MainActivity.class); PendingIntent pi = PendingIntent.getActivity(this, 0, intent, 0); Notification notification = new NotificationCompat.Builder(this) .setContentTitle("This is content title") .setContentText("This is content text") .setWhen(System.currentTimeMillis()) .setSmallIcon(R.mipmap.ic_launcher) .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher)) .setContentIntent(pi) .build(); startForeground(1, notification); &#125;&#125; 显示效果是一条通知，下拉有详细信息 使用intentService(需要用到android多线程)1234567891011121314151617public class MyService extends Service &#123; public MyService() &#123; &#125; @Override public int onStartCommand(Intent intent, int flags, int startId) &#123; new Thread(new Runnable()&#123; @verride public void run()&#123; //处理逻辑 &#125; &#125;).start(); return super.onStartCommand(intent, flags, startId); &#125;&#125; 一旦启动就一直运行 必须调用stopService的stopSelf()方法才能让服务停止1234567new Thread(new Runnable()&#123; @verride public void run()&#123; //处理逻辑 stopSelf(); &#125;&#125;).start(); intentService解决程序员忘开线程 或忘stopSelf()12345678910111213141516171819public class MyIntentService extends IntentService &#123; public MyIntentService() &#123; super("MyIntentService"); // 调用父类的有参构造函数 &#125; @Override protected void onHandleIntent(Intent intent) &#123; // 打印当前线程的id Log.d("MyIntentService", "Thread id is " + Thread.currentThread(). getId()); &#125; @Override public void onDestroy() &#123; super.onDestroy(); Log.d("MyIntentService", "onDestroy executed"); &#125;&#125; MainActivity1234567891011121314151617181920212223242526272829public class MainActivity extends AppCompatActivity implements View.OnClickListener&#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button startIntentService = (Button) findViewById(R.id.start_intent_service); startIntentService.setOnClickListener(this); &#125; @Override public void onClick(View v) &#123; switch (v.getId()) &#123; case R.id.start_intent_service: // 打印主线程的id Log.d("MainActivity", "Thread id is " + Thread.currentThread(). getId()); Intent intentService = new Intent(this, MyIntentService.class); startService(intentService); break; default: break; &#125; &#125;&#125; 注册1&lt;service android:name=".MyIntentService" /&gt;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[networktest2]]></title>
    <url>%2F2017%2F08%2F02%2FNetworktest2%2F</url>
    <content type="text"><![CDATA[1.搭建Apache服务器 搜索Apache http srever 一路next 成功标志 在Apache/htdocs下新建html文件 xml数据格式1234567891011121314151617&lt;apps&gt; &lt;app&gt; &lt;id&gt;1&lt;id&gt; &lt;name&gt;Google Maps&lt;/name&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/app&gt; &lt;app&gt; &lt;id&gt;2&lt;id&gt; &lt;name&gt;Chorme&lt;/name&gt; &lt;version&gt;2.1&lt;/version&gt; &lt;/app&gt; &lt;app&gt; &lt;id&gt;3&lt;id&gt; &lt;name&gt;Google Play&lt;/name&gt; &lt;version&gt;2.3&lt;/version&gt; &lt;/app&gt;&lt;/apps&gt; 2.Pull解析方式（解析XML格式数据）（例子结果在log呈现）MainActivity12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364private void sendRequestWithOkHttp() &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder() // 指定访问的服务器地址是电脑本机 .url("http://10.0.2.2/get_data.xml")//get_data.xml我们在Apache/htdocs下新建的文件 10.0.2.2对模拟器来说是本机地址 .build(); Response response = client.newCall(request).execute(); String responseData = response.body().string(); parseXMLWithPull(responseData); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;).start(); &#125; private void parseXMLWithPull(String xmlData) &#123; try &#123; XmlPullParserFactory factory = XmlPullParserFactory.newInstance(); XmlPullParser xmlPullParser = factory.newPullParser(); xmlPullParser.setInput(new StringReader(xmlData)); int eventType = xmlPullParser.getEventType(); String id = ""; String name = ""; String version = ""; while (eventType != XmlPullParser.END_DOCUMENT) &#123; String nodeName = xmlPullParser.getName(); switch (eventType) &#123; // 开始解析某个结点 case XmlPullParser.START_TAG: &#123; if ("id".equals(nodeName)) &#123; id = xmlPullParser.nextText(); &#125; else if ("name".equals(nodeName)) &#123; name = xmlPullParser.nextText(); &#125; else if ("version".equals(nodeName)) &#123; version = xmlPullParser.nextText(); &#125; break; &#125; // 完成解析某个结点 case XmlPullParser.END_TAG: &#123; if ("app".equals(nodeName)) &#123; Log.d("MainActivity", "id is " + id); Log.d("MainActivity", "name is " + name); Log.d("MainActivity", "version is " + version); &#125; break; &#125; default: break; &#125; eventType = xmlPullParser.next(); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; 3.SAX解析方式(解析XML格式数据)（实现解析功能同上）新建类继承DefaultHandler 重写5个方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public class ContentHandler extends DefaultHandler &#123; private String nodeName; private StringBuilder id; private StringBuilder name; private StringBuilder version; @Override public void startDocument() throws SAXException &#123; id = new StringBuilder(); name = new StringBuilder(); version = new StringBuilder(); &#125; @Override public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException &#123; // 记录当前结点名 nodeName = localName; &#125; @Override public void characters(char[] ch, int start, int length) throws SAXException &#123; // 根据当前的结点名判断将内容添加到哪一个StringBuilder对象中 if ("id".equals(nodeName)) &#123; id.append(ch, start, length); &#125; else if ("name".equals(nodeName)) &#123; name.append(ch, start, length); &#125; else if ("version".equals(nodeName)) &#123; version.append(ch, start, length); &#125; &#125; @Override public void endElement(String uri, String localName, String qName) throws SAXException &#123; if ("app".equals(localName)) &#123; Log.d("ContentHandler", "id is " + id.toString().trim()); Log.d("ContentHandler", "name is " + name.toString().trim()); Log.d("ContentHandler", "version is " + version.toString().trim()); // 最后要将StringBuilder清空掉 id.setLength(0); name.setLength(0); version.setLength(0); &#125; &#125; @Override public void endDocument() throws SAXException &#123; super.endDocument(); &#125;&#125; MainActivity1234567891011121314151617181920212223242526272829303132333435363738private void sendRequestWithOkHttp() &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder() // 指定访问的服务器地址是电脑本机 .url("http://10.0.2.2/get_data.xml")//get_data.xml我们在Apache/htdocs下新建的文件 10.0.2.2对模拟器来说是本机地址 .build(); Response response = client.newCall(request).execute(); String responseData = response.body().string(); parseXMLWithSAX(responseData); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;).start(); &#125; private void parseXMLWithSAX(String xmlData) &#123; try &#123; SAXParserFactory factory = SAXParserFactory.newInstance(); XMLReader xmlReader = factory.newSAXParser().getXMLReader(); ContentHandler handler = new ContentHandler(); // 将ContentHandler的实例设置到XMLReader中 xmlReader.setContentHandler(handler); // 开始执行解析 xmlReader.parse(new InputSource(new StringReader(xmlData))); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; 4.解析JSON数据格式json数据格式1&#123;“name”:"Tome","age":20&#125; 用JSONObject解析1234567891011121314151617181920212223242526272829303132333435363738394041private void sendRequestWithOkHttp() &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder() // 指定访问的服务器地址是电脑本机 .url("http://10.0.2.2/get_data.json")//get_data.xml我们在Apache/htdocs下新建的文件 10.0.2.2对模拟器来说是本机地址 .build(); Response response = client.newCall(request).execute(); String responseData = response.body().string(); parseJSONWithJSONObject(responseData); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;).start(); &#125; private void parseJSONWithJSONObject(String jsonData) &#123; try &#123; JSONArray jsonArray = new JSONArray(jsonData); for (int i = 0; i &lt; jsonArray.length(); i++) &#123; JSONObject jsonObject = jsonArray.getJSONObject(i); String id = jsonObject.getString("id"); String name = jsonObject.getString("name"); String version = jsonObject.getString("version"); Log.d("MainActivity", "id is " + id); Log.d("MainActivity", "name is " + name); Log.d("MainActivity", "version is " + version); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; 5.使用GSON解析JSON添加依赖1compile 'com.google.code.gson:gson:2.7' 新建App类123456789101112131415161718192021222324252627282930313233public class App &#123; private String id; private String name; private String version; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getVersion() &#123; return version; &#125; public void setVersion(String version) &#123; this.version = version; &#125;&#125; MainActivity private void sendRequestWithOkHttp() { new Thread(new Runnable() { @Override public void run() { try { OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder() // 指定访问的服务器地址是电脑本机 .url("http://10.0.2.2/get_data.json") .build(); Response response = client.newCall(request).execute(); String responseData = response.body().string(); parseJSONWithGSON(responseData); } catch (Exception e) { e.printStackTrace(); } } }).start(); } private void parseJSONWithGSON(String jsonData) { Gson gson = new Gson(); List&lt;App&gt; appList = gson.fromJson(jsonData, new TypeToken&lt;List&lt;App&gt;&gt;() {}.getType()); for (App app : appList) { Log.d("MainActivity", "id is " + app.getId()); Log.d("MainActivity", "name is " + app.getName()); Log.d("MainActivity", "version is " + app.getVersion()); } }]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[androidthreadtest]]></title>
    <url>%2F2017%2F08%2F02%2FAndroidthreadtest%2F</url>
    <content type="text"><![CDATA[学习目的：1.了解android线程的使用 2.了解主线程与子线程区别 3.解析异步处理机制主线程与子线程：所谓主线程，在Windows窗体应用程序中一般指UI线程，这个是程序启动的时候首先创建的线程。而子线程，一般指为了完成某个特殊任务，并行于主线程的其他线程。例如让一个窗体单独开一个线程，去远程数据库中取得数据资料，下载并且保存到本地文件中。所以，主线程和子线程是构建于线程这个通用概念上的人为的习惯称呼，并不是什么官方的固有专用词语。MainActivity（简而言之，为实现某个功能而创建爱的线程是子线程） 1.了解android线程的使用(例：在子线程更新UI) 123456789101112131415161718192021222324252627public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); text = (TextView) findViewById(R.id.text); Button changeText = (Button) findViewById(R.id.change_text); changeText.setOnClickListener(this); &#125; @Override public void onClick(View v) &#123; switch (v.getId()) &#123; case R.id.change_text: new Thread(new Runnable() &#123; @Override public void run() &#123; test.setText("Nice to meet you"); &#125; &#125;).start(); break; default: break; &#125; &#125;&#125; logcat报错（说明不能在子线程更新UI）修改如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123; public static final int UPDATE_TEXT = 1; private TextView text; private Handler handler = new Handler() &#123; public void handleMessage(Message msg) &#123; switch (msg.what) &#123; case UPDATE_TEXT: // 在这里可以进行UI操作 text.setText("Nice to meet you"); break; default: break; &#125; &#125; &#125;; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); text = (TextView) findViewById(R.id.text); Button changeText = (Button) findViewById(R.id.change_text); changeText.setOnClickListener(this); &#125; @Override public void onClick(View v) &#123; switch (v.getId()) &#123; case R.id.change_text: new Thread(new Runnable() &#123; @Override public void run() &#123; Message message = new Message(); message.what = UPDATE_TEXT; handler.sendMessage(message); // 将Message对象发送出去 &#125; &#125;).start(); break; default: break; &#125; &#125;&#125; 3.解析异步处理机制（Message MessageQueue Looper Handler四个部分）异步处理机制的核心思想：一条Message经过如下转展调用，从子线程进入主线程，从而使不能更新UI变成可以更新UI 4.使用AsyncTask类（更方便的进行UI操作）1class DownloadTask extends AsyncTask&lt;Void Integer Boolean&gt;&#123;...&#125;// 三个参数Params:执行AsyncTask需要传入的参数Progress:后台任务执行时，需要在当前界面显示进度Result:返回值类型 还需重写四个方法12345678910111213141516171819202122232425262728293031323334353637class DownloadTask extends AsyncTask&lt;Void Integer Boolean&gt;&#123; @verride protected void onPreExecute()&#123; progressDialog.show();//显示进度对话框 &#125; @verride protected Boolean doInBackground(void... Params)&#123; try&#123; while(true)&#123; int downloadPercent=doDownload();//这是一个虚构的方法 publishProgress(downloadPercent); if(downloadPercent&gt;=100)&#123; break; &#125; &#125;catch(Exception e)&#123; return false; &#125; return true; &#125; &#125; @verride protected void onProgressUpdata(Integer... values)&#123; //在这里更新下载进度 progressDialog.setMessage("Download"+values[0]+"%"); &#125; @verride protected void onPostExecute(Boolean result)&#123; progressDialog.dismiss();//关闭进度对话框 if(result)&#123; Toast.makeText(context,"Download Succeeded",Toast.LENGTH_SHORT).show(); &#125;else&#123; Toast.makeText(context,"Download Failed",Toast.LENGTH_SHORT).show(); &#125; &#125;&#125; 想要启动这个任务1new DownloadTask().execute();]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[networktest3]]></title>
    <url>%2F2017%2F08%2F02%2FNetWorktest3%2F</url>
    <content type="text"><![CDATA[优化：（在tese1，2中http请求代码基本相同 但我们每一次发送请求都编写一次代码）将通用的网络操作放到一个类HttpUil HttpUil1234567891011121314151617181920212223242526272829public class HttpUtil &#123; public static void sendHttpRequest(final String address, final HttpCallbackListener listener) &#123; HttpURLConnection connection = null; try &#123; URL url = new URL(address); connection = (HttpURLConnection) url.openConnection(); connection.setRequestMethod("GET"); connection.setConnectTimeout(8000); connection.setReadTimeout(8000); connection.setDoInput(true); connection.setDoOutput(true); InputStream in = connection.getInputStream(); BufferedReader reader = new BufferedReader(new InputStreamReader(in)); StringBuilder response = new StringBuilder(); String line; while ((line = reader.readLine()) != null) &#123; response.append(line); &#125; return response.toString(); &#125; finally &#123; if (connection != null) &#123; connection.disconnect(); &#125; &#125; &#125;&#125; 若需发起请求(sendHttpRequest()内部没有开启线程 调用时可能阻塞主线程)12String address=&quot;http://wwww.baid.com&quot;;String response=HttpUtil.sendHttpRequest(address); 解决方法(Java的回调机制)首先定义接口 HttpCallbackListener1234567public interface HttpCallbackListener &#123; void onFinish(String response); void onError(Exception e);&#125; 修改HttoUtil1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class HttpUtil &#123; public static void sendHttpRequest(final String address, final HttpCallbackListener listener) &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; HttpURLConnection connection = null; try &#123; URL url = new URL(address); connection = (HttpURLConnection) url.openConnection(); connection.setRequestMethod("GET"); connection.setConnectTimeout(8000); connection.setReadTimeout(8000); connection.setDoInput(true); connection.setDoOutput(true); InputStream in = connection.getInputStream(); BufferedReader reader = new BufferedReader(new InputStreamReader(in)); StringBuilder response = new StringBuilder(); String line; while ((line = reader.readLine()) != null) &#123; response.append(line); &#125; if (listener != null) &#123; // 回调onFinish()方法 listener.onFinish(response.toString()); &#125; &#125; catch (Exception e) &#123; if (listener != null) &#123; // 回调onError()方法 listener.onError(e); &#125; &#125; finally &#123; if (connection != null) &#123; connection.disconnect(); &#125; &#125; &#125; &#125;).start(); &#125;&#125;``` 传入HttoCallbackListener实例```javaHttpUtil.sendHttpRequest(address,new HttpCallbackListener())&#123; @version public void onFinish(String response)&#123; //在这里根据返回内容执行具体逻辑 &#125; @version public void onError(Exception e)&#123; //在这里对异常进行处理 &#125;&#125; 使用HttpURIConnection太复杂 改用Okhttp在HttpUtil内田间sendOkhttpRequest()方法12345678910111213141516171819202122public static void sendOkHttpRequest(final String address, final okhttp3.Callback callback) &#123; OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder() .url(address) .build(); client.newCall(request).enqueue(callback); &#125;``` ```javaHttpUtil.sendOkHttpRequest(address,new HttpCallbackListener())&#123; @version public void onFinish(String response)&#123; //在这里根据返回内容执行具体逻辑 String responseData=response.body().strng(); &#125; @version public void onError(Exception e)&#123; //在这里对异常进行处理 &#125;&#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[networktest]]></title>
    <url>%2F2017%2F08%2F01%2FNetworktest%2F</url>
    <content type="text"><![CDATA[学习目的：1.使用HTTP访问网络 2.使用HttpURIConnection 1.使用HTTP访问网络工作原理：客户端向服务器发出HTTP请求 服务器接收到请求返回数据 客户端解析处理 2.使用HttpURIConnection（本例获取的是html代码） 布局123456789101112131415&lt;Button android:id="@+id/send_request" android:layout_width="match_parent" android:layout_height="wrap_content" android:text="Send Request" /&gt; &lt;ScrollView//滚动查看界面显示不了的内容 android:layout_width="match_parent" android:layout_height="match_parent" &gt; &lt;TextView android:id="@+id/response_text" android:layout_width="match_parent" android:layout_height="wrap_content" /&gt; &lt;/ScrollView&gt; MainActivity类12345678910111213141516171819202122232425262728293031323334353637383940414243444546@Override public void onClick(View v) &#123; if (v.getId() == R.id.send_request) &#123; sendRequestWithHttpURLConnection(); &#125; &#125;private void sendRequestWithHttpURLConnection() &#123; // 开启线程来发起网络请求 new Thread(new Runnable() &#123; @Override public void run() &#123; HttpURLConnection connection = null; BufferedReader reader = null; try &#123; URL url = new URL("http://www.baidu.com"); connection = (HttpURLConnection) url.openConnection(); connection.setRequestMethod("GET"); connection.setConnectTimeout(8000); connection.setReadTimeout(8000); InputStream in = connection.getInputStream(); // 下面对获取到的输入流进行读取 reader = new BufferedReader(new InputStreamReader(in)); StringBuilder response = new StringBuilder(); String line; while ((line = reader.readLine()) != null) &#123; response.append(line); &#125; showResponse(response.toString()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; if (reader != null) &#123; try &#123; reader.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if (connection != null) &#123; connection.disconnect(); &#125; &#125; &#125; &#125;).start(); &#125; 添加权限12&lt;uses-permission android:name="android.permission.INTERNET" /&gt; 3.提交数据给服务器（如：提交用户名和密码）数据用&amp;隔开 123connection.setRequestMethod("POST");DataOutPutStream out=new DataOutPutStream(connection.getOutPutStream());out.writeBytes("username=admin&amp;password=123456789"); 4.使用Okhttp添加依赖1234567dependencies &#123; compile fileTree(dir: 'libs', include: ['*.jar']) testCompile 'junit:junit:4.12' compile 'com.android.support:appcompat-v7:24.2.1' compile 'com.squareup.okhttp3:okhttp:3.4.1'//自动下载两个库Okhttp库 Okio库&#125; 用Okhttp重写http的例子12345678910111213141516171819202122232425262728293031323334353637public void onClick(View v) &#123; if (v.getId() == R.id.send_request) &#123;// sendRequestWithHttpURLConnection(); sendRequestWithOkHttp(); &#125; &#125; private void sendRequestWithOkHttp() &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder() .url("http://www.baidu.com") .build(); Response response = client.newCall(request).execute(); String responseData = response.body().string(); showResponse(responseData); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;).start(); &#125; private void showResponse(final String response) &#123; runOnUiThread(new Runnable() &#123; @Override public void run() &#123; // 在这里进行UI操作，将结果显示到界面上 responseText.setText(response); &#125; &#125;); &#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webviewtest]]></title>
    <url>%2F2017%2F07%2F31%2FWebviewtest%2F</url>
    <content type="text"><![CDATA[学习目的：1.显示各种网页权限声明1&lt;uses-permission android:name="android.permission.INTERNET" /&gt; 1234567891011public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); WebView webView = (WebView) findViewById(R.id.web_view); webView.getSettings().setJavaScriptEnabled(true);//支持javas脚本 webView.setWebViewClient(new WebViewClient());//当网页跳转到另一个网页时 任然在webview显示 webView.loadUrl("http://www.baidu.com"); &#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[notificationtset]]></title>
    <url>%2F2017%2F07%2F31%2FNotificationtest%2F</url>
    <content type="text"><![CDATA[学习目的:1.发通知（程序不在前台运行，但希望向用户发一些提示信息）NotificationActivity类1234567891011public class NotificationActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.notification_layout); NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE); manager.cancel(1); &#125;&#125; 点击事件1234567891011121314151617181920public void onClick(View v) &#123; switch (v.getId()) &#123; case R.id.send_notice: NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE); Notification notification = new NotificationCompat.Builder(this) .setContentTitle("This is content title")//指定标题内容 .setContentText("This is content text")//指定正文内容 .setWhen(System.currentTimeMillis())//指定通知被创建时间 .setSmallIcon(R.mipmap.ic_launcher)//设置通知的小图标 .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))//设置通知的大图标 .setAutoCancel(true);//点击后 通知自动取消 .build(); manager.notify(1, notification);//让通知显示 break; default: break; &#125; &#125; 设置点击通知点击事件PendingIntent（点击通知调到NotificationAcitity.xml并点击后自动消失）12345678910111213141516171819202122public void onClick(View v) &#123; switch (v.getId()) &#123; case R.id.send_notice: Intent intent=new Intent(this,NotificationAcitity.class); PendingIntent pi=PendingIntent.getActivity(this,0,intent,0); NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE); Notification notification = new NotificationCompat.Builder(this) .setContentTitle("This is content title")//指定标题内容 .setContentText("This is content text")//指定正文内容 .setWhen(System.currentTimeMillis())//指定通知被创建时间 .setSmallIcon(R.mipmap.ic_launcher)//设置通知的小图标 .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))//设置通知的大图标 .setContentIntent(pi); .setAutoCancel(true);//点击后 通知自动取消 .build(); manager.notify(1, notification);//让通知显示 break; default: break; &#125; &#125;` 通知的进阶：通知提示音 灯光 /振动需要申请权限 123Notification notification = new NotificationCompat.Builder(this)setSound(Uri.fromFile(new File("/System/media/audio/ringtone/Luna.ogg"))).bulid(); 振动12345Notification notification = new NotificationCompat.Builder(this)setVibrate(new log[]&#123;0,1000,1000,1000&#125;)震动1秒 静止1秒.bulid();&lt;uses-permission android:name="android.permission.VIBRATE" /&gt; 灯光123Notification notification = new NotificationCompat.Builder(this)setLight(Color.GREEN,1000,1000);.bulid(); 直接使用默认设置123Notification notification = new NotificationCompat.Builder(this)setDefaults(NotificationCompat.DEFAULT_ALL).bulid(); 通知的高级功能 解决超长文字显示不僚的问题 显示超大图片 setStyle()方法123Notification notification = new NotificationCompat.Builder(this).setStyle(new NotificationCompat.BigTextStyle().bigText("fbdvdsjfekfjlsfjskfbjsefbsejfjsjdkfbsdbsdubseufhfusefhuiegeiefjselgbsuohsufbsudfbusfseffusfus")).bulid(); 显示超大图片123Notification notification = new NotificationCompat.Builder(this).setStyle(new NotificationCompat.BigPictureStyle.BigPicture(BitmapFactory.decodeResource(getResources(),R.drawable.big_image)));.bulid(); 设置通知的重要程度setPriority()123Notification notification = new NotificationCompat.Builder(this)setPriority(NotificationCompat.PRIORITY_MAX)//最高权限.bulid();]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cameraalbumtest]]></title>
    <url>%2F2017%2F07%2F31%2FCameraalbumtest%2F</url>
    <content type="text"><![CDATA[学习目的：调用系统相册 摄像头123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158public class MainActivity extends AppCompatActivity &#123; public static final int TAKE_PHOTO = 1; public static final int CHOOSE_PHOTO = 2; private ImageView picture; private Uri imageUri; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button takePhoto = (Button) findViewById(R.id.take_photo); Button chooseFromAlbum = (Button) findViewById(R.id.choose_from_album); picture = (ImageView) findViewById(R.id.picture); takePhoto.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; // 创建File对象，用于存储拍照后的图片 File outputImage = new File(getExternalCacheDir(), "output_image.jpg"); try &#123; if (outputImage.exists()) &#123; outputImage.delete(); &#125; outputImage.createNewFile(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; if (Build.VERSION.SDK_INT &lt; 24) &#123; imageUri = Uri.fromFile(outputImage); &#125; else &#123; imageUri = FileProvider.getUriForFile(MainActivity.this, "com.example.cameraalbumtest.fileprovider", outputImage); &#125; // 启动相机程序 Intent intent = new Intent("android.media.action.IMAGE_CAPTURE"); intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri); startActivityForResult(intent, TAKE_PHOTO); &#125; &#125;); chooseFromAlbum.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123; ActivityCompat.requestPermissions(MainActivity.this, new String[]&#123; Manifest.permission. WRITE_EXTERNAL_STORAGE &#125;, 1); &#125; else &#123; openAlbum(); &#125; &#125; &#125;); &#125; private void openAlbum() &#123; Intent intent = new Intent("android.intent.action.GET_CONTENT"); intent.setType("image/*"); startActivityForResult(intent, CHOOSE_PHOTO); // 打开相册 &#125; @Override public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123; switch (requestCode) &#123; case 1: if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123; openAlbum(); &#125; else &#123; Toast.makeText(this, "You denied the permission", Toast.LENGTH_SHORT).show(); &#125; break; default: &#125; &#125; @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; switch (requestCode) &#123; case TAKE_PHOTO: if (resultCode == RESULT_OK) &#123; try &#123; // 将拍摄的照片显示出来 Bitmap bitmap = BitmapFactory.decodeStream(getContentResolver().openInputStream(imageUri)); picture.setImageBitmap(bitmap); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; break; case CHOOSE_PHOTO: if (resultCode == RESULT_OK) &#123; // 判断手机系统版本号 if (Build.VERSION.SDK_INT &gt;= 19) &#123; // 4.4及以上系统使用这个方法处理图片 handleImageOnKitKat(data); &#125; else &#123; // 4.4以下系统使用这个方法处理图片 handleImageBeforeKitKat(data); &#125; &#125; break; default: break; &#125; &#125; @TargetApi(19) private void handleImageOnKitKat(Intent data) &#123; String imagePath = null; Uri uri = data.getData(); Log.d("TAG", "handleImageOnKitKat: uri is " + uri); if (DocumentsContract.isDocumentUri(this, uri)) &#123; // 如果是document类型的Uri，则通过document id处理 String docId = DocumentsContract.getDocumentId(uri); if("com.android.providers.media.documents".equals(uri.getAuthority())) &#123; String id = docId.split(":")[1]; // 解析出数字格式的id String selection = MediaStore.Images.Media._ID + "=" + id; imagePath = getImagePath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, selection); &#125; else if ("com.android.providers.downloads.documents".equals(uri.getAuthority())) &#123; Uri contentUri = ContentUris.withAppendedId(Uri.parse("content://downloads/public_downloads"), Long.valueOf(docId)); imagePath = getImagePath(contentUri, null); &#125; &#125; else if ("content".equalsIgnoreCase(uri.getScheme())) &#123; // 如果是content类型的Uri，则使用普通方式处理 imagePath = getImagePath(uri, null); &#125; else if ("file".equalsIgnoreCase(uri.getScheme())) &#123; // 如果是file类型的Uri，直接获取图片路径即可 imagePath = uri.getPath(); &#125; displayImage(imagePath); // 根据图片路径显示图片 &#125; private void handleImageBeforeKitKat(Intent data) &#123; Uri uri = data.getData(); String imagePath = getImagePath(uri, null); displayImage(imagePath); &#125; private String getImagePath(Uri uri, String selection) &#123; String path = null; // 通过Uri和selection来获取真实的图片路径 Cursor cursor = getContentResolver().query(uri, null, selection, null, null); if (cursor != null) &#123; if (cursor.moveToFirst()) &#123; path = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA)); &#125; cursor.close(); &#125; return path; &#125; private void displayImage(String imagePath) &#123; if (imagePath != null) &#123; Bitmap bitmap = BitmapFactory.decodeFile(imagePath); picture.setImageBitmap(bitmap); &#125; else &#123; Toast.makeText(this, "failed to get image", Toast.LENGTH_SHORT).show(); &#125; &#125;&#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[playaudiotest]]></title>
    <url>%2F2017%2F07%2F31%2FPlayaudiotest%2F</url>
    <content type="text"><![CDATA[学习目的:1.播放音频 暂停音频 停止音频(MediaPlayer类的使用)权限声明1&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt; MainActivity类```javapublic class MainActivity extends AppCompatActivity implements View.OnClickListener{ private MediaPlayer mediaPlayer = new MediaPlayer(); @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button play = (Button) findViewById(R.id.play); Button pause = (Button) findViewById(R.id.pause); Button stop = (Button) findViewById(R.id.stop); play.setOnClickListener(this); pause.setOnClickListener(this); stop.setOnClickListener(this); if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) { ActivityCompat.requestPermissions(MainActivity.this, new String[]{ Manifest.permission. WRITE_EXTERNAL_STORAGE }, 1); } else { initMediaPlayer(); // 初始化MediaPlayer } } private void initMediaPlayer() { try { File file = new File(Environment.getExternalStorageDirectory(), &quot;music.mp3&quot;); mediaPlayer.setDataSource(file.getPath()); // 指定音频文件的路径 mediaPlayer.prepare(); // 让MediaPlayer进入到准备状态 } catch (Exception e) { e.printStackTrace(); } } @Override public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) { switch (requestCode) { case 1: if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) { initMediaPlayer(); } else { Toast.makeText(this, &quot;拒绝权限将无法使用程序&quot;, Toast.LENGTH_SHORT).show(); finish(); } break; default: } } @Override public void onClick(View v) { switch (v.getId()) { case R.id.play: if (!mediaPlayer.isPlaying()) { mediaPlayer.start(); // 开始播放 } break; case R.id.pause: if (mediaPlayer.isPlaying()) { mediaPlayer.pause(); // 暂停播放 } break; case R.id.stop: if (mediaPlayer.isPlaying()) { mediaPlayer.reset(); // 停止播放 initMediaPlayer(); } break; default: break; } } @Override protected void onDestroy() { super.onDestroy(); if (mediaPlayer != null) { mediaPlayer.stop(); mediaPlayer.release(); } } }]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[playvideotest]]></title>
    <url>%2F2017%2F07%2F31%2FPlayvideotest%2F</url>
    <content type="text"><![CDATA[学习目的:1.播放视频 暂停视频 停止视频(videoView类的使用)权限1&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt; MainActivity类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class MainActivity extends AppCompatActivity implements View.OnClickListener&#123; private VideoView videoView; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); videoView = (VideoView) findViewById(R.id.video_view); Button play = (Button) findViewById(R.id.play); Button pause = (Button) findViewById(R.id.pause); Button replay = (Button) findViewById(R.id.replay); play.setOnClickListener(this); pause.setOnClickListener(this); replay.setOnClickListener(this); if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123; ActivityCompat.requestPermissions(MainActivity.this, new String[]&#123; Manifest.permission. WRITE_EXTERNAL_STORAGE &#125;, 1); &#125; else &#123; initVideoPath(); // 初始化MediaPlayer &#125; &#125; private void initVideoPath() &#123; File file = new File(Environment.getExternalStorageDirectory(), "movie.mp4"); videoView.setVideoPath(file.getPath()); // 指定视频文件的路径 &#125; @Override public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123; switch (requestCode) &#123; case 1: if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123; initVideoPath(); &#125; else &#123; Toast.makeText(this, "拒绝权限将无法使用程序", Toast.LENGTH_SHORT).show(); finish(); &#125; break; default: &#125; &#125; @Override public void onClick(View v) &#123; switch (v.getId()) &#123; case R.id.play: if (!videoView.isPlaying()) &#123; videoView.start(); // 开始播放 &#125; break; case R.id.pause: if (videoView.isPlaying()) &#123; videoView.pause(); // 暂停播放 &#125; break; case R.id.replay: if (videoView.isPlaying()) &#123; videoView.resume(); // 重新播放 &#125; break; &#125; &#125; @Override protected void onDestroy() &#123; super.onDestroy(); if (videoView != null) &#123; videoView.suspend(); &#125; &#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[databasetest2]]></title>
    <url>%2F2017%2F07%2F30%2FDatabasetest2%2F</url>
    <content type="text"><![CDATA[学习目的:1.实现跨程序数据共享 1.新建内容提供器的两种方法1.新建内容提供器（通过新建一个类继承ContentProvider类的方式创建）重写如下方法1234567891011121314151617181920212223242526272829303132333435363738394041424344public class DatabaseProvider extends ContentProvider &#123; @Override //初始化内容提供器时调用 这时候数据库完成创建或升级操作 public boolean onCreate() &#123; return false; &#125; @Override //Uri确定那张表 projection确定查询那些列 selection与selectionArgs约束查询哪些行 sortOrder对结果进行排序最后存到Cursor对象中 public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) &#123; return null; &#125; @Override //Uri指定要添加的表 values待添加的数据 public Uri insert(Uri uri, ContentValues values) &#123; return null; &#125; @Override //uri确定哪张表 values新数据保存在此 selection 与 selectionArgs约束更新哪些行 public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) &#123; return 0; &#125; @Override //uri确定哪张表 selection 与 selectionArgs约束删除哪些行 public int delete(Uri uri, String selection, String[] selectionArgs) &#123; return 0; &#125; @Override //根据传入的uri返回相应的MIME public String getType(Uri uri) &#123; return null; &#125; 2.重点解析uri参数标准的URI写法12345//表示调用方期望访问的是com.eaxmple.app这个应用的tabel表的数据content://com.eaxmple.app.provider/tablel//可以加id//表示调用方期望访问的是com.eaxmple.app这个应用的tabel表中id为1的数据content://com.eaxmple.app.provider/tablel/1 URI格式 * #1234//表示匹配任意表内容content://com.eaxmple.app.provider/*//表示匹配tablel表任意一行内容content://com.eaxmple.app.provider/tablel/# 3.UriMatcher类的math（）方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public class DatabaseProvider extends ContentProvider &#123; public static final int BOOK_DIR = 0; public static final int BOOK_ITEM = 1; public static final int CATEGORY_DIR = 2; public static final int CATEGORY_ITEM = 3; public static final String AUTHORITY = "com.example.databasetest.provider"; private static UriMatcher uriMatcher; private MyDatabaseHelper dbHelper; static &#123; uriMatcher = new UriMatcher(UriMatcher.NO_MATCH); uriMatcher.addURI("com.eaxmple.app.provider", "book", BOOK_DIR);//内容提供器 表名 使数据与之关联 uriMatcher.addURI("com.eaxmple.app.provider", "book/#", BOOK_ITEM); uriMatcher.addURI("com.eaxmple.app.provider", "category", CATEGORY_DIR); uriMatcher.addURI("com.eaxmple.app.provider", "category/#", CATEGORY_ITEM); &#125; @Override public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) &#123; // 查询数据 switch (uriMatcher.match(uri)) &#123; case BOOK_DIR: cursor = db.query("Book", projection, selection, selectionArgs, null, null, sortOrder); break; case BOOK_ITEM: String bookId = uri.getPathSegments().get(1); cursor = db.query("Book", projection, "id = ?", new String[] &#123; bookId &#125;, null, null, sortOrder); break; case CATEGORY_DIR: cursor = db.query("Category", projection, selection, selectionArgs, null, null, sortOrder); break; case CATEGORY_ITEM: String categoryId = uri.getPathSegments().get(1); cursor = db.query("Category", projection, "id = ?", new String[] &#123; categoryId &#125;, null, null, sortOrder); break; default: break; &#125; return cursor; &#125;1.新建内容提供器（AS快捷方式创建） com.example.broadcasttest-&gt;new-&gt;other-&gt;Content Provider//重写几个方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154修改databaseProvider```java//继承内容提供器public class DatabaseProvider extends ContentProvider &#123; public static final int BOOK_DIR = 0; public static final int BOOK_ITEM = 1; public static final int CATEGORY_DIR = 2; public static final int CATEGORY_ITEM = 3; public static final String AUTHORITY = &quot;com.example.databasetest.provider&quot;; private static UriMatcher uriMatcher; private MyDatabaseHelper dbHelper; static &#123; uriMatcher = new UriMatcher(UriMatcher.NO_MATCH); uriMatcher.addURI(AUTHORITY, &quot;book&quot;, BOOK_DIR); uriMatcher.addURI(AUTHORITY, &quot;book/#&quot;, BOOK_ITEM); uriMatcher.addURI(AUTHORITY, &quot;category&quot;, CATEGORY_DIR); uriMatcher.addURI(AUTHORITY, &quot;category/#&quot;, CATEGORY_ITEM); &#125; @Override //创建一个yDatabaseHelper实例 这时候数据库完成创建或升级操作 public boolean onCreate() &#123; dbHelper = new MyDatabaseHelper(getContext(), &quot;BookStore.db&quot;, null, 2); return true; &#125; @Override public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) &#123; // 查询数据 SQLiteDatabase db = dbHelper.getReadableDatabase(); Cursor cursor = null; switch (uriMatcher.match(uri)) &#123; case BOOK_DIR: cursor = db.query(&quot;Book&quot;, projection, selection, selectionArgs, null, null, sortOrder); break; case BOOK_ITEM: String bookId = uri.getPathSegments().get(1); cursor = db.query(&quot;Book&quot;, projection, &quot;id = ?&quot;, new String[] &#123; bookId &#125;, null, null, sortOrder); break; case CATEGORY_DIR: cursor = db.query(&quot;Category&quot;, projection, selection, selectionArgs, null, null, sortOrder); break; case CATEGORY_ITEM: String categoryId = uri.getPathSegments().get(1); cursor = db.query(&quot;Category&quot;, projection, &quot;id = ?&quot;, new String[] &#123; categoryId &#125;, null, null, sortOrder); break; default: break; &#125; return cursor; &#125; @Override public Uri insert(Uri uri, ContentValues values) &#123; // 添加数据 SQLiteDatabase db = dbHelper.getWritableDatabase(); Uri uriReturn = null; switch (uriMatcher.match(uri)) &#123; case BOOK_DIR: case BOOK_ITEM: long newBookId = db.insert(&quot;Book&quot;, null, values); uriReturn = Uri.parse(&quot;content://&quot; + AUTHORITY + &quot;/book/&quot; + newBookId); break; case CATEGORY_DIR: case CATEGORY_ITEM: long newCategoryId = db.insert(&quot;Category&quot;, null, values); uriReturn = Uri.parse(&quot;content://&quot; + AUTHORITY + &quot;/category/&quot; + newCategoryId); break; default: break; &#125; return uriReturn; &#125; @Override public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) &#123; // 更新数据 SQLiteDatabase db = dbHelper.getWritableDatabase(); int updatedRows = 0; switch (uriMatcher.match(uri)) &#123; case BOOK_DIR: updatedRows = db.update(&quot;Book&quot;, values, selection, selectionArgs); break; case BOOK_ITEM: String bookId = uri.getPathSegments().get(1); updatedRows = db.update(&quot;Book&quot;, values, &quot;id = ?&quot;, new String[] &#123; bookId &#125;); break; case CATEGORY_DIR: updatedRows = db.update(&quot;Category&quot;, values, selection, selectionArgs); break; case CATEGORY_ITEM: String categoryId = uri.getPathSegments().get(1); updatedRows = db.update(&quot;Category&quot;, values, &quot;id = ?&quot;, new String[] &#123; categoryId &#125;); break; default: break; &#125; return updatedRows; &#125; @Override public int delete(Uri uri, String selection, String[] selectionArgs) &#123; // 删除数据 SQLiteDatabase db = dbHelper.getWritableDatabase(); int deletedRows = 0; switch (uriMatcher.match(uri)) &#123; case BOOK_DIR: deletedRows = db.delete(&quot;Book&quot;, selection, selectionArgs); break; case BOOK_ITEM: String bookId = uri.getPathSegments().get(1); deletedRows = db.delete(&quot;Book&quot;, &quot;id = ?&quot;, new String[] &#123; bookId &#125;); break; case CATEGORY_DIR: deletedRows = db.delete(&quot;Category&quot;, selection, selectionArgs); break; case CATEGORY_ITEM: String categoryId = uri.getPathSegments().get(1); deletedRows = db.delete(&quot;Category&quot;, &quot;id = ?&quot;, new String[] &#123; categoryId &#125;); break; default: break; &#125; return deletedRows; &#125; @Override //所有内容提供器都必须提供的方法 用于获取URI对象所对应的MIME类型 MIME由三个部分组成 //1.必须以vnd开头 2.uri以路径结尾则android.cursor.dir/ 以id结尾则android.cursor.item/ 3.最后接上vnd.&lt;authority&gt;.&lt;path&gt; //例如：URI：content://com.eaxmple.app.provider/tabel //MIME:vnd.android.sursor.dir/vnd.com.eaxmple.app.provider.tabel public String getType(Uri uri) &#123; switch (uriMatcher.match(uri)) &#123; case BOOK_DIR: return &quot;vnd.android.cursor.dir/vnd.com.example.databasetest. provider.book&quot;;//返回MIME case BOOK_ITEM: return &quot;vnd.android.cursor.item/vnd.com.example.databasetest. provider.book&quot;; case CATEGORY_DIR: return &quot;vnd.android.cursor.dir/vnd.com.example.databasetest. provider.category&quot;; case CATEGORY_ITEM: return &quot;vnd.android.cursor.item/vnd.com.example.databasetest. provider.category&quot;; &#125; return null; &#125; mydatabaseHalper类12345678910111213141516171819202122232425262728293031323334353637public class MyDatabaseHelper extends SQLiteOpenHelper &#123; public static final String CREATE_BOOK = "create table Book (" + "id integer primary key autoincrement, " + "author text, " + "price real, " + "pages integer, " + "name text)"; public static final String CREATE_CATEGORY = "create table Category (" + "id integer primary key autoincrement, " + "category_name text, " + "category_code integer)"; private Context mContext; public MyDatabaseHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) &#123; super(context, name, factory, version); mContext = context; &#125; @Override public void onCreate(SQLiteDatabase db) &#123; db.execSQL(CREATE_BOOK); db.execSQL(CREATE_CATEGORY); // Toast.makeText(mContext, "Create succeeded", Toast.LENGTH_SHORT).show(); &#125; @Override public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123; db.execSQL("drop table if exists Book"); db.execSQL("drop table if exists Category"); onCreate(db); &#125;&#125; MianActivity类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081public class MainActivity extends AppCompatActivity &#123; private MyDatabaseHelper dbHelper; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); dbHelper = new MyDatabaseHelper(this, "BookStore.db", null, 2); Button createDatabase = (Button) findViewById(R.id.create_database); createDatabase.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; dbHelper.getWritableDatabase(); &#125; &#125;); Button addData = (Button) findViewById(R.id.add_data); addData.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; SQLiteDatabase db = dbHelper.getWritableDatabase(); ContentValues values = new ContentValues(); // 开始组装第一条数据 values.put("name", "The Da Vinci Code"); values.put("author", "Dan Brown"); values.put("pages", 454); values.put("price", 16.96); db.insert("Book", null, values); // 插入第一条数据 values.clear(); // 开始组装第二条数据 values.put("name", "The Lost Symbol"); values.put("author", "Dan Brown"); values.put("pages", 510); values.put("price", 19.95); db.insert("Book", null, values); // 插入第二条数据 &#125; &#125;); Button updateData = (Button) findViewById(R.id.update_data); updateData.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; SQLiteDatabase db = dbHelper.getWritableDatabase(); ContentValues values = new ContentValues(); values.put("price", 10.99); db.update("Book", values, "name = ?", new String[] &#123; "The Da Vinci Code" &#125;); &#125; &#125;); Button deleteButton = (Button) findViewById(R.id.delete_data); deleteButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; SQLiteDatabase db = dbHelper.getWritableDatabase(); db.delete("Book", "pages &gt; ?", new String[] &#123; "500" &#125;); &#125; &#125;); Button queryButton = (Button) findViewById(R.id.query_data); queryButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; SQLiteDatabase db = dbHelper.getWritableDatabase(); // 查询Book表中所有的数据 Cursor cursor = db.query("Book", null, null, null, null, null, null); if (cursor.moveToFirst()) &#123; do &#123; // 遍历Cursor对象，取出数据并打印 String name = cursor.getString(cursor.getColumnIndex("name")); String author = cursor.getString(cursor.getColumnIndex("author")); int pages = cursor.getInt(cursor.getColumnIndex("pages")); double price = cursor.getDouble(cursor.getColumnIndex("price")); Log.d("MainActivity", "book name is " + name); Log.d("MainActivity", "book author is " + author); Log.d("MainActivity", "book pages is " + pages); Log.d("MainActivity", "book price is " + price); &#125; while (cursor.moveToNext()); &#125; cursor.close(); &#125; &#125;); &#125;&#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[runtimepermissiontest]]></title>
    <url>%2F2017%2F07%2F30%2FRuntimepermissiontest%2F</url>
    <content type="text"><![CDATA[学习目的：1.了解权限及如何申请权限1.了解权限及如何申请权限1234567891011121314151617Button makeCall = (Button) findViewById(R.id.make_call); makeCall.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; try &#123; Intent intent = new Intent(Intent.ACTION_CALL);//打电话 intent.setData(Uri.parse("tel:10086")); startActivity(intent); &#125; catch (SecurityException e) &#123; e.printStackTrace(); &#125; &#125; &#125;);``` ```java&lt;uses-permission android:name="android.permission.CALL_PHONE" /&gt; 但在高版本的Android系统会出错 权限问题 permission Denial 修改如下123456789101112131415161718192021222324252627282930313233343536373839404142434445public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button makeCall = (Button) findViewById(R.id.make_call); makeCall.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; //判断用户是否已授权 将返回值与PackageManager.PERMISSION_GRANTED比较 if(ContextCompat.checkSelfPermission(MainActivity.this,Manifest.permission.CALL_PHONE)!=PackageManager.PERMISSION_GRANTED)&#123; //申请授权 Activity实例 String数组 请求码 ActivityCompat.requestPermissions(MainActivity.this,new String[]&#123;Manifest.permission.CALL_PHONE&#125;,1); &#125;else&#123; call(); &#125; &#125; &#125;); &#125; private void call() &#123; try &#123; Intent intent = new Intent(Intent.ACTION_CALL); intent.setData(Uri.parse("tel:10086")); startActivity(intent); &#125; catch (SecurityException e) &#123; e.printStackTrace(); &#125; &#125;//判断最后的授权结果 @Override public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123; switch (requestCode) &#123; case 1: if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123; call(); &#125; else &#123; Toast.makeText(this, "You denied the permission", Toast.LENGTH_SHORT).show(); &#125; break; default: &#125; &#125;&#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[contactstest]]></title>
    <url>%2F2017%2F07%2F30%2FContactstest%2F</url>
    <content type="text"><![CDATA[学习目的:1.读取系统联系人 1.读取系统联系人1&lt;uses-permission android:name="android.permission.READ_CONTACTS" /&gt;//权限 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public class MainActivity extends AppCompatActivity &#123; ArrayAdapter&lt;String&gt; adapter; List&lt;String&gt; contactsList = new ArrayList&lt;&gt;(); @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ListView contactsView = (ListView) findViewById(R.id.contacts_view); adapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout. simple_list_item_1, contactsList); contactsView.setAdapter(adapter); if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) &#123; ActivityCompat.requestPermissions(this, new String[]&#123; Manifest.permission.READ_CONTACTS &#125;, 1);//申请权限 &#125; else &#123; readContacts(); &#125; &#125; private void readContacts() &#123; Cursor cursor = null; try &#123; // 查询联系人数据 cursor = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, null, null, null); if (cursor != null) &#123; while (cursor.moveToNext()) &#123; // 获取联系人姓名 String displayName = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME)); // 获取联系人手机号 String number = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER)); //ContactsContract.CommonDataKinds.Phone类提供的常量就是uri.parse()解析出来的结果 contactsList.add(displayName + "\n" + number); &#125; adapter.notifyDataSetChanged(); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; if (cursor != null) &#123; cursor.close(); &#125; &#125; &#125; @Override public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123; switch (requestCode) &#123; case 1: if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123; readContacts(); &#125; else &#123; Toast.makeText(this, "You denied the permission", Toast.LENGTH_SHORT).show(); &#125; break; default: &#125; &#125;&#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LitePal]]></title>
    <url>%2F2017%2F07%2F29%2FLietPal%2F</url>
    <content type="text"><![CDATA[学习目的：1.使用来源库LitePal(使用ORM 对象关系映射)创建数据库 2. 升级数据库(litepal会自动保存更新前的数据) 3.使用LitePal添加数据 1.使用来源库LitePal 配置LitePal 1compile 'org.litepal.android:core:1.3.2' 配置litepal.xml文件 12345678910&lt;litepal&gt; &lt;dbname value="BookStore" &gt;&lt;/dbname&gt; &lt;version value="2" &gt;&lt;/version&gt; &lt;list&gt; &lt;mapping class="com.example.litepaltest.Book"&gt;&lt;/mapping&gt; &lt;mapping class="com.example.litepaltest.Category"&gt;&lt;/mapping&gt; &lt;/list&gt;&lt;/litepal&gt; 用面向对象思维实现建表功能（不用和SQL打交道） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061import org.litepal.crud.DataSupport;public class Book &#123;//Book对应Book表 private int id; private String author; private double price; private int pages; private String name; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getAuthor() &#123; return author; &#125; public void setAuthor(String author) &#123; this.author = author; &#125; public double getPrice() &#123; return price; &#125; public int getPages() &#123; return pages; &#125; public void setPages(int pages) &#123; this.pages = pages; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public void setPress(String press) &#123; this.press = press; &#125;&#125; 将Book类映射到模型列表中 12345678910&lt;litepal&gt; &lt;dbname value="BookStore" &gt;&lt;/dbname&gt; &lt;version value="2" &gt;&lt;/version&gt; &lt;list&gt; &lt;mapping class="com.example.litepaltest.Book"&gt;&lt;/mapping&gt; &lt;/list&gt;&lt;/litepal&gt; 只需要任意一次数据库操作 BookSrore.db数据库可自动创建1234567Button createDatabase = (Button) findViewById(R.id.create_database); createDatabase.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Connector.getDatabase(); &#125; &#125;); 升级数据库(litepal会自动保存更新前的数据)1234567891011//Book类 private String press; public String getPress() &#123; return press; &#125; public void setPrice(double price) &#123; this.price = price; &#125; 新建表Category 12345678910111213141516171819202122//Category类public class Category &#123; private int id; private String categoryName; private int categoryCode; public void setId(int id) &#123; this.id = id; &#125; public void setCategoryName(String categoryName) &#123; this.categoryName = categoryName; &#125; public void setCategoryCode(int categoryCode) &#123; this.categoryCode = categoryCode; &#125;&#125; 将Category类映射到模型列表中 12&lt;mapping class="com.example.litepaltest.Category"&gt;&lt;/mapping&gt; 3.使用LitePal添加数据 使Book类继承DataSupport 123public class Book extends DataSupport&#123; ...&#125; 添加数据 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051Button addData = (Button) findViewById(R.id.add_data); addData.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Book book = new Book(); book.setName("The Da Vinci Code"); book.setAuthor("Dan Brown"); book.setPages(454); book.setPrice(16.96); book.setPress("Unknow"); book.save();//save()由DataSupport继承而来 &#125; &#125;);``` 4.使用LitePal更新数据(1.对已存储（model.isSaved()方法）对象重新设值 2.)```javaButton updateData = (Button) findViewById(R.id.update_data); updateData.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Book book = new Book(); book.setName("The Lost Symol"); book.setPrice(10.99); book.save(); book.setPrice(14.95);//对象重新设值 book.save(); &#125; &#125;)；``` 更巧妙地方法```javaButton updateData = (Button) findViewById(R.id.update_data); updateData.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Book book = new Book(); book.setPrice(14.95); book.setPress("Anchor"); book.updateAll("name = ? and author = ?", "The Lost Symbol", "Dan Brown"); &#125; &#125;);``` 将数据更新成默认值```javaBook book=new Book();book.setTofault("page");//setTofault()方法将数据更新成默认值book.updateAll(); 5.使用LitePal删除数据 delete()方法1234567Button deleteButton = (Button) findViewById(R.id.delete_data); deleteButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; DataSupport.deleteAll(Book.class, "price &lt; ?", "15"); &#125; &#125;); 6.查询数据 查询API：findALL findFrist findLast1234567891011121314Button queryButton = (Button) findViewById(R.id.query_data); queryButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; List&lt;Book&gt; books = DataSupport.findAll(Book.class); for (Book book: books) &#123; Log.d("MainActivity", "book name is " + book.getName()); Log.d("MainActivity", "book author is " + book.getAuthor()); Log.d("MainActivity", "book pages is " + book.getPages()); Log.d("MainActivity", "book price is " + book.getPrice()); Log.d("MainActivity", "book press is " + book.getPress()); &#125; &#125; &#125;); 查询API12345678910//select()指定查询哪几列List&lt;Book&gt;books=DataSupport.select("name","author").find(Book.class);//where()指定查询约束条件List&lt;Book&gt;books=DataSupport.where("pages&gt;?","400").find(Book.class);//order()指定结果排序方式List&lt;Book&gt;books=DataSupport.order("price desc").find(Book.class);//limit()查询结果数量List&lt;Book&gt;books=DataSupport.limit(3).find(Book.class);//offset()查询结果偏移量List&lt;Book&gt;books=DataSupport.limit(3).offset().find(Book.class);]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DataBestTest]]></title>
    <url>%2F2017%2F07%2F29%2FDataBestTest%2F</url>
    <content type="text"><![CDATA[学习目的：1.创建数据库 2.升级数据库 3.对数据库的四种操作 4.使用SQL操作数据库 5.使用LitePal操作数据库 1.创建名为BookStore.db数据库 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748//MyDatabaseHelperpublic class MyDatabaseHelper extends SQLiteOpenHelper &#123; public static final String CREATE_BOOK = "create table Book (" + "id integer primary key autoincrement, " + "author text, " + "price real, " + "pages integer, " + "name text)"; private Context mContext; public MyDatabaseHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) &#123; super(context, name, factory, version); mContext = context; &#125; @Override public void onCreate(SQLiteDatabase db) &#123; db.execSQL(CREATE_BOOK); Toast.makeText(mContext, "Create succeeded", Toast.LENGTH_SHORT).show(); &#125; @Override public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123; &#125; //MainActivity public class MainActivity extends AppCompatActivity &#123; private MyDatabaseHelper dbHelper; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); dbHelper = new MyDatabaseHelper(this, "BookStore.db", null, 2); Button createDatabase = (Button) findViewById(R.id.create_database); createDatabase.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; dbHelper.getWritableDatabase(); &#125; &#125;); &#125; 2.升级数据库(给它加东西) onUpgrade()建表Category12345678910public static final String CREATE_CATEGORY = "create table Category (" + "id integer primary key autoincrement, " + "category_name text, " + "category_code integer)"; public void onCreate(SQLiteDatabase db) &#123; db.execSQL(CREATE_BOOK); db.execSQL(CREATE_CATEGORY); Toast.makeText(mContext, "Create succeeded", Toast.LENGTH_SHORT).show(); &#125; onUpgrade()方法12345public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123; db.execSQL("drop table if exists Book"); db.execSQL("drop table if exists Category"); onCreate(db); &#125; MianActivity123456789101112protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); dbHelper = new MyDatabaseHelper(this, "BookStore.db", null, 2);//将数据库版本号指定为2 Button createDatabase = (Button) findViewById(R.id.create_database); createDatabase.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; dbHelper.getWritableDatabase(); &#125; &#125;); 3.对数据库的四种操作 Create添加 insert（）方法 Retrieve查询 Updata（）方法 Updata更新 Delete删除 1.Create添加 insert（）方法123456789101112131415161718192021Button addData = (Button) findViewById(R.id.add_data); addData.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; SQLiteDatabase db = dbHelper.getWritableDatabase(); ContentValues values = new ContentValues();//提供put（）方法 // 开始组装第一条数据 values.put("name", "The Da Vinci Code"); values.put("author", "Dan Brown"); values.put("pages", 454); values.put("price", 16.96); db.insert("Book", null, values); // 插入第一条数据 表名 给空的列赋值null ContentValues对象（提供put（）方法） values.clear(); // 开始组装第二条数据 values.put("name", "The Lost Symbol"); values.put("author", "Dan Brown"); values.put("pages", 510); values.put("price", 19.95); db.insert("Book", null, values); // 插入第二条数据 &#125; &#125;); 2.Updata更新 Updata（）方法1234567891011Button updateData = (Button) findViewById(R.id.update_data); updateData.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; SQLiteDatabase db = dbHelper.getWritableDatabase(); ContentValues values = new ContentValues(); values.put("price", 10.99); db.update("Book", values, "name = ?", new String[] &#123; "The Da Vinci Code" &#125;);//更新name =The Da Vinci Code的这一行 //将名字为he Da Vinci Code的price改为10.99 &#125; &#125;); 3.Delete删除12345678Button deleteButton = (Button) findViewById(R.id.delete_data); deleteButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; SQLiteDatabase db = dbHelper.getWritableDatabase(); db.delete("Book", "pages &gt; ?", new String[] &#123; "500" &#125;);//删除页数超过500页的的boo表中的数据 &#125; &#125;); 4.Retrieve查询 query（）方法1234567891011121314151617181920212223Button queryButton = (Button) findViewById(R.id.query_data); queryButton.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; SQLiteDatabase db = dbHelper.getWritableDatabase(); // 查询Book表中所有的数据 Cursor cursor = db.query("Book", null, null, null, null, null, null);//调用getColumnIndex方法 if (cursor.moveToFirst()) &#123; do &#123; // 遍历Cursor对象，取出数据并打印 String name = cursor.getString(cursor.getColumnIndex("name")); String author = cursor.getString(cursor.getColumnIndex("author")); int pages = cursor.getInt(cursor.getColumnIndex("pages")); double price = cursor.getDouble(cursor.getColumnIndex("price")); Log.d("MainActivity", "book name is " + name); Log.d("MainActivity", "book author is " + author); Log.d("MainActivity", "book pages is " + pages); Log.d("MainActivity", "book price is " + price); &#125; while (cursor.moveToNext()); &#125; cursor.close(); &#125; &#125;); 使用SQL操作数据库 添加数据 12db.execSQL("insret into Book (name,author,pages,price)values(?,?,?,?)",new String[]&#123;"The Da Vinci Code","Dan Brown ","545","16.96"&#125;);db.execSQL("insret into Book (name,author,pages,price)values(?,?,?,?)",new String[]&#123;"The Lost Symbol","Dan Brown ","545","16.96"&#125;); 更新数据 1db.execSQL("updata Book set price=? where name=?",new String[]&#123;"10.99","The Da Vinci Code"&#125;); 删除数据 1db.execSQL("delete from Book where pages&gt;?,new String[]&#123;"500"&#125;"); 查询数据 1db.rawQuery("select * from Book",null); 5.使用LitePal操作数据库]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sharedpreferencestest]]></title>
    <url>%2F2017%2F07%2F28%2Fsharedpreferencestest%2F</url>
    <content type="text"><![CDATA[学习目的：1.获取sharedpreferences对象的三种方法 1.获取sharedpreferencestest对象的三种方法 Context类中的getsharedpreferences（） Activity类中的getDefaulsharedpreferences() PreferenceManager类中的getDefaulsharedpreferences() 范例 123456789101112131415161718public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button saveData = (Button) findViewById(R.id.save_data); saveData.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; SharedPreferences.Editor editor = getSharedPreferences("data", MODE_PRIVATE).edit();//data文件名 editor.putString("name", "Tom");//存储String数据 editor.putInt("age", 28);//存储Int数据 editor.putBoolean("married", false);//存储Boolean数据 editor.apply(); &#125; &#125;);&#125; 读取数据 Button restoreData = (Button) findViewById(R.id.restore_data); restoreData.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { SharedPreferences pref = getSharedPreferences("data", MODE_PRIVATE); String name = pref.getString("name", ""); int age = pref.getInt("age", 0); boolean married = pref.getBoolean("married", false); Log.d("MainActivity", "name is " + name); Log.d("MainActivity", "age is " + age); Log.d("MainActivity", "married is " + married); } }); }]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Filepersistencetest]]></title>
    <url>%2F2017%2F07%2F28%2FFilepersistencetests%2F</url>
    <content type="text"><![CDATA[学习目的：文件存储 将数据保存到文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public void save(String inputText) &#123; FileOutputStream out = null; BufferedWriter writer = null; try &#123; out = openFileOutput("data", Context.MODE_PRIVATE);//MODE_PRIVATE指定同一文件名将被覆盖 openFileOutput（）获得FileOutputSteame对象 再借助它构建OutputStreamWriter对象 再使用OutputStreamWriter构建BufferedWriter对象 writer = new BufferedWriter(new OutputStreamWriter(out));// writer.write(inputText); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; try &#123; if (writer != null) &#123; writer.close(); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125;``` - 范例```javapublic class MainActivity extends AppCompatActivity &#123; private EditText edit; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); edit = (EditText) findViewById(R.id.edit); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); String inputText = edit.getText().toString(); save(inputText);//掉用自定义方法 存储输入字符 &#125;``` - 从文件中读取数据```javapublic String load() &#123; FileInputStream in = null; BufferedReader reader = null; StringBuilder content = new StringBuilder(); try &#123; in = openFileInput("data");//获取FileInputStream对象data reader = new BufferedReader(new InputStreamReader(in));构建InputStreamReader对象reader String line = ""; while ((line = reader.readLine()) != null) &#123; content.append(line); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if (reader != null) &#123; try &#123; reader.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; return content.toString(); &#125; 范例 public class MainActivity extends AppCompatActivity { private EditText edit; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); edit = (EditText) findViewById(R.id.edit); String inputText = load(); if (!TextUtils.isEmpty(inputText)) { edit.setText(inputText); edit.setSelection(inputText.length()); Toast.makeText(this, "Restoring succeeded", Toast.LENGTH_SHORT).show(); } }]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ActivityLifeCycleText chaper2]]></title>
    <url>%2F2017%2F07%2F27%2FActivityLifeCycleText%2F</url>
    <content type="text"><![CDATA[学习目的：了解活动的运行周期]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BroadCastTest]]></title>
    <url>%2F2017%2F07%2F25%2FBroadCastTest%2F</url>
    <content type="text"><![CDATA[学习目的：1.了解标准广播 有序广播区别(简单，不赘述) 2.接收系统广播 3,发送自定义广播 4.使用本地广播 2.接收系统广播1.动态注册监听网络变化 需要声明权限 12345&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.example.broadcasttest&quot;&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&gt; 新建NetworkChangeReceiver类 12345678910111213141516171819202122232425262728293031public class MainActivity extends AppCompatActivity &#123; private IntentFilter intentFilter; private NetworkChangeReceiver networkChangeReceiver; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); intentFilter = new IntentFilter(); intentFilter.addAction("android.net.conn.CONNECTIVITY_CHANGE");//当网络发生变化 系统发出值/为android.net.conn.CONNECTIVITY_CHANGE的广播 要监听什么广播就加什么action networkChangeReceiver = new NetworkChangeReceiver();//新建NetworkChangeReceiver实例 registerReceiver(networkChangeReceiver, intentFilter);//对其进行注册 &#125; @Override protected void onDestroy() &#123; super.onDestroy(); unregisterReceiver(networkChangeReceiver);//动态注册的的广播接收器一定要取消注册 &#125;class NetworkChangeReceiver extends BroadcastReceiver &#123; @Override public void onReceive(Context context, Intent intent) &#123; Toast.makeText(content,"network changes",Toast.LENGTH_SHORT).show(); &#125; 优化（告诉用户有网还是没网）1234567891011121314151617class NetworkChangeReceiver extends BroadcastReceiver &#123; @Override public void onReceive(Context context, Intent intent) &#123; ConnectivityManager connectionManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);//ConnectivityManager 系统服务类 专门管理网络getSystemService获得NetworkInfo实例 NetworkInfo networkInfo = connectionManager.getActiveNetworkInfo();// if (networkInfo != null &amp;&amp; networkInfo.isAvailable()) &#123; Toast.makeText(context, "network is available", Toast.LENGTH_SHORT).show(); &#125; else &#123; Toast.makeText(context, "network is unavailable", Toast.LENGTH_SHORT).show(); &#125; &#125; &#125; 2.静态注册监听网路变化直接NEW-other-BoardCastReceriver12345678910public class BoardCompelteReceiver extends BroadcastReceiver &#123; @Override public void onReceive(Context context, Intent intent) &#123; Toast.makeText(context, "Board Complete", Toast.LENGTH_SHORT).show(); &#125;&#125; 添加权限(部分自动生成)1234567891011&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt; &lt;receiver android:name=&quot;.BootCompleteReceiver&quot; android:enabled=&quot;true&quot; android:exported=&quot;true&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;//系统启动时会发android.intent.action.BOOT_COMPLETED值得广播 &lt;/intent-filter&gt; &lt;/receiver&gt; 3,发送自定义广播1.发送标准广播12345678910111213141516171819202122232425262728293031323334353637public class MyBroadcastReceiver extends BroadcastReceiver &#123; @Override public void onReceive(Context context, Intent intent) &#123; Toast.makeText(context, "received in MyBroadcastReceiver", Toast.LENGTH_SHORT).show(); abortBroadcast(); &#125;&#125;添加权限```text&lt;receiver android:name=".MyBroadcastReceiver" android:enabled="true" android:exported="true"&gt; &lt;intent-filter android:priority="100"&gt; &lt;action android:name="com.example.broadcasttest.MY_BROADCAST"/&gt; &lt;/intent-filter&gt; &lt;/receiver&gt;``` 按钮启动```javaButton button = (Button) findViewById(R.id.button); button.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Intent intent = new Intent("com.example.broadcasttest.MY_BROADCAST"); sendBroadcast(intent); &#125; &#125;); &lt;h3&gt;2.发送有序广播&lt;/h3&gt;改一行代码```javasendOrderedBroadcast(intent,null);//这时广播接收器有先后顺序 如何定义先后顺序1234567&lt;receiver android:name=".MyBroadcastReceiver" android:enabled="true" android:exported="true"&gt; &lt;intent-filter android:priority="100"&gt;//100优先级最高 &lt;action android:name="com.example.broadcasttest.MY_BROADCAST"/&gt; &lt;/intent-filter&gt; 是否允许继续传递1234ublic void onReceive(Context context, Intent intent) &#123; Toast.makeText(context, "received in MyBroadcastReceiver", Toast.LENGTH_SHORT).show(); abortBroadcast();//表示截断 &#125; 4.使用本地广播1234567891011121314151617181920212223242526272829303132333435363738394041424344ublic class MainActivity extends AppCompatActivity &#123; private IntentFilter intentFilter; private LocalReceiver localReceiver; private LocalBroadcastManager localBroadcastManager; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); localBroadcastManager = LocalBroadcastManager.getInstance(this); // 获取实例 Button button = (Button) findViewById(R.id.button); button.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Intent intent = new Intent("com.example.broadcasttest.LOCAL_BROADCAST"); localBroadcastManager.sendBroadcast(intent); // 发送本地广播 &#125; &#125;); intentFilter = new IntentFilter(); intentFilter.addAction("com.example.broadcasttest.LOCAL_BROADCAST");//当网络发生变化 系统发出值/为android.net.conn.CONNECTIVITY_CHANGE的广播 要监听什么广播就加什么action localReceiver = new LocalReceiver();//新建NetworkChangeReceiver实例 localBroadcastManager.registerReceiver(localReceiver, intentFilter); // 注册本地广播监听器 &#125; @Override protected void onDestroy() &#123; super.onDestroy(); localBroadcastManager.unregisterReceiver(localReceiver); &#125; class LocalReceiver extends BroadcastReceiver &#123; @Override public void onReceive(Context context, Intent intent) &#123; Toast.makeText(context, "received local broadcast", Toast.LENGTH_SHORT).show(); &#125; &#125; 本地广播的优势不用担心机密数据泄露其他程序将广播发送到我们程序内部比全局广播更高效]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BroadcastBestPractise]]></title>
    <url>%2F2017%2F07%2F24%2FBroadcastBestPractise%2F</url>
    <content type="text"><![CDATA[学习目的：实现登陆成功后强制下线功能(关闭所有活动，返回登陆界面)1.新建ActivityCollector类123456789101112131415161718192021public class ActivityCollector &#123; public static List&lt;Activity&gt; activities = new ArrayList&lt;&gt;(); public static void addActivity(Activity activity) &#123; activities.add(activity); &#125; public static void removeActivity(Activity activity) &#123; activities.remove(activity); &#125; public static void finishAll() &#123; for (Activity activity : activities) &#123; if (!activity.isFinishing()) &#123; activity.finish(); &#125; &#125; &#125;&#125; 2.创建BaseActivity类作为所有活动的父类1234567891011121314public class BaseActivity extends AppCompatActivity &#123; private ForceOfflineReceiver receiver; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); ActivityCollector.addActivity(this); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); ActivityCollector.removeActivity(this); &#125; 3.新建LoginActivity类及其布局(登陆的处理)12345678910111213141516171819202122232425262728293031323334public class LoginActivity extends BaseActivity &#123; private EditText accountEdit; private EditText passwordEdit; private Button login; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_login); accountEdit = (EditText) findViewById(R.id.account); passwordEdit = (EditText) findViewById(R.id.password); login = (Button) findViewById(R.id.login); login.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; String account = accountEdit.getText().toString(); String password = passwordEdit.getText().toString(); // 如果账号是admin且密码是123456，就认为登录成功 if (account.equals("admin") &amp;&amp; password.equals("123456")) &#123; Intent intent = new Intent(LoginActivity.this, MainActivity.class); startActivity(intent); finish(); &#125; else &#123; Toast.makeText(LoginActivity.this, "account or password is invalid", Toast.LENGTH_SHORT).show(); &#125; &#125; &#125;); &#125;&#125; 4.修改MainACTIVITY类及其布局123456789101112131415161718public class MainActivity extends BaseActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button forceOffline = (Button) findViewById(R.id.force_offline); forceOffline.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Intent intent = new Intent("com.example.broadcastbestpractice.FORCE_OFFLINE"); sendBroadcast(intent);//发送com.example.broadcastbestpractice.FORCE_OFFLINE广播 表示强制下线 //需要创建广播接收器 &#125; &#125;); &#125;&#125; 在BaseActivity类注册广播接收器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657public class BaseActivity extends AppCompatActivity &#123; private ForceOfflineReceiver receiver; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); ActivityCollector.addActivity(this); &#125; @Override protected void onResume() &#123; super.onResume(); IntentFilter intentFilter = new IntentFilter(); intentFilter.addAction("com.example.broadcastbestpractice.FORCE_OFFLINE"); receiver = new ForceOfflineReceiver(); registerReceiver(receiver, intentFilter); &#125; @Override protected void onPause() &#123; super.onPause(); if (receiver != null) &#123; unregisterReceiver(receiver); receiver = null; &#125; &#125; @Override protected void onDestroy() &#123; super.onDestroy(); ActivityCollector.removeActivity(this); &#125; class ForceOfflineReceiver extends BroadcastReceiver &#123; @Override public void onReceive(final Context context, Intent intent) &#123; AlertDialog.Builder builder = new AlertDialog.Builder(context);//创建一个对话框 builder.setTitle("Warning"); builder.setMessage("You are forced to be offline. Please try to login again."); builder.setCancelable(false); //注册确定按钮 builder.setPositiveButton("OK", new DialogInterface.OnClickListener() &#123;//给ok按钮设置点击事件 @Override public void onClick(DialogInterface dialog, int which) &#123; ActivityCollector.finishAll(); // 销毁所有活动 Intent intent = new Intent(context, LoginActivity.class); context.startActivity(intent); // 重新启动LoginActivity &#125; &#125;); builder.show(); &#125; &#125;&#125; 将LoginActivity作为主界面123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;activity android:name=".LoginActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.MAIN" /&gt; &lt;category android:name="android.intent.category.LAUNCHER" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt;``` 完工!chaper6 实现记住密码功能```javapublic class LoginActivity extends BaseActivity &#123; private SharedPreferences pref; private SharedPreferences.Editor editor; private EditText accountEdit; private EditText passwordEdit; private Button login; private CheckBox rememberPass; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_login); pref = PreferenceManager.getDefaultSharedPreferences(this); accountEdit = (EditText) findViewById(R.id.account); passwordEdit = (EditText) findViewById(R.id.password); rememberPass = (CheckBox) findViewById(R.id.remember_pass); login = (Button) findViewById(R.id.login); boolean isRemember = pref.getBoolean("remember_password", false); if (isRemember) &#123; // 将账号和密码都设置到文本框中 String account = pref.getString("account", ""); String password = pref.getString("password", ""); accountEdit.setText(account); passwordEdit.setText(password); rememberPass.setChecked(true); &#125; login.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; String account = accountEdit.getText().toString(); String password = passwordEdit.getText().toString(); // 如果账号是admin且密码是123456，就认为登录成功 if (account.equals("admin") &amp;&amp; password.equals("123456")) &#123; editor = pref.edit(); if (rememberPass.isChecked()) &#123; // 检查复选框是否被选中 editor.putBoolean("remember_password", true); editor.putString("account", account); editor.putString("password", password); &#125; else &#123; editor.clear(); &#125; editor.apply(); Intent intent = new Intent(LoginActivity.this, MainActivity.class); startActivity(intent); finish(); &#125; else &#123; Toast.makeText(LoginActivity.this, "account or password is invalid", Toast.LENGTH_SHORT).show(); &#125; &#125; &#125;); &#125;&#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FragmentBestPractise]]></title>
    <url>%2F2017%2F07%2F24%2FFragmentBestPractise%2F</url>
    <content type="text"><![CDATA[学习目的：制作简易版新闻应用1.为RecycleView添加依赖1compile 'com.android.support:recyclerview-v7:24.2.1' 2.新建News类1234567891011121314151617181920212223public class News &#123; private String title; private String content; public String getTitle() &#123; return title; &#125; public void setTitle(String title) &#123; this.title = title; &#125; public String getContent() &#123; return content; &#125; public void setContent(String content) &#123; this.content = content; &#125;&#125; 3.新建布局news_content_frag1234567891011121314151617181920212223242526272829303132333435363738394041&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;LinearLayout android:id="@+id/visibility_layout" android:layout_width="match_parent" android:layout_height="match_parent" android:orientation="vertical" android:visibility="invisible" &gt; &lt;TextView android:id="@+id/news_title" android:layout_width="match_parent" android:layout_height="wrap_content" android:gravity="center" android:padding="10dp" android:textSize="20sp" /&gt; &lt;View//分割线 android:layout_width="match_parent" android:layout_height="1dp" android:background="#000" /&gt; &lt;TextView android:id="@+id/news_content" android:layout_width="match_parent" android:layout_height="0dp" android:layout_weight="1" android:padding="15dp" android:textSize="18sp" /&gt; &lt;/LinearLayout&gt; &lt;View android:layout_width="1dp" android:layout_height="match_parent" android:layout_alignParentLeft="true" android:background="#000" /&gt;&lt;/RelativeLayout&gt; 4.新建NewsContentFragment //加载布局 套路123456789101112131415161718192021public class NewsContentFragment extends Fragment &#123; private View view; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; view = inflater.inflate(R.layout.news_content_frag, container, false);//R.layout 布局文件 return view; &#125; public void refresh(String newsTitle, String newsContent) &#123; View visibilityLayout = view.findViewById(R.id.visibility_layout);//R.id 布局文件中的子布局 如LinerLayout visibilityLayout.setVisibility(View.VISIBLE); TextView newsTitleText = (TextView) view.findViewById (R.id.news_title); TextView newsContentText = (TextView) view.findViewById(R.id.news_content); newsTitleText.setText(newsTitle); // 刷新新闻的标题 newsContentText.setText(newsContent); // 刷新新闻的内容 &#125;&#125; 5.新建newsContentAcyivity及其布局文件news_content news_content 123456&lt;fragment android:id="@+id/news_content_fragment" android:name="com.example.fragmentbestpractice.NewsContentFragment" android:layout_width="match_parent" android:layout_height="match_parent" /&gt; NewsContentActivity类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104public class NewsContentActivity extends AppCompatActivity &#123; public static void actionStart(Context context, String newsTitle, String newsContent) &#123;//启动活动的最佳写法 Intent intent = new Intent(context, NewsContentActivity.class); intent.putExtra("news_title", newsTitle); intent.putExtra("news_content", newsContent); context.startActivity(intent); &#125; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.news_content); String newsTitle = getIntent().getStringExtra("news_title"); // 获取传入的新闻标题 String newsContent = getIntent().getStringExtra("news_content"); // 获取传入的新闻内容 NewsContentFragment newsContentFragment = (NewsContentFragment)getSupportFragmentManager().findFragmentById(R.id.news_content_fragment); newsContentFragment.refresh(newsTitle, newsContent); // 刷新NewsContentFragment界面 &#125;&#125;``` &lt;h3&gt;6.新建layout-sw600dp文件夹 新建activity_main文件&lt;/h3&gt;- 双页```java&lt;fragment android:id="@+id/news_title_fragment" android:name="com.example.fragmentbestpractice.NewsTitleFragment" android:layout_width="0dp" android:layout_height="match_parent" android:layout_weight="1" /&gt; &lt;FrameLayout android:id="@+id/news_content_layout" android:layout_width="0dp" android:layout_height="match_parent" android:layout_weight="3" &gt; &lt;fragment android:id="@+id/news_content_fragment" android:name="com.example.fragmentbestpractice.NewsContentFragment" android:layout_width="match_parent" android:layout_height="match_parent" /&gt; &lt;/FrameLayout&gt;``` &lt;h3&gt;7.在NewsTitleFragment类中新建RecyclerView的适配器内部类NewsAdaper&lt;/h3&gt;- 适配器代码千篇一律，只是参数有变化```javaclass NewsAdapter extends RecyclerView.Adapter&lt;NewsAdapter.ViewHolder&gt; &#123; private List&lt;News&gt; mNewsList; class ViewHolder extends RecyclerView.ViewHolder &#123; TextView newsTitleText; public ViewHolder(View view) &#123; super(view); newsTitleText = (TextView) view.findViewById(R.id.news_title); &#125; &#125; public NewsAdapter(List&lt;News&gt; newsList) &#123; mNewsList = newsList; &#125; @Override public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.news_item, parent, false); final ViewHolder holder = new ViewHolder(view); view.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; News news = mNewsList.get(holder.getAdapterPosition()); if (isTwoPane) &#123; NewsContentFragment newsContentFragment = (NewsContentFragment) getFragmentManager().findFragmentById(R.id.news_content_fragment); newsContentFragment.refresh(news.getTitle(), news.getContent()); &#125; else &#123; NewsContentActivity.actionStart(getActivity(), news.getTitle(), news.getContent()); &#125; &#125; &#125;); return holder; &#125; @Override public void onBindViewHolder(ViewHolder holder, int position) &#123; News news = mNewsList.get(position); holder.newsTitleText.setText(news.getTitle()); &#125; @Override public int getItemCount() &#123; return mNewsList.size(); &#125; &#125;&#125; 8.NewsTitleFragment类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class NewsTitleFragment extends Fragment &#123; private boolean isTwoPane; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; View view = inflater.inflate(R.layout.news_title_frag, container, false); RecyclerView newsTitleRecyclerView = (RecyclerView) view.findViewById(R.id.news_title_recycler_view); LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity()); newsTitleRecyclerView.setLayoutManager(layoutManager); NewsAdapter adapter = new NewsAdapter(getNews()); newsTitleRecyclerView.setAdapter(adapter); return view; &#125; @Override public void onActivityCreated(Bundle savedInstanceState) &#123; super.onActivityCreated(savedInstanceState); if (getActivity().findViewById(R.id.news_content_layout) != null) &#123; isTwoPane = true; // 可以找到news_content_layout布局时，为双页模式 &#125; else &#123; isTwoPane = false; // 找不到news_content_layout布局时，为单页模式 &#125; &#125; private List&lt;News&gt; getNews() &#123; List&lt;News&gt; newsList = new ArrayList&lt;&gt;(); for (int i = 1; i &lt;= 50; i++) &#123; News news = new News(); news.setTitle("This is news title " + i); news.setContent(getRandomLengthContent("This is news content " + i + ". ")); newsList.add(news); &#125; return newsList; &#125; private String getRandomLengthContent(String content) &#123;//设置随机信息 Random random = new Random(); int length = random.nextInt(20) + 1; StringBuilder builder = new StringBuilder(); for (int i = 0; i &lt; length; i++) &#123; builder.append(content); &#125; return builder.toString(); &#125;&#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FragmentText]]></title>
    <url>%2F2017%2F07%2F23%2FFragmentText%2F</url>
    <content type="text"><![CDATA[学习目的：1.碎片的简单用法 2.动态添加碎片(创建布局需要加载) 3.碎片 活动之间进行通信 4.加载布局技巧1.碎片的简单用法 1234567891011121314151617181920212223242526272829303132333435类LeftFragment（创建布局需要加载 ，活动也是一样）public class LeftFragment extends Fragment &#123; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container,//重写onCreateView()方法 Bundle savedInstanceState) &#123; View view = inflater.inflate(R.layout.left_fragment, container, false);//将布局动态加载进来 return view; &#125;&#125;类RightFragment（创建布局需要加载 ，活动也是一样）public class RightFragment extends Fragment &#123; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container,//重写onCreateView()方法 Bundle savedInstanceState) &#123; Log.d(TAG, "onCreateView"); View view = inflater.inflate(R.layout.right_fragment, container, false);//将布局动态加载进来 return view; &#125;布局 &lt;fragment android:id="@+id/left_fragment" android:name="com.example.fragmenttest.LeftFragment" android:layout_width="0dp" android:layout_height="match_parent" android:layout_weight="1" /&gt; &lt;fragment android:id="@+id/right_fragment" android:name="com.example.fragmenttest.RightFragment" android:layout_width="0dp" android:layout_height="match_parent" android:layout_weight="3" /&gt; 2.动态添加碎片 创建待添加的碎片实例 获取FragmentManager 开启一个事物 向容器内添加或替换碎片 提交事务 12345678910111213141516171819202122232425262728293031323334353637383940414243444546布局&lt;fragment android:id="@+id/left_fragment" android:name="com.example.fragmenttest.LeftFragment" android:layout_width="match_parent" android:layout_height="match_parent"/&gt;&lt;FrameLayout//这种布局把所有控件放在左上角 android:id="@+id/right_layout" android:layout_width="0dp" android:layout_height="match_parent" android:layout_weight="1"&gt;&lt;/FrameLayout&gt;向FrameLayout里添加内容public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button button = (Button) findViewById(R.id.button); button.setOnClickListener(this); replaceFragment(new RightFragment());//动态添加RightFragment &#125; @Override public void onClick(View v) &#123; switch (v.getId()) &#123; case R.id.button: replaceFragment(new AnotherRightFragment());//动态添加AnotherRightFragment break; default: break; &#125; &#125; private void replaceFragment(Fragment fragment) &#123; FragmentManager fragmentManager = getSupportFragmentManager();//获取FragmentManager FragmentTransaction transaction = fragmentManager.beginTransaction();//开启一个事物 transaction.replace(R.id.right_layout, fragment);//向容器内替换碎片 transaction.addToBackStack(null);//模拟返回栈（碎片中 按back会直接退出 不会返回上一步） transaction.commit();//提交事务 &#125;&#125; 3.碎片 活动之间进行通信 （从布局文件获取碎片实例）调用FragmentManager的findFragmentById() 可以在活动得到相应碎片实例 然后就可调用 1RightFragment rightFragment=(RightFragment)getFragmentManager().findFragmentById(R.id.right_fragment); （碎片调用实例） 用getActivity（） 1MainActivity mainActivity=(MainActivity)getActivity(); 4.碎片的生命周期 onAtach() onCreateView() omActivityCreated() onDestroyView() onDeath() 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273public class RightFragment extends Fragment &#123; public static final String TAG = "RightFragment"; @Override public void onAttach(Context context) &#123; super.onAttach(context); Log.d(TAG, "onAttach"); &#125; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); Log.d(TAG, "onCreate"); &#125; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; Log.d(TAG, "onCreateView"); View view = inflater.inflate(R.layout.right_fragment, container, false); return view; &#125; @Override public void onActivityCreated(Bundle savedInstanceState) &#123; super.onActivityCreated(savedInstanceState); Log.d(TAG, "onActivityCreated"); &#125; @Override public void onStart() &#123; super.onStart(); Log.d(TAG, "onStart"); &#125; @Override public void onResume() &#123; super.onResume(); Log.d(TAG, "onResume"); &#125; @Override public void onPause() &#123; super.onPause(); Log.d(TAG, "onPause"); &#125; @Override public void onStop() &#123; super.onStop(); Log.d(TAG, "onStop"); &#125; @Override public void onDestroyView() &#123; super.onDestroyView(); Log.d(TAG, "onDestroyView"); &#125; @Override public void onDestroy() &#123; super.onDestroy(); Log.d(TAG, "onDestroy"); &#125; @Override public void onDetach() &#123; super.onDetach(); Log.d(TAG, "onDetach"); &#125;&#125; 4.加载布局技巧 1.限定符small nomal large xlarge(单页手机模式 双页平板模式) 新建layout-large文件夹 在下面创建布局 运行时根据设备自动识别 2.分辨率ldpi hdpi xhdpi xxhdpi 新建layout-sw600dp文件夹 然后新建布局 运行时根据设备自动识别 3.方向 land port 新建layout-land文件夹 然后新建布局 运行时根据设备自动识别]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UIBestPractise]]></title>
    <url>%2F2017%2F07%2F22%2FUIBestPractise%2F</url>
    <content type="text"><![CDATA[学习目的：1.编写简单聊天软件思路：1.主界面：输入框 发送按钮 2.新建Msg类 3.编写RecyclerView的子布局 4.可见属性（使发送 接受的消息在同一布局内）5.创建RecycleView的适配类 1.主界面(简单 ，不赘述)123456789101112131415161718192021222324252627282930313233&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#d8e0e8&quot; &gt; &lt;android.support.v7.widget.RecyclerView //用于显示聊天内容 android:id=&quot;@+id/msg_recycler_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; &gt; &lt;EditText android:id=&quot;@+id/input_text&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:hint=&quot;Type something here&quot; android:maxLines=&quot;2&quot; /&gt; &lt;Button android:id=&quot;@+id/send&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Send&quot; /&gt; &lt;/LinearLayout&gt;&lt;/LinearLayout&gt; 2.新建Msg类123456789101112131415161718192021222324ublic class Msg &#123; public static final int TYPE_RECEIVED = 0; public static final int TYPE_SENT = 1; private String content;//消息内容 private int type;//消息类型（TYPE_RECEIVED or TYPE_SENT ） public Msg(String content, int type) &#123; this.content = content; this.type = type; &#125; public String getContent() &#123; return content; &#125; public int getType() &#123; return type; &#125;&#125; 3.编写RecyclerView的子布局12345678910111213141516171819202122232425262728293031323334353637383940&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:padding=&quot;10dp&quot; &gt; &lt;LinearLayout android:id=&quot;@+id/left_layout&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;left&quot; android:background=&quot;@drawable/message_left&quot; &gt; &lt;TextView android:id=&quot;@+id/left_msg&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center&quot; android:layout_margin=&quot;10dp&quot; android:textColor=&quot;#fff&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id=&quot;@+id/right_layout&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;right&quot; android:background=&quot;@drawable/message_right&quot; &gt; &lt;TextView android:id=&quot;@+id/right_msg&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center&quot; android:layout_margin=&quot;10dp&quot; /&gt; &lt;/LinearLayout&gt;&lt;/LinearLayout&gt; 5.创建RecycleView的适配类MsgAdaper123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class MsgAdapter extends RecyclerView.Adapter&lt;MsgAdapter.ViewHolder&gt; &#123; private List&lt;Msg&gt; mMsgList; static class ViewHolder extends RecyclerView.ViewHolder &#123; LinearLayout leftLayout; LinearLayout rightLayout; TextView leftMsg; TextView rightMsg; public ViewHolder(View view) &#123; super(view); leftLayout = (LinearLayout) view.findViewById(R.id.left_layout); rightLayout = (LinearLayout) view.findViewById(R.id.right_layout); leftMsg = (TextView) view.findViewById(R.id.left_msg); rightMsg = (TextView) view.findViewById(R.id.right_msg); &#125; &#125; public MsgAdapter(List&lt;Msg&gt; msgList) &#123; mMsgList = msgList; &#125; @Override public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.msg_item, parent, false); return new ViewHolder(view); &#125; @Override public void onBindViewHolder(ViewHolder holder, int position) &#123; Msg msg = mMsgList.get(position); if (msg.getType() == Msg.TYPE_RECEIVED) &#123; // 如果是收到的消息，则显示左边的消息布局，将右边的消息布局隐藏 holder.leftLayout.setVisibility(View.VISIBLE); holder.rightLayout.setVisibility(View.GONE); holder.leftMsg.setText(msg.getContent()); &#125; else if(msg.getType() == Msg.TYPE_SENT) &#123; // 如果是发出的消息，则显示右边的消息布局，将左边的消息布局隐藏 holder.rightLayout.setVisibility(View.VISIBLE); holder.leftLayout.setVisibility(View.GONE); holder.rightMsg.setText(msg.getContent()); &#125; &#125; 6.MainActivity类 private List&lt;Msg&gt; msgList = new ArrayList&lt;Msg&gt;(); private EditText inputText; private Button send; private RecyclerView msgRecyclerView; private MsgAdapter adapter; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); initMsgs(); // 初始化消息数据 inputText = (EditText) findViewById(R.id.input_text); send = (Button) findViewById(R.id.send); msgRecyclerView = (RecyclerView) findViewById(R.id.msg_recycler_view);//都 LinearLayoutManager layoutManager = new LinearLayoutManager(this);//是 msgRecyclerView.setLayoutManager(layoutManager);//套 adapter = new MsgAdapter(msgList);//路 msgRecyclerView.setAdapter(adapter);//啊 send.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { String content = inputText.getText().toString(); if (!&quot;&quot;.equals(content)) { Msg msg = new Msg(content, Msg.TYPE_SENT); msgList.add(msg); adapter.notifyItemInserted(msgList.size() - 1); // 当有新消息时，刷新ListView中的显示 //不是RecycleView吗？ msgRecyclerView.scrollToPosition(msgList.size() - 1); // 将ListView定位到最后一行 //不是RecycleView吗？ inputText.setText(&quot;&quot;); // 清空输入框中的内容 } } });]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RecycleView]]></title>
    <url>%2F2017%2F07%2F21%2FRecycleView%2F</url>
    <content type="text"><![CDATA[学习目的：1.RecycleView的基本用法 2.实现横向列表 3.实现瀑布流 4.RecycleView的点击事件（需添加依赖库） 1.RecycleView的基本用法（不止可实现列表 还可实现瀑布流等） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788添加一行代码（依赖）dependencies &#123; compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;]) testCompile &apos;junit:junit:4.12&apos; compile &apos;com.android.support:appcompat-v7:24.2.1&apos; compile &apos;com.android.support:recyclerview-v7:24.2.1&apos;//recycleview定义在suprot库中 需添加依赖库&#125;创建RecycleView布局&lt;android.support.v7.widget.RecyclerView android:id=&quot;@+id/recycler_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt;重写FruitAdaper类（思路：ViewHolder获取子项布局ID再设置监听器）public class FruitAdapter extends RecyclerView.Adapter&lt;FruitAdapter.ViewHolder&gt;&#123;// 中括号里一般是类名 泛型 private List&lt;Fruit&gt; mFruitList;//定义全局变量 static class ViewHolder extends RecyclerView.ViewHolder &#123;//RecycleView有ViewHolder内部类 View fruitView; ImageView fruitImage; TextView fruitName; public ViewHolder(View view) &#123;//子项的布局 super(view); fruitView = view; fruitImage = (ImageView) view.findViewById(R.id.fruit_image); fruitName = (TextView) view.findViewById(R.id.fruit_name); &#125; &#125; public FruitAdapter(List&lt;Fruit&gt; fruitList) &#123; mFruitList = fruitList; &#125; @Override public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item, parent, false); final ViewHolder holder = new ViewHolder(view); holder.fruitView.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; int position = holder.getAdapterPosition(); Fruit fruit = mFruitList.get(position); Toast.makeText(v.getContext(), &quot;you clicked view &quot; + fruit.getName(), Toast.LENGTH_SHORT).show(); &#125; &#125;); holder.fruitImage.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; int position = holder.getAdapterPosition(); Fruit fruit = mFruitList.get(position); Toast.makeText(v.getContext(), &quot;you clicked image &quot; + fruit.getName(), Toast.LENGTH_SHORT).show(); &#125; &#125;); return holder; &#125; @Override public void onBindViewHolder(ViewHolder holder, int position) &#123;//对子项数据进行赋值 Fruit fruit = mFruitList.get(position); holder.fruitImage.setImageResource(fruit.getImageId()); holder.fruitName.setText(fruit.getName()); &#125; @Override public int getItemCount() &#123; return mFruitList.size(); &#125; MainActivity类 public class MainActivity extends AppCompatActivity &#123; private List&lt;Fruit&gt; fruitList = new ArrayList&lt;Fruit&gt;(); @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); initFruits();//初始化数据 自定义方法 RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view); LinearLayoutManager layoutManager=new LinearLayoutManager(this);//指定布局方式 可以是横向 竖向 此为竖向 recyclerView.setLayoutManager(layoutManager);//启动自定义布局 FruitAdapter adapter = new FruitAdapter(fruitList); recyclerView.setAdapter(adapter); &#125; 2.实现横向列表（只用加一行代码）123456RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);LinearLayoutManager layoutManager=new LinearLayoutManager(this);//指定布局方式 可以是横向 竖向 此为竖向layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);//横向线性布局 默认为竖向recyclerView.setLayoutManager(layoutManager);//启动自定义布局FruitAdapter adapter = new FruitAdapter(fruitList);recyclerView.setAdapter(adapter); 3.实现瀑布流 (只用加一行代码)1234567RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);LinearLayoutManager layoutManager=new LinearLayoutManager(this);//指定布局方式 可以是横向 竖向 此为竖向StaggeredGridLayoutManager layoutManager = new StaggeredGridLayoutManager(3, StaggeredGridLayoutManager.VERTICAL);//瀑布流 默认为竖向recyclerView.setLayoutManager(layoutManager);//启动自定义布局FruitAdapter adapter = new FruitAdapter(fruitList);recyclerView.setAdapter(adapter); 4.RecycleView的点击事件1234567891011121314151617181920212223242526272829303132333435363738394041不同于ListView（setOnItemClickListener） RecycleView没有点击事件static class ViewHolder extends RecyclerView.ViewHolder &#123;//RecycleView有ViewHolder内部类 View fruitView;//保存最外层子布局实例 ImageView fruitImage; TextView fruitName; public ViewHolder(View view) &#123;//子项的布局 super(view); fruitView = view;//保存最外层子布局实例 fruitImage = (ImageView) view.findViewById(R.id.fruit_image); fruitName = (TextView) view.findViewById(R.id.fruit_name); &#125;&#125;public FruitAdapter(List&lt;Fruit&gt; fruitList) &#123; mFruitList = fruitList;&#125;@Overridepublic ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item, parent, false); final ViewHolder holder = new ViewHolder(view); holder.fruitView.setOnClickListener(new View.OnClickListener() &#123;//给RecycleViewS设置点击事件 @Override public void onClick(View v) &#123; int position = holder.getAdapterPosition(); Fruit fruit = mFruitList.get(position); Toast.makeText(v.getContext(), &quot;you clicked view &quot; + fruit.getName(), Toast.LENGTH_SHORT).show(); &#125; &#125;); holder.fruitImage.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; int position = holder.getAdapterPosition(); Fruit fruit = mFruitList.get(position); Toast.makeText(v.getContext(), &quot;you clicked image &quot; + fruit.getName(), Toast.LENGTH_SHORT).show(); &#125; &#125;); return holder;&#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[logcat及log]]></title>
    <url>%2F2017%2F07%2F20%2Flogcat%E5%8F%8Alog%2F</url>
    <content type="text"><![CDATA[log12345log.v()//verbose 琐碎日志log.d()//debug调试信息log.i()//比较重要的数据 用户数据log.w()//warnlog.e()//error logcat and 过滤器]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[build.gradle文件详解]]></title>
    <url>%2F2017%2F07%2F20%2Fbuild.gradle%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[build.gradle(项目目录下)123456789101112131415161718192021buildscript &#123; repositories &#123; jcenter()//代码托管仓库，声明后可引用jcenter上的开源项目 &#125; dependencies &#123; classpath &apos;com.android.tools.build:gradle:2.2.0&apos;//“依赖”文件使用classpath声明一个gradle插件 声明的原因：让gradle知道构建的是Android java 还是c++ //com.android.tools.build:gradle:2.2.0说明构建的是android项目 // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125;allprojects &#123; repositories &#123; jcenter()//代码托管仓库，声明后可引用jcenter上的开源项目 &#125;&#125;task clean(type: Delete) &#123; delete rootProject.buildDir&#125; build.gradle(项目目录下)12345678910111213141516171819202122232425apply plugin: &apos;com.android.application&apos;//应用一个插件 两个值可选 应用程序模块 （可直接运行） com.android.library库模块（作为代码库依附别的库运行）android &#123; compileSdkVersion 24 //编译所用sdk版本 buildToolsVersion &quot;24.0.2&quot;//构建工具版本 defaultConfig &#123;//细节配置 applicationId &quot;com.example.helloworld&quot;//项目包名 minSdkVersion 15//最低sdk版本 targetSdkVersion 24//充分测试的sdk版本 versionCode 1//项目版本号 versionName &quot;1.0&quot;//项目版本名 &#125; buildTypes &#123;//生成安装文件的相关配置 release &#123;//release指定生产正式版安装文件的配置 debug闭包指定生成测试版安装文件的配置 minifyEnabled false//指定是否对项目的代码进行混淆 proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;//proguardFiles指定混淆的规则文件 //proguard-android.txt通用混淆规则 //proguard-rules.pro自定义混淆规则 &#125; &#125;&#125;dependencies &#123;//指定项目的所有依赖文件 compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)//本地依赖声明 compile &apos;com.android.support:appcompat-v7:24.2.1&apos;//远程依赖声明 testCompile &apos;junit:junit:4.12&apos;//声明测试用例库&#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ActivityText]]></title>
    <url>%2F2017%2F07%2F20%2FActivityText%2F</url>
    <content type="text"><![CDATA[学习目的：1.了解standard启动模式 2.singleTop启动模式 3.singleTask启动模式 4.singleInstance启动模式5.实用技巧：知晓当前活动 随时退出程序 启动活动最佳写法 standard启动模式123456789Android是利用返回栈来管理活动的！在standard模式下，每启用一个新活动就会在返回栈入栈并置于栈顶。如：button1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123;Intent intent = new Intent(FirstActivity.this, SecondActivity.class);startActivity(intent);&#125;按三次返回键才能退出！ singleTop启动模式12345当栈顶是该活动不创建新实例（与standard的不同之处）android:launchMode=&quot;singleTop&quot;//需要在活动先声明代码同上仅一次back可退出程序 singleTask启动模式12解决重复创建栈顶活动的问题！使某个活动在上下文之存在一个实例。android:launchMode=&quot;singleTask&quot;//需要在活动先声明 singleInstance启动模式12启用一个新的返回栈管理这个活动，解决共享活动实例的问题！android:launchMode=&quot;singleInstance&quot;//需要在活动先声明 知晓当前活动123456789public class BaseActivity extends AppCompatActivity &#123;//无需注册，TM就是个java类 @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); Log.d(&quot;BaseActivity&quot;, getClass().getSimpleName()); //需要让BaseActivity成为所有类的父类，因其继承AppCompatActivity,所以其他类功能不变 &#125;&#125; 随时退出程序(思路：创建一个集合类对所有活动进行管理) public class ActivityCollector { public static List&lt;Activity&gt; activities = new ArrayList&lt;&gt;();//用List存储活动 public static void addActivity(Activity activity) {//添加活动 activities.add(activity); } public static void removeActivity(Activity activity) {//不多说，看来add remove finish方法都写好啦 activities.remove(activity); } public static void finishAll() { for (Activity activity : activities) {//销毁全部活动 if (!activity.isFinishing()) { activity.finish(); } } } } 随时退出举例： Button button3 = (Button) findViewById(R.id.button_3); button3.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { ActivityCollector.finishAll();}} 启动活动最佳写法 为了解决 如secondActivity不是你开发的，但你需要知道启动这个活动需要传递那些数据 等问题 原写法： Intent intent = new Intent(FristActivity.this, SecondActivity.class); intent.putExtra(&quot;param1&quot;, data1); intent.putExtra(&quot;param2&quot;, data2); startActivity(intent); 改进写法： public class SecondActivity extends BaseActivity { public static void actionStart(Context context, String data1, String data2) { Intent intent = new Intent(context, SecondActivity.class); intent.putExtra(&quot;param1&quot;, data1);//intent传递的数据 intent.putExtra(&quot;param2&quot;, data2); context.startActivity(intent);//context 上下文 } } 只需一行代码启动SecondActivity SecondActivity.actionStart(FirstActivity.this, &quot;data1&quot;, &quot;data2&quot;);]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ListView]]></title>
    <url>%2F2017%2F07%2F20%2FListView%2F</url>
    <content type="text"><![CDATA[学习目的：1.了解ListView（列表）的用法 2.定制listview的界面(自定义适配器) 3.提升ListView的运行效率4.ListView的点击事件 ListView（列表）的用法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566ListView需要大量数据 来源数据库 或自定义public class MainActivity extends AppCompatActivity &#123; private String[] data=&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;b&quot;,&quot;c&quot;,&quot;b&quot;,&quot;c&quot;,&quot;b&quot;,&quot;c&quot;,&quot;b&quot;,&quot;c&quot;,&quot;b&quot;,&quot;c&quot;&#125;; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ArraryAdapter&lt;String&gt;adapter = new ArraryAdapter(MainActivity.this, R.layout.fruit_item, data);//第一个参数 上下文 布局ID 数据名//ArraryAdapter数组适配器 ListView listView = (ListView) findViewById(R.id.list_view);//导入布局id listView.setAdapter(adapter);//启动适配器 &#125; &#125;``` &lt;h3&gt;定制listview的界面&lt;/h3&gt;&lt;img src=&apos;http://img.027cgb.cn/20170722/20177222181775731906.png&apos; /&gt;```Android如：列表每一项包含图片及文字详解每一步：1.两个布局activity_main 及fruit_item(简单，不赘述)2.fruit类（简单，不赘述）public class Fruit &#123; private String name; private int imageId; public Fruit(String name, int imageId) &#123; this.name = name; this.imageId = imageId; &#125; public String getName() &#123; return name; &#125; public int getImageId() &#123; return imageId; &#125;&#125;3.FruitAdaper类public class FruitAdapter extends ArrayAdapter&lt;Fruit&gt; &#123;//继承ArrayAdaper 从而使之能调用适配器需要的函数 //泛型为fruit类 private int resourceId; public FruitAdapter(Context context, int textViewResourceId, List&lt;Fruit&gt; objects) &#123;//上下文 布局id 列表对象 super(context, textViewResourceId, objects);//调用父类构造函数 及FruitAdapter()等同于ArrayAdaper() resourceId = textViewResourceId;//之所以另定义一个变量来获得textViewResourceId,是怕使用过程中将之改变 &#125;// 重写getView方法(获取到视图类对象的指针，并转换成CAdaptoneViewView 的指针) public View getView(int position, View convertView, ViewGroup parent) &#123;/ /每个子项滚动到屏幕内都会被调用 Fruit fruit = getItem(position); // 获取当前项的Fruit实例 View view=layoutInflater.from(getContext()).inflate(resourceId,parent,false);//为子项加载我们传入的布局 ImageView fruitImage=(ImageView)view.findViewById(R.id.fruit_image);//ImageView内部类 TextView fruitName=(TextView)view.findViewById(R.id.fruit_name);//TextView内部类 fruitImage.setImageResouceId(fruit.getImageId()); fruitName.setText(fruit.getName()); return view; &#125; 4.MianActivity类12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class MainActivity extends AppCompatActivity &#123; private List&lt;Fruit&gt; fruitList = new ArrayList&lt;Fruit&gt;();//用ArrayList（）方法声明一个fruitList列表 指定泛型为Fruit @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); initFruits(); // 初始化水果数据 FruitAdapter adapter = new FruitAdapter(MainActivity.this, R.layout.fruit_item, fruitList);//第一个参数 传入水果对象 布局ID 水果列表 ListView listView = (ListView) findViewById(R.id.list_view);//导入布局id listView.setAdapter(adapter);//启动适配器 listView.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123;//给listview设置监听器 @Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123; Fruit fruit = fruitList.get(position); Toast.makeText(MainActivity.this, fruit.getName(), Toast.LENGTH_SHORT).show();//设置逻辑 &#125; &#125;); &#125; private void initFruits() &#123; for (int i = 0; i &lt; 2; i++) &#123;//循环两次是出于谨慎 Fruit apple = new Fruit(&quot;Apple&quot;, R.drawable.apple_pic); fruitList.add(apple); Fruit banana = new Fruit(&quot;Banana&quot;, R.drawable.banana_pic); fruitList.add(banana); Fruit orange = new Fruit(&quot;Orange&quot;, R.drawable.orange_pic); fruitList.add(orange); Fruit watermelon = new Fruit(&quot;Watermelon&quot;, R.drawable.watermelon_pic); fruitList.add(watermelon); Fruit pear = new Fruit(&quot;Pear&quot;, R.drawable.pear_pic); fruitList.add(pear); Fruit grape = new Fruit(&quot;Grape&quot;, R.drawable.grape_pic); fruitList.add(grape); Fruit pineapple = new Fruit(&quot;Pineapple&quot;, R.drawable.pineapple_pic); fruitList.add(pineapple); Fruit strawberry = new Fruit(&quot;Strawberry&quot;, R.drawable.strawberry_pic); fruitList.add(strawberry); Fruit cherry = new Fruit(&quot;Cherry&quot;, R.drawable.cherry_pic); fruitList.add(cherry); Fruit mango = new Fruit(&quot;Mango&quot;, R.drawable.mango_pic); fruitList.add(mango); &#125; &#125; 3.ListView的优化123456789101112131415161718192021222324252627282930需要优化的点：1.getView每一次滑动都要将布局重载！（效率低）2.每次getView（）都会通过findViewById获取一次控件实例优化思路 使用convertView参数（布局缓存重用） 新建viewHolder集合类优化后代码：public View getView(int position, View convertView, ViewGroup parent) &#123;//每个子项滚动到屏幕内都会被调用 Fruit fruit = getItem(position); // 获取当前项的Fruit实例 View view; ViewHolder viewHolder; if (convertView == null) &#123; view = LayoutInflater.from(getContext()).inflate(resourceId, parent, false); viewHolder = new ViewHolder(); viewHolder.fruitImage = (ImageView) view.findViewById (R.id.fruit_image); viewHolder.fruitName = (TextView) view.findViewById (R.id.fruit_name); view.setTag(viewHolder); // 将ViewHolder存储在View中 &#125; else &#123; view = convertView; viewHolder = (ViewHolder) view.getTag(); // 重新获取ViewHolder &#125; viewHolder.fruitImage.setImageResource(fruit.getImageId()); viewHolder.fruitName.setText(fruit.getName()); return view; &#125; class ViewHolder &#123; ImageView fruitImage; TextView fruitName; &#125; 4.ListView的点击事件1234567891011121314151617简单，不赘述。 protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); initFruits(); // 初始化水果数据 FruitAdapter adapter = new FruitAdapter(MainActivity.this, R.layout.fruit_item, fruitList);//第一个参数 传入水果对象 布局ID 水果列表 ListView listView = (ListView) findViewById(R.id.list_view);//导入布局id listView.setAdapter(adapter);//启动适配器 listView.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123;//给listview设置监听器 @Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123; Fruit fruit = fruitList.get(position); Toast.makeText(MainActivity.this, fruit.getName(), Toast.LENGTH_SHORT).show();//设置逻辑 &#125; &#125;); &#125;]]></content>
      <tags>
        <tag>CODE 2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Andriod sdk 更新问题]]></title>
    <url>%2F2017%2F06%2F18%2FANdriod%20sdk%20%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题描述 123456使用SDK Manager更新时出现问题Failed to fetch URL https://dl-ssl.google.com/android/repository/repository-6.xml, reason: Connection to https://dl-ssl.google.com refusedFailed to fetch URL http://dl-ssl.google.com/android/repository/addons_list-1.xml, reason: Connection to http://dl-ssl.google.com refusedFailed to fetch URL https://dl-ssl.google.com/android/repository/addons_list-1.xml, reason: hostname in certificate didn't match: &lt;dl-ssl.google.com&gt; != &lt;www.google.com&gt;更新ADT时无法解析https://dl-ssl.google.com/android/eclipse 解决办法 由于某些众所周知又无法理解的原因，我们大陆使用Google的服务会出现种种问题，譬如Android开发也会出现阻碍。不过首先要说明的是一般情况下使用SDK Manager更新或者更新Eclipse的ADT插件是没有问题的，我以前也能正常更新，但是昨天不知道节点抽什么风，压根无法连接服务器，出现了上边的种种问题，下面说一下如果网络抽风的话应该如何解决问题。 第一种方法一劳永逸，直接配置VPN，但是现在想找个速度快又稳定还免费的VPN实在不易，尤其是更新SDK，以几kb/s的速度一个文件需要400多分钟，所以也就放弃了VPN。 另一种方法是使用http协议而不是https协议，因为https协议进行了加密处理，大陆因为无法审查，直接封死，而http协议则进行过滤处理，如果不访问乱七八糟的东西，更新个SDK还是没问题的。在SDK Manager下Tools-&gt;Options打开了SDK Manager的Settings，选中“Force https://… sources to be fetched using http://…”，强制使用http协议。而在更新ADT插件的时候则使用网址http://dl-ssl.google.com/android/eclipse，而不是https://dl-ssl.google.com/android/eclipse，这个在官方开发文档里也有介绍。但是昨天的情况就是使用http协议也无法访问。 再说一个比较麻烦的方法，就是直接打开https://dl-ssl.google.com/android/repository/addons_list.xmlhttps://dl-ssl.google.com/android/repository/repository.xmlhttps://dl-ssl.google.com/android/repository/addon.xml这几个文件，找到你要下载的文件名，直接用迅雷下载，ADT可以直接在官网下载ADT包进行安装。具体方法自己搜索。]]></content>
  </entry>
  <entry>
    <title><![CDATA[配置变量时 系统 用户变量的区别]]></title>
    <url>%2F2017%2F06%2F18%2F%E9%85%8D%E7%BD%AE%E5%8F%98%E9%87%8F%E6%97%B6%20%20%E7%B3%BB%E7%BB%9F%20%E7%94%A8%E6%88%B7%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[我们在Java运行环境或Android开发环境时，经常要配置环境变量，如图所示， 这里有administrator的用户变量(U)，和系统变量（S），那麽，它们之间有什么区别呢？简单的说，一个是当前用户使用，你用其它用户登陆，这个环境变量就不起作用了。系统变量，是对所有用户都可使用的。简单的说：系统变量：不管以哪个用户名登陆到计算机都能使用；用户变量：只能以设置变量时的用户名登陆才能使用。 如果我们在自己的电脑上运行程序，用户只有一个，看不出系统变量和用户变量的区别，但是，如果一台电脑有多个用户，就能看出用户变量和系统变量的区别了~~PS：我们在配置的时候，一般都是配置系统变量（S），]]></content>
  </entry>
  <entry>
    <title><![CDATA[JDK SDK下载配置]]></title>
    <url>%2F2017%2F06%2F14%2FJDK%20SDK%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1231、JDK(Java Development Kit) 是 Java 语言的软件开发工具包(SDK)。开发Java程序必须要的工具包。2、软件开发工具包（外语首字母缩写：SDK、外语全称：Software Development Kit）一般都是一些软件工程师为特定的软件包、软件框架、硬件平台、操作系统等建立应用软件时的开发工具的集合。这个封装了程序具体实现的细节；例如点击按钮这个事件的具体细节就封装在sdk中，开发者只需要调用相应的方法或接口就可以实现点击按钮的事件处理，具体调用操作系统的细节就有sdk去处理3、ADT是Android开发的eclipse插件，用于打包和封装Android应用 官网下载：http://www.oracle.com/technetwork/java/javase/downloads/index.html 默认安装路径：c:/program files/java 安装成功检验方法：cmd中输入Java -version 配置jdk：https://jingyan.baidu.com/album/f96699bb8b38e0894e3c1bef.html 检验配置成功：JAVAC 别再在这上面浪费时间！！！ Android SDK的安装与环境变量配置 下载SDK tool 再下载sdk 默认安装路径：c:/program files（X86）/Andriod 1、下载Android SDK，点击安装，直接默认路径即可！下载地址：http://developer.android.com/sdk/index.htmlAndroid SDK的安装与环境变量配置 2、默认路径安装后，安装完成，开始配置环境变量。3、打开计算机属性——高级系统设置——环境变量（如上文）4、新建一个环境变量，变量名：ANDROID_HOME，变量值：C:\Program Files (x86)\Android\android-sdk（以你安装目录为准,确认里面有tools和add-ons等多个文件夹），点击确认。Android SDK的安装与环境变量配置 5、在变量PATH后面加上变量值%ANDROID_HOME%\tools;点击确认即可。 如果没有这个变量，新建一个即可！新建方法见上文！6、Android SDK配置完成，接下来验证配置是否成功。7、点击运行——输入cmd——回车——输入android -h——回车，如果出现一堆英文，如下图所示，即表示配置成功！！]]></content>
  </entry>
  <entry>
    <title><![CDATA[产品经理练成]]></title>
    <url>%2F2017%2F06%2F04%2F%E4%B8%AD%E5%9B%BD%E8%B1%A1%E6%A3%8B%2F</url>
    <content type="text"><![CDATA[1.象棋主类 文件ChineseChess.Java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138package cn.edu.ouc.chineseChess; import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.io.*; import java.util.LinkedList; /** * 象棋主类 * * @author cnlht */ public class ChineseChess extends JFrame implements ActionListener &#123; ChessBoard board = null; Demon demon = null; MakeChessManual record = null; Container con = null; JMenuBar bar; JMenu fileMenu; JMenuItem 制作棋谱, 保存棋谱, 演示棋谱; JFileChooser fileChooser = null; LinkedList 棋谱 = null; public ChineseChess() &#123; bar = new JMenuBar(); fileMenu = new JMenu("中国象棋"); 制作棋谱 = new JMenuItem("制作棋谱"); 保存棋谱 = new JMenuItem("保存棋谱"); 保存棋谱.setEnabled(false); 演示棋谱 = new JMenuItem("演示棋谱"); fileMenu.add(制作棋谱); fileMenu.add(保存棋谱); fileMenu.add(演示棋谱); bar.add(fileMenu); setJMenuBar(bar); setTitle(制作棋谱.getText()); 制作棋谱.addActionListener(this); 保存棋谱.addActionListener(this); 演示棋谱.addActionListener(this); board = new ChessBoard(45, 45, 9, 10); record = board.record; con = getContentPane(); JSplitPane split = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, true, board, record); split.setDividerSize(5); split.setDividerLocation(460); con.add(split, BorderLayout.CENTER); addWindowListener(new WindowAdapter() &#123; public void windowClosing(WindowEvent e) &#123; System.exit(0); &#125; &#125;); setVisible(true); setBounds(60, 20, 690, 540); fileChooser = new JFileChooser(); con.validate(); validate(); &#125; public void actionPerformed(ActionEvent e) &#123; if (e.getSource() == 制作棋谱) &#123; con.removeAll(); 保存棋谱.setEnabled(true); this.setTitle(制作棋谱.getText()); board = new ChessBoard(45, 45, 9, 10); record = board.record; JSplitPane split = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, true, board, record); split.setDividerSize(5); split.setDividerLocation(460); con.add(split, BorderLayout.CENTER); validate(); &#125; if (e.getSource() == 保存棋谱) &#123; int state = fileChooser.showSaveDialog(null); File saveFile = fileChooser.getSelectedFile(); if (saveFile != null &amp;&amp; state == JFileChooser.APPROVE_OPTION) &#123; try &#123; FileOutputStream outOne = new FileOutputStream(saveFile); ObjectOutputStream outTwo = new ObjectOutputStream(outOne); outTwo.writeObject(record.获取棋谱()); outOne.close(); outTwo.close(); &#125; catch (IOException event) &#123; &#125; &#125; &#125; if (e.getSource() == 演示棋谱) &#123; con.removeAll(); con.repaint(); con.validate(); validate(); 保存棋谱.setEnabled(false); int state = fileChooser.showOpenDialog(null); File openFile = fileChooser.getSelectedFile(); if (openFile != null &amp;&amp; state == JFileChooser.APPROVE_OPTION) &#123; try &#123; FileInputStream inOne = new FileInputStream(openFile); ObjectInputStream inTwo = new ObjectInputStream(inOne); 棋谱 = (LinkedList) inTwo.readObject(); inOne.close(); inTwo.close(); ChessBoard board = new ChessBoard(45, 45, 9, 10); demon = new Demon(board); demon.set棋谱(棋谱); con.add(demon, BorderLayout.CENTER); con.validate(); validate(); this.setTitle(演示棋谱.getText() + ":" + openFile); &#125; catch (Exception event) &#123; JLabel label = new JLabel("不是棋谱文件"); label.setFont(new Font("隶书", Font.BOLD, 60)); label.setForeground(Color.red); label.setHorizontalAlignment(SwingConstants.CENTER); con.add(label, BorderLayout.CENTER); con.validate(); this.setTitle("没有打开棋谱"); validate(); &#125; &#125; else &#123; JLabel label = new JLabel("没有打开棋谱文件呢"); label.setFont(new Font("隶书", Font.BOLD, 50)); label.setForeground(Color.pink); label.setHorizontalAlignment(SwingConstants.CENTER); con.add(label, BorderLayout.CENTER); con.validate(); this.setTitle("没有打开棋谱文件呢"); validate(); &#125; &#125; &#125; public static void main(String args[]) &#123; new ChineseChess(); &#125; &#125; 2.象棋棋盘类文件ChessBoard.javapackage cn.edu.ouc.chineseChess; import javax.swing.*; import java.awt.*; import java.awt.event.*; /** * 棋盘类 * * @author cnlht */ public class ChessBoard extends JPanel implements MouseListener, MouseMotionListener &#123; public ChessPoint point[][]; public int unitWidth, unitHeight; private int x轴长, y轴长; private int x, y; private Image img; protected Image pieceImg; private boolean move = false; public String 红方颜色 = "红方", 黑方颜色 = "黑方"; ChessPiece 红车1, 红车2, 红马1, 红马2, 红相1, 红相2, 红帅, 红士1, 红士2, 红兵1, 红兵2, 红兵3, 红兵4, 红兵5, 红炮1, 红炮2; ChessPiece 黑车1, 黑车2, 黑马1, 黑马2, 黑将, 黑士1, 黑士2, 黑卒1, 黑卒2, 黑卒3, 黑卒4, 黑卒5, 黑象1, 黑象2, 黑炮1, 黑炮2; int startX, startY; int startI, startJ; public boolean 红方走棋 = true, 黑方走棋 = false; Rule rule = null; public MakeChessManual record = null; public ChessBoard(int w, int h, int r, int c) &#123; setLayout(null); addMouseListener(this); addMouseMotionListener(this); Color bc = getBackground(); unitWidth = w; unitHeight = h; x轴长 = r; y轴长 = c; point = new ChessPoint[r + 1][c + 1]; for (int i = 1; i &lt;= r; i++) &#123; for (int j = 1; j &lt;= c; j++) &#123; point[i][j] = new ChessPoint(i * unitWidth, j * unitHeight, false); &#125; &#125; rule = new Rule(this, point); record = new MakeChessManual(this, point); img = Toolkit.getDefaultToolkit().getImage("board.jpg"); pieceImg = Toolkit.getDefaultToolkit().getImage("piece.gif"); 红车1 = new ChessPiece("車", Color.red, bc, w - 4, h - 4, this); 红车1.set棋子类别(红方颜色); 红车2 = new ChessPiece("車", Color.red, bc, w - 4, h - 4, this); 红车2.set棋子类别(红方颜色); 红马1 = new ChessPiece("馬", Color.red, bc, w - 4, h - 4, this); 红马1.set棋子类别(红方颜色); 红马2 = new ChessPiece("馬", Color.red, bc, w - 4, h - 4, this); 红马2.set棋子类别(红方颜色); 红炮1 = new ChessPiece("炮", Color.red, bc, w - 4, h - 4, this); 红炮1.set棋子类别(红方颜色); 红炮2 = new ChessPiece("炮", Color.red, bc, w - 4, h - 4, this); 红炮2.set棋子类别(红方颜色); 红相1 = new ChessPiece("相", Color.red, bc, w - 4, h - 4, this); 红相1.set棋子类别(红方颜色); 红相2 = new ChessPiece("相", Color.red, bc, w - 4, h - 4, this); 红相2.set棋子类别(红方颜色); 红士1 = new ChessPiece("仕", Color.red, bc, w - 4, h - 4, this); 红士1.set棋子类别(红方颜色); 红士2 = new ChessPiece("仕", Color.red, bc, w - 4, h - 4, this); 红士2.set棋子类别(红方颜色); 红帅 = new ChessPiece("帅", Color.red, bc, w - 4, h - 4, this); 红帅.set棋子类别(红方颜色); 红兵1 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵1.set棋子类别(红方颜色); 红兵2 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵2.set棋子类别(红方颜色); 红兵3 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵3.set棋子类别(红方颜色); 红兵4 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵4.set棋子类别(红方颜色); 红兵5 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵5.set棋子类别(红方颜色); 黑将 = new ChessPiece("将", Color.black, bc, w - 4, h - 4, this); 黑将.set棋子类别(黑方颜色); 黑士1 = new ChessPiece("士", Color.black, bc, w - 4, h - 4, this); 黑士1.set棋子类别(黑方颜色); 黑士2 = new ChessPiece("士", Color.black, bc, w - 4, h - 4, this); 黑士2.set棋子类别(黑方颜色); 黑车1 = new ChessPiece("车", Color.black, bc, w - 4, h - 4, this); 黑车1.set棋子类别(黑方颜色); 黑车2 = new ChessPiece("车", Color.black, bc, w - 4, h - 4, this); 黑车2.set棋子类别(黑方颜色); 黑炮1 = new ChessPiece("炮", Color.black, bc, w - 4, h - 4, this); 黑炮1.set棋子类别(黑方颜色); 黑炮2 = new ChessPiece("炮", Color.black, bc, w - 4, h - 4, this); 黑炮2.set棋子类别(黑方颜色); 黑象1 = new ChessPiece("象", Color.black, bc, w - 4, h - 4, this); 黑象1.set棋子类别(黑方颜色); 黑象2 = new ChessPiece("象", Color.black, bc, w - 4, h - 4, this); 黑象2.set棋子类别(黑方颜色); 黑马1 = new ChessPiece("马", Color.black, bc, w - 4, h - 4, this); 黑马1.set棋子类别(黑方颜色); 黑马2 = new ChessPiece("马", Color.black, bc, w - 4, h - 4, this); 黑马2.set棋子类别(黑方颜色); 黑卒1 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒1.set棋子类别(黑方颜色); 黑卒2 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒2.set棋子类别(黑方颜色); 黑卒3 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒3.set棋子类别(黑方颜色); 黑卒4 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒4.set棋子类别(黑方颜色); 黑卒5 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒5.set棋子类别(黑方颜色); point[1][10].setPiece(红车1, this); point[2][10].setPiece(红马1, this); point[3][10].setPiece(红相1, this); point[4][10].setPiece(红士1, this); point[5][10].setPiece(红帅, this); point[6][10].setPiece(红士2, this); point[7][10].setPiece(红相2, this); point[8][10].setPiece(红马2, this); point[9][10].setPiece(红车2, this); point[2][8].setPiece(红炮1, this); point[8][8].setPiece(红炮2, this); point[1][7].setPiece(红兵1, this); point[3][7].setPiece(红兵2, this); point[5][7].setPiece(红兵3, this); point[7][7].setPiece(红兵4, this); point[9][7].setPiece(红兵5, this); point[1][1].setPiece(黑车1, this); point[2][1].setPiece(黑马1, this); point[3][1].setPiece(黑象1, this); point[4][1].setPiece(黑士1, this); point[5][1].setPiece(黑将, this); point[6][1].setPiece(黑士2, this); point[7][1].setPiece(黑象2, this); point[8][1].setPiece(黑马2, this); point[9][1].setPiece(黑车2, this); point[2][3].setPiece(黑炮1, this); point[8][3].setPiece(黑炮2, this); point[1][4].setPiece(黑卒1, this); point[3][4].setPiece(黑卒2, this); point[5][4].setPiece(黑卒3, this); point[7][4].setPiece(黑卒4, this); point[9][4].setPiece(黑卒5, this); &#125; public void paintComponent(Graphics g) &#123; super.paintComponent(g); int imgWidth = img.getWidth(this); int imgHeight = img.getHeight(this);// 获得图片的宽度与高度 int FWidth = getWidth(); int FHeight = getHeight();// 获得窗口的宽度与高度 int x = (FWidth - imgWidth) / 2; int y = (FHeight - imgHeight) / 2; g.drawImage(img, x, y, null); for (int j = 1; j &lt;= y轴长; j++) &#123; g.drawLine(point[1][j].x, point[1][j].y, point[x轴长][j].x, point[x轴长][j].y); &#125; for (int i = 1; i &lt;= x轴长; i++) &#123; if (i != 1 &amp;&amp; i != x轴长) &#123; g.drawLine(point[i][1].x, point[i][1].y, point[i][y轴长 - 5].x, point[i][y轴长 - 5].y); g.drawLine(point[i][y轴长 - 4].x, point[i][y轴长 - 4].y, point[i][y轴长].x, point[i][y轴长].y); &#125; else &#123; g.drawLine(point[i][1].x, point[i][1].y, point[i][y轴长].x, point[i][y轴长].y); &#125; &#125; g.drawLine(point[4][1].x, point[4][1].y, point[6][3].x, point[6][3].y); g.drawLine(point[6][1].x, point[6][1].y, point[4][3].x, point[4][3].y); g.drawLine(point[4][8].x, point[4][8].y, point[6][y轴长].x, point[6][y轴长].y); g.drawLine(point[4][y轴长].x, point[4][y轴长].y, point[6][8].x, point[6][8].y); for (int i = 1; i &lt;= x轴长; i++) &#123; g.drawString("" + i, i * unitWidth, unitHeight / 2); &#125; int j = 1; for (char c = 'A'; c &lt;= 'J'; c++) &#123; g.drawString("" + c, unitWidth / 4, j * unitHeight); j++; &#125; &#125; /**鼠标按下事件*/ public void mousePressed(MouseEvent e) &#123; ChessPiece piece = null; Rectangle rect = null; if (e.getSource() == this) move = false; if (move == false) if (e.getSource() instanceof ChessPiece) &#123; piece = (ChessPiece) e.getSource(); startX = piece.getBounds().x; startY = piece.getBounds().y; rect = piece.getBounds(); for (int i = 1; i &lt;= x轴长; i++) &#123; for (int j = 1; j &lt;= y轴长; j++) &#123; int x = point[i][j].getX(); int y = point[i][j].getY(); if (rect.contains(x, y)) &#123; startI = i; startJ = j; break; &#125; &#125; &#125; &#125; &#125; public void mouseMoved(MouseEvent e) &#123; &#125; /**鼠标拖动事件*/ public void mouseDragged(MouseEvent e) &#123; ChessPiece piece = null; if (e.getSource() instanceof ChessPiece) &#123; piece = (ChessPiece) e.getSource(); move = true; e = SwingUtilities.convertMouseEvent(piece, e, this); &#125; if (e.getSource() == this) &#123; if (move &amp;&amp; piece != null) &#123; x = e.getX(); y = e.getY(); if (红方走棋 &amp;&amp; ((piece.棋子类别()).equals(红方颜色))) &#123; piece.setLocation(x - piece.getWidth() / 2, y - piece.getHeight() / 2); &#125; if (黑方走棋 &amp;&amp; (piece.棋子类别().equals(黑方颜色))) &#123; piece.setLocation(x - piece.getWidth() / 2, y - piece.getHeight() / 2); &#125; &#125; &#125; &#125; /**松开鼠标事件*/ public void mouseReleased(MouseEvent e) &#123; ChessPiece piece = null; move = false; Rectangle rect = null; if (e.getSource() instanceof ChessPiece) &#123; piece = (ChessPiece) e.getSource(); rect = piece.getBounds(); e = SwingUtilities.convertMouseEvent(piece, e, this); &#125; if (e.getSource() == this) &#123; boolean containChessPoint = false; int x = 0, y = 0; int m = 0, n = 0; if (piece != null) &#123; for (int i = 1; i &lt;= x轴长; i++) &#123; for (int j = 1; j &lt;= y轴长; j++) &#123; x = point[i][j].getX(); y = point[i][j].getY(); if (rect.contains(x, y)) &#123; containChessPoint = true; m = i; n = j; break; &#125; &#125; &#125; &#125; if (piece != null &amp;&amp; containChessPoint) &#123; Color pieceColor = piece.获取棋子颜色(); if (point[m][n].isPiece()) &#123; Color c = (point[m][n].getPiece()).获取棋子颜色(); if (pieceColor.getRGB() == c.getRGB()) &#123; piece.setLocation(startX, startY); (point[startI][startJ]).set有棋子(true); &#125; else &#123; boolean ok = rule.movePieceRule(piece, startI, startJ, m, n); if (ok) &#123; ChessPiece pieceRemoved = point[m][n].getPiece(); point[m][n].reMovePiece(pieceRemoved, this); point[m][n].setPiece(piece, this); (point[startI][startJ]).set有棋子(false); record.记录棋谱(piece, startI, startJ, m, n); record.记录吃掉的棋子(pieceRemoved); rule.isWine(pieceRemoved); if (piece.棋子类别().equals(红方颜色)) &#123; 红方走棋 = false; 黑方走棋 = true; &#125; if (piece.棋子类别().equals(黑方颜色)) &#123; 黑方走棋 = false; 红方走棋 = true; &#125; validate(); repaint(); &#125; else &#123; piece.setLocation(startX, startY); (point[startI][startJ]).set有棋子(true); &#125; &#125; &#125; else &#123; boolean ok = rule .movePieceRule(piece, startI, startJ, m, n); if (ok) &#123; point[m][n].setPiece(piece, this); (point[startI][startJ]).set有棋子(false); record.记录棋谱(piece, startI, startJ, m, n); record.记录吃掉的棋子("没吃棋子"); if (piece.棋子类别().equals(红方颜色)) &#123; 红方走棋 = false; 黑方走棋 = true; &#125; if (piece.棋子类别().equals(黑方颜色)) &#123; 黑方走棋 = false; 红方走棋 = true; &#125; &#125; else &#123; piece.setLocation(startX, startY); (point[startI][startJ]).set有棋子(true); &#125; &#125; &#125; if (piece != null &amp;&amp; !containChessPoint) &#123; piece.setLocation(startX, startY); (point[startI][startJ]).set有棋子(true); &#125; &#125; &#125; public void mouseEntered(MouseEvent e) &#123; &#125; public void mouseExited(MouseEvent e) &#123; &#125; public void mouseClicked(MouseEvent e) &#123; &#125; &#125; 3.棋子类文件ChessPiece.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869package cn.edu.ouc.chineseChess; import javax.swing.*; import java.awt.*; import java.awt.event.*; /** * 棋子类 * * @author cnlht */ public class ChessPiece extends JLabel &#123; String name; // 棋子名字 Color backColor = null, foreColor;// 背景色和前景色 String 颜色类别 = null; ChessBoard board = null; int width, height;// 大小 public ChessPiece(String name, Color fc, Color bc, int width, int height, ChessBoard board) &#123;// 构造棋子 this.name = name; this.board = board; this.width = width; this.height = height; foreColor = fc; backColor = bc; setSize(width, height); setBackground(bc); addMouseMotionListener(board); addMouseListener(board); &#125; // 绘制棋子 public void paint(Graphics g) &#123; g.drawImage(board.pieceImg, 2, 2, width-2, height-2, null); g.setColor(foreColor); g.setFont(new Font("楷体", Font.BOLD, 26)); g.drawString(name, 7, height - 8);// 在棋子上绘制 “棋子名” g.setColor(Color.black); //g.drawOval(1, 1, width - 1, height - 1); float lineWidth = 2.3f; ((Graphics2D)g).setStroke(new BasicStroke(lineWidth)); ((Graphics2D)g).drawOval(2, 2, width-2, height-2); &#125; public int getWidth() &#123; return width; &#125; public int getHeight() &#123; return height; &#125; public String getName() &#123; return name; &#125; public Color 获取棋子颜色() &#123; return foreColor; &#125; public void set棋子类别(String 类别) &#123; 颜色类别 = 类别; &#125; public String 棋子类别() &#123; return 颜色类别; &#125; &#125; 04 ChessPoint类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369package cn.edu.ouc.chineseChess; import javax.swing.*; import java.awt.*; import java.awt.event.*; /** * 棋盘类 * * @author cnlht */ public class ChessBoard extends JPanel implements MouseListener, MouseMotionListener &#123; public ChessPoint point[][]; public int unitWidth, unitHeight; private int x轴长, y轴长; private int x, y; private Image img; protected Image pieceImg; private boolean move = false; public String 红方颜色 = "红方", 黑方颜色 = "黑方"; ChessPiece 红车1, 红车2, 红马1, 红马2, 红相1, 红相2, 红帅, 红士1, 红士2, 红兵1, 红兵2, 红兵3, 红兵4, 红兵5, 红炮1, 红炮2; ChessPiece 黑车1, 黑车2, 黑马1, 黑马2, 黑将, 黑士1, 黑士2, 黑卒1, 黑卒2, 黑卒3, 黑卒4, 黑卒5, 黑象1, 黑象2, 黑炮1, 黑炮2; int startX, startY; int startI, startJ; public boolean 红方走棋 = true, 黑方走棋 = false; Rule rule = null; public MakeChessManual record = null; public ChessBoard(int w, int h, int r, int c) &#123; setLayout(null); addMouseListener(this); addMouseMotionListener(this); Color bc = getBackground(); unitWidth = w; unitHeight = h; x轴长 = r; y轴长 = c; point = new ChessPoint[r + 1][c + 1]; for (int i = 1; i &lt;= r; i++) &#123; for (int j = 1; j &lt;= c; j++) &#123; point[i][j] = new ChessPoint(i * unitWidth, j * unitHeight, false); &#125; &#125; rule = new Rule(this, point); record = new MakeChessManual(this, point); img = Toolkit.getDefaultToolkit().getImage("board.jpg"); pieceImg = Toolkit.getDefaultToolkit().getImage("piece.gif"); 红车1 = new ChessPiece("車", Color.red, bc, w - 4, h - 4, this); 红车1.set棋子类别(红方颜色); 红车2 = new ChessPiece("車", Color.red, bc, w - 4, h - 4, this); 红车2.set棋子类别(红方颜色); 红马1 = new ChessPiece("馬", Color.red, bc, w - 4, h - 4, this); 红马1.set棋子类别(红方颜色); 红马2 = new ChessPiece("馬", Color.red, bc, w - 4, h - 4, this); 红马2.set棋子类别(红方颜色); 红炮1 = new ChessPiece("炮", Color.red, bc, w - 4, h - 4, this); 红炮1.set棋子类别(红方颜色); 红炮2 = new ChessPiece("炮", Color.red, bc, w - 4, h - 4, this); 红炮2.set棋子类别(红方颜色); 红相1 = new ChessPiece("相", Color.red, bc, w - 4, h - 4, this); 红相1.set棋子类别(红方颜色); 红相2 = new ChessPiece("相", Color.red, bc, w - 4, h - 4, this); 红相2.set棋子类别(红方颜色); 红士1 = new ChessPiece("仕", Color.red, bc, w - 4, h - 4, this); 红士1.set棋子类别(红方颜色); 红士2 = new ChessPiece("仕", Color.red, bc, w - 4, h - 4, this); 红士2.set棋子类别(红方颜色); 红帅 = new ChessPiece("帅", Color.red, bc, w - 4, h - 4, this); 红帅.set棋子类别(红方颜色); 红兵1 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵1.set棋子类别(红方颜色); 红兵2 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵2.set棋子类别(红方颜色); 红兵3 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵3.set棋子类别(红方颜色); 红兵4 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵4.set棋子类别(红方颜色); 红兵5 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵5.set棋子类别(红方颜色); 黑将 = new ChessPiece("将", Color.black, bc, w - 4, h - 4, this); 黑将.set棋子类别(黑方颜色); 黑士1 = new ChessPiece("士", Color.black, bc, w - 4, h - 4, this); 黑士1.set棋子类别(黑方颜色); 黑士2 = new ChessPiece("士", Color.black, bc, w - 4, h - 4, this); 黑士2.set棋子类别(黑方颜色); 黑车1 = new ChessPiece("车", Color.black, bc, w - 4, h - 4, this); 黑车1.set棋子类别(黑方颜色); 黑车2 = new ChessPiece("车", Color.black, bc, w - 4, h - 4, this); 黑车2.set棋子类别(黑方颜色); 黑炮1 = new ChessPiece("炮", Color.black, bc, w - 4, h - 4, this); 黑炮1.set棋子类别(黑方颜色); 黑炮2 = new ChessPiece("炮", Color.black, bc, w - 4, h - 4, this); 黑炮2.set棋子类别(黑方颜色); 黑象1 = new ChessPiece("象", Color.black, bc, w - 4, h - 4, this); 黑象1.set棋子类别(黑方颜色); 黑象2 = new ChessPiece("象", Color.black, bc, w - 4, h - 4, this); 黑象2.set棋子类别(黑方颜色); 黑马1 = new ChessPiece("马", Color.black, bc, w - 4, h - 4, this); 黑马1.set棋子类别(黑方颜色); 黑马2 = new ChessPiece("马", Color.black, bc, w - 4, h - 4, this); 黑马2.set棋子类别(黑方颜色); 黑卒1 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒1.set棋子类别(黑方颜色); 黑卒2 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒2.set棋子类别(黑方颜色); 黑卒3 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒3.set棋子类别(黑方颜色); 黑卒4 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒4.set棋子类别(黑方颜色); 黑卒5 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒5.set棋子类别(黑方颜色); point[1][10].setPiece(红车1, this); point[2][10].setPiece(红马1, this); point[3][10].setPiece(红相1, this); point[4][10].setPiece(红士1, this); point[5][10].setPiece(红帅, this); point[6][10].setPiece(红士2, this); point[7][10].setPiece(红相2, this); point[8][10].setPiece(红马2, this); point[9][10].setPiece(红车2, this); point[2][8].setPiece(红炮1, this); point[8][8].setPiece(红炮2, this); point[1][7].setPiece(红兵1, this); point[3][7].setPiece(红兵2, this); point[5][7].setPiece(红兵3, this); point[7][7].setPiece(红兵4, this); point[9][7].setPiece(红兵5, this); point[1][1].setPiece(黑车1, this); point[2][1].setPiece(黑马1, this); point[3][1].setPiece(黑象1, this); point[4][1].setPiece(黑士1, this); point[5][1].setPiece(黑将, this); point[6][1].setPiece(黑士2, this); point[7][1].setPiece(黑象2, this); point[8][1].setPiece(黑马2, this); point[9][1].setPiece(黑车2, this); point[2][3].setPiece(黑炮1, this); point[8][3].setPiece(黑炮2, this); point[1][4].setPiece(黑卒1, this); point[3][4].setPiece(黑卒2, this); point[5][4].setPiece(黑卒3, this); point[7][4].setPiece(黑卒4, this); point[9][4].setPiece(黑卒5, this); &#125; public void paintComponent(Graphics g) &#123; super.paintComponent(g); int imgWidth = img.getWidth(this); int imgHeight = img.getHeight(this);// 获得图片的宽度与高度 int FWidth = getWidth(); int FHeight = getHeight();// 获得窗口的宽度与高度 int x = (FWidth - imgWidth) / 2; int y = (FHeight - imgHeight) / 2; g.drawImage(img, x, y, null); for (int j = 1; j &lt;= y轴长; j++) &#123; g.drawLine(point[1][j].x, point[1][j].y, point[x轴长][j].x, point[x轴长][j].y); &#125; for (int i = 1; i &lt;= x轴长; i++) &#123; if (i != 1 &amp;&amp; i != x轴长) &#123; g.drawLine(point[i][1].x, point[i][1].y, point[i][y轴长 - 5].x, point[i][y轴长 - 5].y); g.drawLine(point[i][y轴长 - 4].x, point[i][y轴长 - 4].y, point[i][y轴长].x, point[i][y轴长].y); &#125; else &#123; g.drawLine(point[i][1].x, point[i][1].y, point[i][y轴长].x, point[i][y轴长].y); &#125; &#125; g.drawLine(point[4][1].x, point[4][1].y, point[6][3].x, point[6][3].y); g.drawLine(point[6][1].x, point[6][1].y, point[4][3].x, point[4][3].y); g.drawLine(point[4][8].x, point[4][8].y, point[6][y轴长].x, point[6][y轴长].y); g.drawLine(point[4][y轴长].x, point[4][y轴长].y, point[6][8].x, point[6][8].y); for (int i = 1; i &lt;= x轴长; i++) &#123; g.drawString("" + i, i * unitWidth, unitHeight / 2); &#125; int j = 1; for (char c = 'A'; c &lt;= 'J'; c++) &#123; g.drawString("" + c, unitWidth / 4, j * unitHeight); j++; &#125; &#125; /**鼠标按下事件*/ public void mousePressed(MouseEvent e) &#123; ChessPiece piece = null; Rectangle rect = null; if (e.getSource() == this) move = false; if (move == false) if (e.getSource() instanceof ChessPiece) &#123; piece = (ChessPiece) e.getSource(); startX = piece.getBounds().x; startY = piece.getBounds().y; rect = piece.getBounds(); for (int i = 1; i &lt;= x轴长; i++) &#123; for (int j = 1; j &lt;= y轴长; j++) &#123; int x = point[i][j].getX(); int y = point[i][j].getY(); if (rect.contains(x, y)) &#123; startI = i; startJ = j; break; &#125; &#125; &#125; &#125; &#125; public void mouseMoved(MouseEvent e) &#123; &#125; /**鼠标拖动事件*/ public void mouseDragged(MouseEvent e) &#123; ChessPiece piece = null; if (e.getSource() instanceof ChessPiece) &#123; piece = (ChessPiece) e.getSource(); move = true; e = SwingUtilities.convertMouseEvent(piece, e, this); &#125; if (e.getSource() == this) &#123; if (move &amp;&amp; piece != null) &#123; x = e.getX(); y = e.getY(); if (红方走棋 &amp;&amp; ((piece.棋子类别()).equals(红方颜色))) &#123; piece.setLocation(x - piece.getWidth() / 2, y - piece.getHeight() / 2); &#125; if (黑方走棋 &amp;&amp; (piece.棋子类别().equals(黑方颜色))) &#123; piece.setLocation(x - piece.getWidth() / 2, y - piece.getHeight() / 2); &#125; &#125; &#125; &#125; /**松开鼠标事件*/ public void mouseReleased(MouseEvent e) &#123; ChessPiece piece = null; move = false; Rectangle rect = null; if (e.getSource() instanceof ChessPiece) &#123; piece = (ChessPiece) e.getSource(); rect = piece.getBounds(); e = SwingUtilities.convertMouseEvent(piece, e, this); &#125; if (e.getSource() == this) &#123; boolean containChessPoint = false; int x = 0, y = 0; int m = 0, n = 0; if (piece != null) &#123; for (int i = 1; i &lt;= x轴长; i++) &#123; for (int j = 1; j &lt;= y轴长; j++) &#123; x = point[i][j].getX(); y = point[i][j].getY(); if (rect.contains(x, y)) &#123; containChessPoint = true; m = i; n = j; break; &#125; &#125; &#125; &#125; if (piece != null &amp;&amp; containChessPoint) &#123; Color pieceColor = piece.获取棋子颜色(); if (point[m][n].isPiece()) &#123; Color c = (point[m][n].getPiece()).获取棋子颜色(); if (pieceColor.getRGB() == c.getRGB()) &#123; piece.setLocation(startX, startY); (point[startI][startJ]).set有棋子(true); &#125; else &#123; boolean ok = rule.movePieceRule(piece, startI, startJ, m, n); if (ok) &#123; ChessPiece pieceRemoved = point[m][n].getPiece(); point[m][n].reMovePiece(pieceRemoved, this); point[m][n].setPiece(piece, this); (point[startI][startJ]).set有棋子(false); record.记录棋谱(piece, startI, startJ, m, n); record.记录吃掉的棋子(pieceRemoved); rule.isWine(pieceRemoved); if (piece.棋子类别().equals(红方颜色)) &#123; 红方走棋 = false; 黑方走棋 = true; &#125; if (piece.棋子类别().equals(黑方颜色)) &#123; 黑方走棋 = false; 红方走棋 = true; &#125; validate(); repaint(); &#125; else &#123; piece.setLocation(startX, startY); (point[startI][startJ]).set有棋子(true); &#125; &#125; &#125; else &#123; boolean ok = rule .movePieceRule(piece, startI, startJ, m, n); if (ok) &#123; point[m][n].setPiece(piece, this); (point[startI][startJ]).set有棋子(false); record.记录棋谱(piece, startI, startJ, m, n); record.记录吃掉的棋子("没吃棋子"); if (piece.棋子类别().equals(红方颜色)) &#123; 红方走棋 = false; 黑方走棋 = true; &#125; if (piece.棋子类别().equals(黑方颜色)) &#123; 黑方走棋 = false; 红方走棋 = true; &#125; &#125; else &#123; piece.setLocation(startX, startY); (point[startI][startJ]).set有棋子(true); &#125; &#125; &#125; if (piece != null &amp;&amp; !containChessPoint) &#123; piece.setLocation(startX, startY); (point[startI][startJ]).set有棋子(true); &#125; &#125; &#125; public void mouseEntered(MouseEvent e) &#123; &#125; public void mouseExited(MouseEvent e) &#123; &#125; public void mouseClicked(MouseEvent e) &#123; &#125; &#125; 05 Demon类package cn.edu.ouc.chineseChess; import javax.swing.*; import java.awt.*; import java.awt.event.*; /** * 棋盘类 * * @author cnlht */ public class ChessBoard extends JPanel implements MouseListener, MouseMotionListener &#123; public ChessPoint point[][]; public int unitWidth, unitHeight; private int x轴长, y轴长; private int x, y; private Image img; protected Image pieceImg; private boolean move = false; public String 红方颜色 = "红方", 黑方颜色 = "黑方"; ChessPiece 红车1, 红车2, 红马1, 红马2, 红相1, 红相2, 红帅, 红士1, 红士2, 红兵1, 红兵2, 红兵3, 红兵4, 红兵5, 红炮1, 红炮2; ChessPiece 黑车1, 黑车2, 黑马1, 黑马2, 黑将, 黑士1, 黑士2, 黑卒1, 黑卒2, 黑卒3, 黑卒4, 黑卒5, 黑象1, 黑象2, 黑炮1, 黑炮2; int startX, startY; int startI, startJ; public boolean 红方走棋 = true, 黑方走棋 = false; Rule rule = null; public MakeChessManual record = null; public ChessBoard(int w, int h, int r, int c) &#123; setLayout(null); addMouseListener(this); addMouseMotionListener(this); Color bc = getBackground(); unitWidth = w; unitHeight = h; x轴长 = r; y轴长 = c; point = new ChessPoint[r + 1][c + 1]; for (int i = 1; i &lt;= r; i++) &#123; for (int j = 1; j &lt;= c; j++) &#123; point[i][j] = new ChessPoint(i * unitWidth, j * unitHeight, false); &#125; &#125; rule = new Rule(this, point); record = new MakeChessManual(this, point); img = Toolkit.getDefaultToolkit().getImage("board.jpg"); pieceImg = Toolkit.getDefaultToolkit().getImage("piece.gif"); 红车1 = new ChessPiece("車", Color.red, bc, w - 4, h - 4, this); 红车1.set棋子类别(红方颜色); 红车2 = new ChessPiece("車", Color.red, bc, w - 4, h - 4, this); 红车2.set棋子类别(红方颜色); 红马1 = new ChessPiece("馬", Color.red, bc, w - 4, h - 4, this); 红马1.set棋子类别(红方颜色); 红马2 = new ChessPiece("馬", Color.red, bc, w - 4, h - 4, this); 红马2.set棋子类别(红方颜色); 红炮1 = new ChessPiece("炮", Color.red, bc, w - 4, h - 4, this); 红炮1.set棋子类别(红方颜色); 红炮2 = new ChessPiece("炮", Color.red, bc, w - 4, h - 4, this); 红炮2.set棋子类别(红方颜色); 红相1 = new ChessPiece("相", Color.red, bc, w - 4, h - 4, this); 红相1.set棋子类别(红方颜色); 红相2 = new ChessPiece("相", Color.red, bc, w - 4, h - 4, this); 红相2.set棋子类别(红方颜色); 红士1 = new ChessPiece("仕", Color.red, bc, w - 4, h - 4, this); 红士1.set棋子类别(红方颜色); 红士2 = new ChessPiece("仕", Color.red, bc, w - 4, h - 4, this); 红士2.set棋子类别(红方颜色); 红帅 = new ChessPiece("帅", Color.red, bc, w - 4, h - 4, this); 红帅.set棋子类别(红方颜色); 红兵1 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵1.set棋子类别(红方颜色); 红兵2 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵2.set棋子类别(红方颜色); 红兵3 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵3.set棋子类别(红方颜色); 红兵4 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵4.set棋子类别(红方颜色); 红兵5 = new ChessPiece("兵", Color.red, bc, w - 4, h - 4, this); 红兵5.set棋子类别(红方颜色); 黑将 = new ChessPiece("将", Color.black, bc, w - 4, h - 4, this); 黑将.set棋子类别(黑方颜色); 黑士1 = new ChessPiece("士", Color.black, bc, w - 4, h - 4, this); 黑士1.set棋子类别(黑方颜色); 黑士2 = new ChessPiece("士", Color.black, bc, w - 4, h - 4, this); 黑士2.set棋子类别(黑方颜色); 黑车1 = new ChessPiece("车", Color.black, bc, w - 4, h - 4, this); 黑车1.set棋子类别(黑方颜色); 黑车2 = new ChessPiece("车", Color.black, bc, w - 4, h - 4, this); 黑车2.set棋子类别(黑方颜色); 黑炮1 = new ChessPiece("炮", Color.black, bc, w - 4, h - 4, this); 黑炮1.set棋子类别(黑方颜色); 黑炮2 = new ChessPiece("炮", Color.black, bc, w - 4, h - 4, this); 黑炮2.set棋子类别(黑方颜色); 黑象1 = new ChessPiece("象", Color.black, bc, w - 4, h - 4, this); 黑象1.set棋子类别(黑方颜色); 黑象2 = new ChessPiece("象", Color.black, bc, w - 4, h - 4, this); 黑象2.set棋子类别(黑方颜色); 黑马1 = new ChessPiece("马", Color.black, bc, w - 4, h - 4, this); 黑马1.set棋子类别(黑方颜色); 黑马2 = new ChessPiece("马", Color.black, bc, w - 4, h - 4, this); 黑马2.set棋子类别(黑方颜色); 黑卒1 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒1.set棋子类别(黑方颜色); 黑卒2 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒2.set棋子类别(黑方颜色); 黑卒3 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒3.set棋子类别(黑方颜色); 黑卒4 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒4.set棋子类别(黑方颜色); 黑卒5 = new ChessPiece("卒", Color.black, bc, w - 4, h - 4, this); 黑卒5.set棋子类别(黑方颜色); point[1][10].setPiece(红车1, this); point[2][10].setPiece(红马1, this); point[3][10].setPiece(红相1, this); point[4][10].setPiece(红士1, this); point[5][10].setPiece(红帅, this); point[6][10].setPiece(红士2, this); point[7][10].setPiece(红相2, this); point[8][10].setPiece(红马2, this); point[9][10].setPiece(红车2, this); point[2][8].setPiece(红炮1, this); point[8][8].setPiece(红炮2, this); point[1][7].setPiece(红兵1, this); point[3][7].setPiece(红兵2, this); point[5][7].setPiece(红兵3, this); point[7][7].setPiece(红兵4, this); point[9][7].setPiece(红兵5, this); point[1][1].setPiece(黑车1, this); point[2][1].setPiece(黑马1, this); point[3][1].setPiece(黑象1, this); point[4][1].setPiece(黑士1, this); point[5][1].setPiece(黑将, this); point[6][1].setPiece(黑士2, this); point[7][1].setPiece(黑象2, this); point[8][1].setPiece(黑马2, this); point[9][1].setPiece(黑车2, this); point[2][3].setPiece(黑炮1, this); point[8][3].setPiece(黑炮2, this); point[1][4].setPiece(黑卒1, this); point[3][4].setPiece(黑卒2, this); point[5][4].setPiece(黑卒3, this); point[7][4].setPiece(黑卒4, this); point[9][4].setPiece(黑卒5, this); &#125; public void paintComponent(Graphics g) &#123; super.paintComponent(g); int imgWidth = img.getWidth(this); int imgHeight = img.getHeight(this);// 获得图片的宽度与高度 int FWidth = getWidth(); int FHeight = getHeight();// 获得窗口的宽度与高度 int x = (FWidth - imgWidth) / 2; int y = (FHeight - imgHeight) / 2; g.drawImage(img, x, y, null); for (int j = 1; j &lt;= y轴长; j++) &#123; g.drawLine(point[1][j].x, point[1][j].y, point[x轴长][j].x, point[x轴长][j].y); &#125; for (int i = 1; i &lt;= x轴长; i++) &#123; if (i != 1 &amp;&amp; i != x轴长) &#123; g.drawLine(point[i][1].x, point[i][1].y, point[i][y轴长 - 5].x, point[i][y轴长 - 5].y); g.drawLine(point[i][y轴长 - 4].x, point[i][y轴长 - 4].y, point[i][y轴长].x, point[i][y轴长].y); &#125; else &#123; g.drawLine(point[i][1].x, point[i][1].y, point[i][y轴长].x, point[i][y轴长].y); &#125; &#125; g.drawLine(point[4][1].x, point[4][1].y, point[6][3].x, point[6][3].y); g.drawLine(point[6][1].x, point[6][1].y, point[4][3].x, point[4][3].y); g.drawLine(point[4][8].x, point[4][8].y, point[6][y轴长].x, point[6][y轴长].y); g.drawLine(point[4][y轴长].x, point[4][y轴长].y, point[6][8].x, point[6][8].y); for (int i = 1; i &lt;= x轴长; i++) &#123; g.drawString("" + i, i * unitWidth, unitHeight / 2); &#125; int j = 1; for (char c = 'A'; c &lt;= 'J'; c++) &#123; g.drawString("" + c, unitWidth / 4, j * unitHeight); j++; &#125; &#125; /**鼠标按下事件*/ public void mousePressed(MouseEvent e) &#123; ChessPiece piece = null; Rectangle rect = null; if (e.getSource() == this) move = false; if (move == false) if (e.getSource() instanceof ChessPiece) &#123; piece = (ChessPiece) e.getSource(); startX = piece.getBounds().x; startY = piece.getBounds().y; rect = piece.getBounds(); for (int i = 1; i &lt;= x轴长; i++) &#123; for (int j = 1; j &lt;= y轴长; j++) &#123; int x = point[i][j].getX(); int y = point[i][j].getY(); if (rect.contains(x, y)) &#123; startI = i; startJ = j; break; &#125; &#125; &#125; &#125; &#125; public void mouseMoved(MouseEvent e) &#123; &#125; /**鼠标拖动事件*/ public void mouseDragged(MouseEvent e) &#123; ChessPiece piece = null; if (e.getSource() instanceof ChessPiece) &#123; piece = (ChessPiece) e.getSource(); move = true; e = SwingUtilities.convertMouseEvent(piece, e, this); &#125; if (e.getSource() == this) &#123; if (move &amp;&amp; piece != null) &#123; x = e.getX(); y = e.getY(); if (红方走棋 &amp;&amp; ((piece.棋子类别()).equals(红方颜色))) &#123; piece.setLocation(x - piece.getWidth() / 2, y - piece.getHeight() / 2); &#125; if (黑方走棋 &amp;&amp; (piece.棋子类别().equals(黑方颜色))) &#123; piece.setLocation(x - piece.getWidth() / 2, y - piece.getHeight() / 2); &#125; &#125; &#125; &#125; /**松开鼠标事件*/ public void mouseReleased(MouseEvent e) &#123; ChessPiece piece = null; move = false; Rectangle rect = null; if (e.getSource() instanceof ChessPiece) &#123; piece = (ChessPiece) e.getSource(); rect = piece.getBounds(); e = SwingUtilities.convertMouseEvent(piece, e, this); &#125; if (e.getSource() == this) &#123; boolean containChessPoint = false; int x = 0, y = 0; int m = 0, n = 0; if (piece != null) &#123; for (int i = 1; i &lt;= x轴长; i++) &#123; for (int j = 1; j &lt;= y轴长; j++) &#123; x = point[i][j].getX(); y = point[i][j].getY(); if (rect.contains(x, y)) &#123; containChessPoint = true; m = i; n = j; break; &#125; &#125; &#125; &#125; if (piece != null &amp;&amp; containChessPoint) &#123; Color pieceColor = piece.获取棋子颜色(); if (point[m][n].isPiece()) &#123; Color c = (point[m][n].getPiece()).获取棋子颜色(); if (pieceColor.getRGB() == c.getRGB()) &#123; piece.setLocation(startX, startY); (point[startI][startJ]).set有棋子(true); &#125; else &#123; boolean ok = rule.movePieceRule(piece, startI, startJ, m, n); if (ok) &#123; ChessPiece pieceRemoved = point[m][n].getPiece(); point[m][n].reMovePiece(pieceRemoved, this); point[m][n].setPiece(piece, this); (point[startI][startJ]).set有棋子(false); record.记录棋谱(piece, startI, startJ, m, n); record.记录吃掉的棋子(pieceRemoved); rule.isWine(pieceRemoved); if (piece.棋子类别().equals(红方颜色)) &#123; 红方走棋 = false; 黑方走棋 = true; &#125; if (piece.棋子类别().equals(黑方颜色)) &#123; 黑方走棋 = false; 红方走棋 = true; &#125; validate(); repaint(); &#125; else &#123; piece.setLocation(startX, startY); (point[startI][startJ]).set有棋子(true); &#125; &#125; &#125; else &#123; boolean ok = rule .movePieceRule(piece, startI, startJ, m, n); if (ok) &#123; point[m][n].setPiece(piece, this); (point[startI][startJ]).set有棋子(false); record.记录棋谱(piece, startI, startJ, m, n); record.记录吃掉的棋子("没吃棋子"); if (piece.棋子类别().equals(红方颜色)) &#123; 红方走棋 = false; 黑方走棋 = true; &#125; if (piece.棋子类别().equals(黑方颜色)) &#123; 黑方走棋 = false; 红方走棋 = true; &#125; &#125; else &#123; piece.setLocation(startX, startY); (point[startI][startJ]).set有棋子(true); &#125; &#125; &#125; if (piece != null &amp;&amp; !containChessPoint) &#123; piece.setLocation(startX, startY); (point[startI][startJ]).set有棋子(true); &#125; &#125; &#125; public void mouseEntered(MouseEvent e) &#123; &#125; public void mouseExited(MouseEvent e) &#123; &#125; public void mouseClicked(MouseEvent e) &#123; &#125; &#125; 06 MakeChessManual类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149package cn.edu.ouc.chineseChess;import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.util.LinkedList; /** * 制作棋谱类 * * @author cnlht */ public class MakeChessManual extends JPanel implements ActionListener &#123; JTextArea text = null; JScrollPane scroll = null; ChessBoard board = null; ChessPoint[][] point; LinkedList 棋谱 = null; LinkedList 吃掉的棋子 = null; JButton buttonUndo; int i = 0; public MakeChessManual(ChessBoard board, ChessPoint[][] point) &#123; this.board = board; this.point = point; text = new JTextArea(); scroll = new JScrollPane(text); 棋谱 = new LinkedList(); 吃掉的棋子 = new LinkedList(); buttonUndo = new JButton("悔棋"); buttonUndo.setFont(new Font("隶书", Font.PLAIN, 18)); setLayout(new BorderLayout()); add(scroll, BorderLayout.CENTER); add(buttonUndo, BorderLayout.SOUTH); buttonUndo.addActionListener(this); &#125; public char numberToLetter(int n) &#123; char c = '\0'; switch (n) &#123; case 1: c = 'A'; break; case 2: c = 'B'; break; case 3: c = 'C'; break; case 4: c = 'D'; break; case 5: c = 'E'; break; case 6: c = 'F'; break; case 7: c = 'G'; break; case 8: c = 'H'; break; case 9: c = 'I'; break; case 10: c = 'J'; break; &#125; return c; &#125; public void 记录棋谱(ChessPiece piece, int startI, int startJ, int endI, int endJ) &#123; Point pStart = new Point(startI, startJ); Point pEnd = new Point(endI, endJ); MoveStep step = new MoveStep(pStart, pEnd); 棋谱.add(step); String 棋子类别 = piece.棋子类别(); String name = piece.getName(); String m = "#" + 棋子类别 + name + ": " + startI + numberToLetter(startJ) + " 到 " + endI + numberToLetter(endJ); text.append(m); if (piece.棋子类别().equals(board.黑方颜色)) text.append("\n"); &#125; public void 记录吃掉的棋子(Object object) &#123; 吃掉的棋子.add(object); &#125; public LinkedList 获取棋谱() &#123; return 棋谱; &#125; public void actionPerformed(ActionEvent e) &#123; int position = text.getText().lastIndexOf("#"); if (position != -1) text.replaceRange("", position, text.getText().length()); if (棋谱.size() &gt; 0) &#123; MoveStep lastStep = (MoveStep) 棋谱.getLast(); 棋谱.removeLast(); Object qizi = 吃掉的棋子.getLast(); 吃掉的棋子.removeLast(); String temp = qizi.toString(); if (temp.equals("没吃棋子")) &#123; int startI = lastStep.pStart.x; int startJ = lastStep.pStart.y; int endI = lastStep.pEnd.x; int endJ = lastStep.pEnd.y; ChessPiece piece = point[endI][endJ].getPiece(); point[startI][startJ].setPiece(piece, board); (point[endI][endJ]).set有棋子(false); if (piece.棋子类别().equals(board.红方颜色)) &#123; board.红方走棋 = true; board.黑方走棋 = false; &#125; if (piece.棋子类别().equals(board.黑方颜色)) &#123; board.黑方走棋 = true; board.红方走棋 = false; &#125; &#125; else &#123; ChessPiece removedPiece = (ChessPiece) qizi; int startI = lastStep.pStart.x; int startJ = lastStep.pStart.y; int endI = lastStep.pEnd.x; int endJ = lastStep.pEnd.y; ChessPiece piece = point[endI][endJ].getPiece(); point[startI][startJ].setPiece(piece, board); point[endI][endJ].setPiece(removedPiece, board); (point[endI][endJ]).set有棋子(true); if (piece.棋子类别().equals(board.红方颜色)) &#123; board.红方走棋 = true; board.黑方走棋 = false; &#125; if (piece.棋子类别().equals(board.黑方颜色)) &#123; board.黑方走棋 = true; board.红方走棋 = false; &#125; &#125; &#125; &#125; &#125; 07 MoveStep类123456789101112131415161718package cn.edu.ouc.chineseChess;import java.awt.Point; /** * 走步类 * * @author cnlht * */ public class MoveStep implements java.io.Serializable &#123; public Point pStart, pEnd; public MoveStep(Point p1, Point p2) &#123; pStart = p1; pEnd = p2; &#125; &#125; 08 Rule类package cn.edu.ouc.chineseChess;import javax.swing.*; import java.awt.*; import java.awt.event.*; /** * 走棋规则类 * * @author cnlht */ public class Rule &#123; ChessBoard board = null; ChessPiece piece = null; ChessPoint point[][]; int startI, startJ, endI, endJ; public Rule(ChessBoard board, ChessPoint point[][]) &#123; this.board = board; this.point = point; &#125; public void isWine(ChessPiece piece) &#123; this.piece = piece; if (piece.getName() == "将" || piece.getName() == "帅") &#123; if (piece.颜色类别 == "红方") &#123; JOptionPane.showMessageDialog(null, "黑方 胜利！"); &#125; else &#123; JOptionPane.showMessageDialog(null, "红方 胜利！"); &#125; &#125; &#125; public boolean movePieceRule(ChessPiece piece, int startI, int startJ, int endI, int endJ) &#123; this.piece = piece; this.startI = startI; this.startJ = startJ; this.endI = endI; this.endJ = endJ; int minI = Math.min(startI, endI); int maxI = Math.max(startI, endI); int minJ = Math.min(startJ, endJ); int maxJ = Math.max(startJ, endJ); boolean 可否走棋 = false; if (piece.getName().equals("车")) &#123; if (startI == endI) &#123; int j = 0; for (j = minJ + 1; j &lt;= maxJ - 1; j++) &#123; if (point[startI][j].isPiece()) &#123; 可否走棋 = false; break; &#125; &#125; if (j == maxJ) &#123; 可否走棋 = true; &#125; &#125; else if (startJ == endJ) &#123; int i = 0; for (i = minI + 1; i &lt;= maxI - 1; i++) &#123; if (point[i][startJ].isPiece()) &#123; 可否走棋 = false; break; &#125; &#125; if (i == maxI) &#123; 可否走棋 = true; &#125; &#125; else &#123; 可否走棋 = false; &#125; &#125; else if (piece.getName().equals("車")) &#123; if (startI == endI) &#123; int j = 0; for (j = minJ + 1; j &lt;= maxJ - 1; j++) &#123; if (point[startI][j].isPiece()) &#123; 可否走棋 = false; break; &#125; &#125; if (j == maxJ) &#123; 可否走棋 = true; &#125; &#125; else if (startJ == endJ) &#123; int i = 0; for (i = minI + 1; i &lt;= maxI - 1; i++) &#123; if (point[i][startJ].isPiece()) &#123; 可否走棋 = false; break; &#125; &#125; if (i == maxI) &#123; 可否走棋 = true; &#125; &#125; else &#123; 可否走棋 = false; &#125; &#125;else if (piece.getName().equals("马")) &#123; int xAxle = Math.abs(startI - endI); int yAxle = Math.abs(startJ - endJ); if (xAxle == 2 &amp;&amp; yAxle == 1) &#123; if (endI &gt; startI) &#123; if (point[startI + 1][startJ].isPiece()) &#123; 可否走棋 = false; &#125; else &#123; 可否走棋 = true; &#125; &#125; if (endI &lt; startI) &#123; if (point[startI - 1][startJ].isPiece()) &#123; 可否走棋 = false; &#125; else &#123; 可否走棋 = true; &#125; &#125; &#125;else if (xAxle == 1 &amp;&amp; yAxle == 2) &#123; if (endJ &gt; startJ) &#123; if (point[startI][startJ + 1].isPiece()) &#123; 可否走棋 = false; &#125; else &#123; 可否走棋 = true; &#125; &#125; if (endJ &lt; startJ) &#123; if (point[startI][startJ - 1].isPiece()) &#123; 可否走棋 = false; &#125; else &#123; 可否走棋 = true; &#125; &#125; &#125; else &#123; 可否走棋 = false; &#125; &#125; else if (piece.getName().equals("馬")) &#123; int xAxle = Math.abs(startI - endI); int yAxle = Math.abs(startJ - endJ); if (xAxle == 2 &amp;&amp; yAxle == 1) &#123; if (endI &gt; startI) &#123; if (point[startI + 1][startJ].isPiece()) &#123; 可否走棋 = false; &#125; else &#123; 可否走棋 = true; &#125; &#125; if (endI &lt; startI) &#123; if (point[startI - 1][startJ].isPiece()) &#123; 可否走棋 = false; &#125; else &#123; 可否走棋 = true; &#125; &#125; &#125;else if (xAxle == 1 &amp;&amp; yAxle == 2) &#123; if (endJ &gt; startJ) &#123; if (point[startI][startJ + 1].isPiece()) &#123; 可否走棋 = false; &#125; else &#123; 可否走棋 = true; &#125; &#125; if (endJ &lt; startJ) &#123; if (point[startI][startJ - 1].isPiece()) &#123; 可否走棋 = false; &#125; else &#123; 可否走棋 = true; &#125; &#125; &#125; else &#123; 可否走棋 = false; &#125; &#125; else if (piece.getName().equals("象")) &#123; int centerI = (startI + endI) / 2; int centerJ = (startJ + endJ) / 2; int xAxle = Math.abs(startI - endI); int yAxle = Math.abs(startJ - endJ); if (xAxle == 2 &amp;&amp; yAxle == 2 &amp;&amp; endJ &lt;= 5) &#123; if (point[centerI][centerJ].isPiece()) &#123; 可否走棋 = false; &#125; else &#123; 可否走棋 = true; &#125; &#125; else &#123; 可否走棋 = false; &#125; &#125; else if (piece.getName().equals("相")) &#123; int centerI = (startI + endI) / 2; int centerJ = (startJ + endJ) / 2; int xAxle = Math.abs(startI - endI); int yAxle = Math.abs(startJ - endJ); if (xAxle == 2 &amp;&amp; yAxle == 2 &amp;&amp; endJ &gt;= 6) &#123; if (point[centerI][centerJ].isPiece()) &#123; 可否走棋 = false; &#125; else &#123; 可否走棋 = true; &#125; &#125; else &#123; 可否走棋 = false; &#125; &#125; else if (piece.getName().equals("炮")) &#123; int number = 0; if (startI == endI) &#123; int j = 0; for (j = minJ + 1; j &lt;= maxJ - 1; j++) &#123; if (point[startI][j].isPiece()) &#123; number++; &#125; &#125; if (number &gt; 1) &#123; 可否走棋 = false; &#125; else if (number == 1) &#123; if (point[endI][endJ].isPiece()) &#123; 可否走棋 = true; &#125; &#125; else if (number == 0 &amp;&amp; !point[endI][endJ].isPiece()) &#123; 可否走棋 = true; &#125; &#125; else if (startJ == endJ) &#123; int i = 0; for (i = minI + 1; i &lt;= maxI - 1; i++) &#123; if (point[i][startJ].isPiece()) &#123; number++; &#125; &#125; if (number &gt; 1) &#123; 可否走棋 = false; &#125; else if (number == 1) &#123; if (point[endI][endJ].isPiece()) &#123; 可否走棋 = true; &#125; &#125; else if (number == 0 &amp;&amp; !point[endI][endJ].isPiece()) &#123; 可否走棋 = true; &#125; &#125; else &#123; 可否走棋 = false; &#125; &#125; else if (piece.getName().equals("兵")) &#123; int xAxle = Math.abs(startI - endI); int yAxle = Math.abs(startJ - endJ); if (endJ &gt;= 6) &#123; if (startJ - endJ == 1 &amp;&amp; xAxle == 0) &#123; 可否走棋 = true; &#125; else &#123; 可否走棋 = false; &#125; &#125; else if (endJ &lt;= 5) &#123; if ((startJ - endJ == 1) &amp;&amp; (xAxle == 0)) &#123; 可否走棋 = true; &#125; else if ((endJ - startJ == 0) &amp;&amp; (xAxle == 1)) &#123; 可否走棋 = true; &#125; else &#123; 可否走棋 = false; &#125; &#125; &#125; else if (piece.getName().equals("卒")) &#123; int xAxle = Math.abs(startI - endI); int yAxle = Math.abs(startJ - endJ); if (endJ &lt;= 5) &#123; if (endJ - startJ == 1 &amp;&amp; xAxle == 0) &#123; 可否走棋 = true; &#125; else &#123; 可否走棋 = false; &#125; &#125; else if (endJ &gt;= 6) &#123; if ((endJ - startJ == 1) &amp;&amp; (xAxle == 0)) &#123; 可否走棋 = true; &#125; else if ((endJ - startJ == 0) &amp;&amp; (xAxle == 1)) &#123; 可否走棋 = true; &#125; else &#123; 可否走棋 = false; &#125; &#125; &#125; else if (piece.getName().equals("士")) &#123; int xAxle = Math.abs(startI - endI); int yAxle = Math.abs(startJ - endJ); if (endI &lt;= 6 &amp;&amp; endI &gt;= 4 &amp;&amp; xAxle == 1 &amp;&amp; yAxle == 1) &#123; 可否走棋 = true; &#125; else &#123; 可否走棋 = false; &#125; &#125; else if (piece.getName().equals("仕")) &#123; int xAxle = Math.abs(startI - endI); int yAxle = Math.abs(startJ - endJ); if (endI &lt;= 6 &amp;&amp; endI &gt;= 4 &amp;&amp; xAxle == 1 &amp;&amp; yAxle == 1) &#123; 可否走棋 = true; &#125; else &#123; 可否走棋 = false; &#125; &#125; else if ((piece.getName().equals("帅")) || (piece.getName().equals("将"))) &#123; int xAxle = Math.abs(startI - endI); int yAxle = Math.abs(startJ - endJ); if (endI &lt;= 6 &amp;&amp; endI &gt;= 4) &#123; if ((xAxle == 1 &amp;&amp; yAxle == 0) || (xAxle == 0 &amp;&amp; yAxle == 1)) &#123; 可否走棋 = true; &#125; else &#123; 可否走棋 = false; &#125; &#125; else &#123; 可否走棋 = false; &#125; &#125; return 可否走棋; &#125; &#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[nogrok 内网穿透]]></title>
    <url>%2F2017%2F05%2F28%2Fnogrok%20%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%2F</url>
    <content type="text"><![CDATA[使用Sunny-Ngrok赠送的免费域名进行http服务映射 1、首先在本站注册成为会员 2、开通隧道123456在上图中表单信息解释： 隧道名称：可以随便填写，只是为了使用者在往后之后这个隧道是干嘛的 前置域名：服务器免费赠送的域名，请不要带上后缀，如果要sunny.ngrok.cc 只需要填写 sunny 即可 ，千万不要填写成sunny.ngrok.cc否则域名会是sunny.ngrok.cc.ngrok.cc 本地端口：可以为同一个局域网内任意一台机器进行映射，只需要填对ip和端口就行，例如：192.168.1.1:80 http验证用户名：非必填项，在需要的时候填写，否则可以不填 http验证密码：非必填项，在需要的时候填写，否则可以不填3、在需要映射的机器建立web服务 如果没有启动web服务将会看到下图提示4、下载客户端 根据自己的操作系统需求下载相对于版本 5、启动映射服务 Linux或者Mac系统下启动，需要进入到客户端的目录执行以下命令，通过隧道管理找到隧道id，然后执行./sunny clientid 隧道id 看到这样则是成功启动一条隧道，启动多条隧道把多条隧道id使用英文逗号隔开就可以了。例如： ./sunny clientid c7fb2defb4081919,3e23d14f040b2b12 上面命令就可以启动多条隧道了 6、访问服务 然后通过启动成功界面上的链接访问网站如果显示是内网搭建的web服务里面的内容就说明成功了]]></content>
  </entry>
  <entry>
    <title><![CDATA[二叉平衡树相关算法]]></title>
    <url>%2F2017%2F05%2F24%2F%E4%BA%8C%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%A0%91%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365#include&lt;stdio.h&gt;#include&lt;iostream&gt;typedef int KeyType;typedef char InfoType;typedef struct node&#123; KeyType Key; int bf; InfoType data; struct node *lchild, *rchild;&#125;BSTNode;void LeftProcess(BSTNode *&amp;p, int &amp;taller)&#123; BSTNode *p1,*p2; if (p-&gt;bf == 0) &#123; p-&gt;bf = 1; taller = 1; &#125; else if (p-&gt;bf == 1) &#123; p-&gt;bf = 0; taller = 0; &#125; else &#123; p1 = p-&gt;lchild; if (p1-&gt;bf == 1) &#123; p-&gt;lchild = p1-&gt;rchild; p1-&gt;rchild = p; p-&gt;bf = p1-&gt;bf = 0; p = p1; &#125; else if (p1-&gt;bf == -1) &#123; p2 = p1-&gt;rchild; p1-&gt;rchild = p2-&gt;lchild; p2-&gt;lchild = p1; p-&gt;lchild = p2-&gt;rchild; p2-&gt;rchild = p; if (p2-&gt;bf == 1) p-&gt;bf = p1-&gt;bf = 0; else if (p2-&gt;bf == 1) &#123; p1-&gt;bf = 0; p-&gt;bf = -1; &#125; else &#123; p1-&gt;bf = 1; p-&gt;bf = 0; &#125; p = p2; p-&gt;bf = 0; &#125; taller = 0; &#125;&#125;void RightProcess(BSTNode * &amp;p, int &amp;taller)&#123; BSTNode *p1, *p2; if (p-&gt;bf == 0) &#123; p-&gt;bf = -1; taller = 1; &#125; else if (p-&gt;bf == 1) &#123; p-&gt;bf = 0; taller = 0; &#125; else &#123; p1 = p-&gt;rchild; if (p1-&gt;bf == -1) &#123; p-&gt;rchild - p1-&gt;lchild; p1-&gt;lchild = p; p-&gt;bf = p1-&gt;bf = 0; p = p1; &#125; else if (p1-&gt;bf == 1) &#123; p2 = p1-&gt;lchild; p1-&gt;lchild = p2-&gt;rchild; p2-&gt;rchild = p1; p-&gt;rchild = p2-&gt;lchild; p2-&gt;lchild = p; if (p2-&gt;bf == 0) p-&gt;bf = p1-&gt;bf = 0; else if (p2-&gt;bf == -1) &#123; p1-&gt;bf = 0; p-&gt;bf = 0; &#125; else &#123; p1-&gt;bf = -1; p-&gt;bf = 0; &#125; p = p2; p-&gt;bf = 0; &#125; taller = 0; &#125;&#125;int InseertAVL(BSTNode * &amp;b, KeyType e, int &amp;taller)&#123; if (b == NULL) &#123; b = (BSTNode *)malloc(sizeof(BSTNode)); b-&gt;Key = e; b-&gt;lchild = b-&gt;rchild = NULL; b-&gt;bf = 1; taller = 1; &#125; else &#123; if (e == b-&gt;Key) &#123; taller = 0; return 0; &#125; if (e &lt; b-&gt;Key) &#123; if ((InseertAVL(b-&gt;lchild, e, taller)) == 0) return 0; if (taller == 1) LeftProcess(b, taller); &#125; else &#123; if ((InseertAVL(b-&gt;lchild, e, taller)) == 0) return 0; if (taller == 1) RightProcess(b, taller); &#125; &#125; return 1;&#125;void DispBSTree(BSTNode * b)&#123; if (b != NULL) &#123; printf("%d", b-&gt;Key); if (b-&gt;lchild != NULL || b-&gt;rchild != NULL) &#123; printf("("); DispBSTree(b-&gt;lchild); if (b-&gt;rchild != NULL)printf(","); DispBSTree(b-&gt;rchild); printf(")"); &#125; &#125;&#125;void LeftProcee1(BSTNode * &amp;p, int &amp;taller)&#123; BSTNode *p1, *p2; if (p-&gt;bf == 1) &#123; p-&gt;bf = 0; taller = 1; &#125; else if (p-&gt;bf == 0) &#123; p-&gt;bf = -1; taller = 0; &#125; else &#123; p1 = p-&gt;rchild; if (p1-&gt;bf == 0) &#123; p-&gt;rchild = p1-&gt;lchild; p1-&gt;lchild = p; p1 -&gt; bf = 1; p-&gt;bf = -1; p = p1; taller = 0; &#125; else if (p1-&gt;bf == -1) &#123; p-&gt;rchild = p1-&gt;lchild; p1-&gt;lchild = p; p1-&gt;bf = p-&gt;bf = 0; p = p1 = 0; taller = 1; &#125; else &#123; p2 = p1-&gt;lchild; p1-&gt;lchild = p2-&gt;rchild; p2-&gt;rchild = p1; p-&gt;rchild = p2-&gt;lchild; p2-&gt;lchild = p; if (p2-&gt;bf == 0) &#123; p-&gt;bf = 0; p1-&gt;bf = 0; &#125; else if (p2-&gt;bf = 1) &#123; p-&gt;bf = 1; p1-&gt;bf = 0; &#125; else &#123; p-&gt;bf = 0; p1-&gt;bf = -1; &#125; p2-&gt;bf = 0; p = p2; taller = 1; &#125; &#125;&#125;void RightProcess1(BSTNode * &amp;p, int &amp;taller)&#123; BSTNode *p1, *p2; if (p-&gt;bf == -1) &#123; p-&gt;bf = 0; taller = -1; &#125; else if (p-&gt;bf ==0) &#123; p-&gt;bf = 1; taller = 0; &#125; else &#123; p1 = p-&gt;lchild; if (p1-&gt;bf == 0) &#123; p-&gt;lchild = p1-&gt;rchild; p-&gt;rchild = p; p1-&gt;bf = -1; p-&gt;bf = 1; p = p1; taller = 0; &#125; else if (p1-&gt;bf == 1) &#123; p-&gt;lchild = p1-&gt;rchild; p1-&gt;rchild = p; p-&gt;bf = p-&gt;bf = 0; p = p1; taller = 1; &#125; else &#123; p2 = p1-&gt;rchild; p1-&gt;rchild = p2-&gt;lchild; p2-&gt;lchild = p1; p-&gt;lchild = p2-&gt;rchild; p2-&gt;rchild = p; if (p2-&gt;bf == 0) &#123; p-&gt;bf = 0; p1-&gt;bf = 0; &#125; else if (p2-&gt;bf == 1) &#123; p-&gt;bf = -1; p1-&gt;bf = 0; &#125; else &#123; p-&gt;bf = 0; p1-&gt;bf = 1; &#125; p2-&gt;bf = 0; p = p2; taller = 1; &#125; &#125;&#125;void Delete2(BSTNode * &amp;q, BSTNode * &amp;r, int &amp;taller)&#123; if (r-&gt;rchild == NULL) &#123; q-&gt;Key = r-&gt;Key; q = r; r = r-&gt;rchild; free(q); taller = 1; &#125; else &#123; Delete2(q, r-&gt;rchild, taller); if (taller == 1) RightProcess1(r, taller); &#125;&#125;int DeleteAVL(BSTNode * &amp;p, KeyType x, int &amp;taller)&#123; int k; BSTNode *q; if (p == NULL) return 0; else if (x &lt; p-&gt;Key) &#123; k = DeleteAVL(p-&gt;rchild, x, taller); if (taller == 1) RightProcess1(p, taller); return k; &#125; else if (x &gt; p-&gt;Key) &#123; k = DeleteAVL(p-&gt;rchild, x, taller); if (taller == 1) RightProcess1(p, taller); return k; &#125; else &#123; q = p; if (p-&gt;rchild == NULL) &#123; p = p-&gt;lchild; free(q); taller = 1; &#125; else if (p-&gt;lchild == NULL) &#123; p = p-&gt;rchild; free(q); taller = 1; &#125; else &#123; Delete2(q, q-&gt;lchild, taller); if (taller == 1) LeftProcee1(q, taller); p = q; &#125; return 1; &#125;&#125;void main()&#123; BSTNode *b = NULL; int i, j, k; KeyType a[] = &#123; 4,9,0,1,8,6,3,5,2,7 &#125;, n = 10; printf("创建一颗AVL树\n"); for (i = 0; i &lt; n; i++) &#123; printf("第%d步，插入%d元素：", i + 1, a[i]); InseertAVL(b, a[i], j); DispBSTree(b); printf("\n"); &#125; printf("结果AVL："); DispBSTree(b); printf("\n"); printf("删除节点:\n"); k = 8; printf("删除节点%d:", k); DeleteAVL(b, k, j); printf("AVL:"); DispBSTree(b); printf("\n"); k -= 2; printf("删除节点%d", k); DeleteAVL(b, j, k); printf("AVL:"); DispBSTree(b); printf("\n"); getchar();&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[树莓派摄像头配置]]></title>
    <url>%2F2017%2F05%2F22%2F%E6%A0%91%E8%8E%93%E6%B4%BE.%E6%91%84%E5%83%8F%E5%A4%B4%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1. 安装1sudo apt install motion2. 配置 备份配置文件1sudo cp /etc/motion/motion.conf /etc/motion/motion.conf.bak 打开配置文档1sudo vim /etc/motion/motion.conf 更改文档中以下内容123456width 640 #图像的宽height 480 #图像的高target_dir /home/pi/motion-images #图片保存的路径stream_localhost off #允许通过网页查看摄像头stream_auth_method 2 #开启密码认证stream_authentication 用户名:密码 #网页查看摄像头的用户名和密码 官方详细配置说明：http://lavrsen.dk/foswiki/bin/view/Motion/ConfigFileOptions 3. 运行1sudo motion]]></content>
  </entry>
  <entry>
    <title><![CDATA[树莓派实现无线中继路由]]></title>
    <url>%2F2017%2F05%2F06%2F%E7%94%A8%E7%BD%91%E7%BA%BF%E8%BF%9E%E6%8E%A5%E6%A0%91%E8%8E%93%E6%B4%BE%E5%92%8Cpc%2F</url>
    <content type="text"><![CDATA[设置PC端ip]]></content>
  </entry>
  <entry>
    <title><![CDATA[微信开发者]]></title>
    <url>%2F2017%2F05%2F02%2F%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[树莓派 无线网卡配置]]></title>
    <url>%2F2017%2F05%2F02%2F%5B%E6%A0%91%E8%8E%93%E6%B4%BE%5D%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[一、查看网卡状态是否正常- 把无线网卡插到树莓派上，输入命令ifconfig -a查看是否有wlan0的信息，如果有说明网卡状态正常，可以跳过第二步，直接配置无线网络。如果查不到wlan0的信息，则需要安装无线网卡的驱动。二、查看无线网卡的信息- 输入命令dmesg | grep usb查看无线网卡的信息，主要是看制造厂家（Manufacturer）。比如，我的网卡信息是usb 1-1.3: Manufacturer: Realtek- 以Realtek为例，安装无线网卡驱动。如果现在你的树莓派能联网，输入安装命令就可以安装Realtek的驱动了。- 首先搜索Realtek驱动：- apt-cache search realtek看到下面信息：firmware-realtek – Binary firmware for Realtek wired and wireless network adapters安装Realtek驱动：- sudo apt-get install firmware-realtek如果你的树莓派现在不能上网，那么你可以去镜像站点中下载相关驱动。我推荐阿里云的镜像站点，速度比较快。http://mirrors.aliyun.com/raspbian/raspbian/pool/non-free/f/firmware-nonfree下载firmware-realtek_0.43_all.deb，用winscp上传到树莓派的/tmp目录中。输入命令安装：- sudo dpkg -i /tmp/firmware-realtek_0.43_all.deb三、配置无线网络 用编辑器nano打开interfaces文件 sudo nano /etc/network/interfaces我的interfaces文件是这样的： 123456789auto loiface lo inet loopbackiface eth0 inet dhcpallow-hotplug wlan0iface wlan0 inet manualwpa-roam /etc/wpa_supplicant/wpa_supplicant.confiface default inet dhcp 我们把无线网卡部分全部用#注释掉，然后添加自己的配置信息，最终结果如下： 123456789101112auto loiface lo inet loopbackiface eth0 inet dhcpauto wlan0#allow-hotplug wlan0#iface wlan0 inet manualiface wlan0 inet dhcpwpa-conf /etc/wpa.conf#wpa-roam /etc/wpa_supplicant/wpa_supplicant.confiface default inet dhcp 使用nano编辑器，ctrl+o保存，ctrl+x退出。(别忘啦sudo 要不改不了，ctrl+o enter ctrl+x 顺序) 用编辑器nano创建 /etc/wpa.conf 文件： sudo nano /etc/wpa.conf如果你的wifi没有密码 1234network=&#123;[Tab] ssid="你的无线网络名称（ssid）"[Tab] key_mgmt=NONE&#125; 如果你的wifi使用WEP加密 12345network=&#123;[Tab] ssid="你的无线网络名称（ssid）"[Tab] key_mgmt=NONE[Tab] wep_key0="你的wifi密码"&#125; 如果你的wifi使用WPA/WPA2加密12345network=&#123;[Tab] ssid="你的无线网络名称（ssid）"[Tab] key_mgmt=WPA-PSK[Tab] psk="你的wifi密码"&#125; 注1：所有符号都是半角符号（英文状态下的符号），“[Tab]”表示按一次Tab键注2：如果你不清楚wifi的加密模式，可以在安卓手机上用root explorer打开 /data/misc/wifi/wpa/wpa_supplicant.conf，查看wifi的信息。 比如，我的wpa.conf文件是这样的：12345network=&#123; ssid="238_2" key_mgmt=WPA-PSK psk="fangjun_"&#125; 最后输入命令启用无线网卡： sudo ifup wlan0 可以连无线网了。 注意 远程所使用的ip地址变啦 无线 有线连接 ip地址变啦 这个坑我卡啦3天 甚至怀疑硬件有问题，蠢蠢蠢！！！！]]></content>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派起步]]></title>
    <url>%2F2017%2F04%2F28%2F%E3%80%90%E6%A0%91%E8%8E%93%E6%B4%BE%E3%80%91%E7%94%B5%E8%84%91%E6%98%BE%E7%A4%BA%E5%99%A8%E5%BD%93%E6%A0%91%E8%8E%93%E6%B4%BE%E6%98%BE%E7%A4%BA%E5%B1%8F%2F</url>
    <content type="text"><![CDATA[简要步骤 基本材料：树莓派一个，路由器一个，网线一条（用于连接路由器），笔记本一台 提前下载好需要的文件：树莓派的官网下载raspbian : https://www.raspberrypi.org/downloads/ 格式化内存卡 SDFormatter：http://pan.baidu.com/s/1bzE9qu 写入镜像 win32diskimager ：http://pan.baidu.com/s/1o8AvKyI 利用putty进行ssh连接 ： http://pan.baidu.com/s/1qXJ4Q2S 安装系统 使用putty ip地址可以从路由器后台获得 这时候点open会报错（3b树莓派默认关闭ssh） 解决方法：在boot（你的sd卡）下新建ssh文件夹即可 安装xrdp服务 在putty点击open后的弹出窗口输入 用户名：pi 密码：raspberry（密码看不见） 然后输入命令：sudo apt-get install xrdp 打开电脑自带的远程桌面连接工具 这时候报错：error ：connect problem 解决方法： 在putty点击open后的弹出窗口输入 sudo apt-get install vnc4server tightvncserver 多试几次 登陆成功如图]]></content>
  </entry>
  <entry>
    <title><![CDATA[E3D插件]]></title>
    <url>%2F2017%2F04%2F04%2FE3D%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[E3插件的安装方法 E3D插件 双击 ElementInstaller_2.0.7.2008_Win_Full.exe 程序安装（建议右键用管理员身份运行，一般默认即可，也可根据自身情况选择设置） 复制破解文件夹中的 Element.aex 到AE插件目录覆盖替换（目录一般为：…\Adobe\Adobe After Effects 版本号 \Support Files\Plug-ins\VideoCopilot） 打开 AE 软件, 应用 E3D 插件到一个固态层上，将会有弹窗出现， 点击Install License，选择破解文件夹中的 ElementLicense.license 完成破解 完成享用。]]></content>
  </entry>
  <entry>
    <title><![CDATA[数据结构上机实验]]></title>
    <url>%2F2017%2F03%2F31%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[01 约瑟夫环问题123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;typedef struct node&#123; int data; struct node *next;&#125;node;node *creat(node *head, int n)&#123; int i = 1; node *s, *p = head; while (i &lt;= n) &#123; s = (node *)malloc(sizeof(node)); s-&gt;data = i++; p-&gt;next = s; p = p-&gt;next; &#125; p-&gt;next = head-&gt;next; free(head); return p-&gt;next;&#125;int main()&#123; int i, n, m; node *head, *newstart, *h, *t; head = (node *)malloc(sizeof(node)); printf("请输入数据长度n，数据间隔m\n"); scanf("%d %d", &amp;n, &amp;m); newstart = creat(head, n); h = newstart; while (h != h-&gt;next) &#123; for (i = 1; i&lt;m; i++) &#123; h = h-&gt;next; &#125; t = h-&gt;next; printf("%d-&gt;\n", h-&gt;next-&gt;data); h-&gt;next = t-&gt;next; h = t-&gt;next; free(t); &#125; printf("%d\n", h-&gt;data); return 0;&#125; 02 一元多项式相加123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129#include&lt;iostream&gt;using namespace std; struct Node&#123; double coe;//系数 int exp;//指数 Node *next;&#125;;//创建链表，节点数为一元多项式的项数void CreatPoly(Node *&amp;head,int n)//写成*head报错 为什么？&#123; head=(Node *)new Node; head-&gt;coe=0; head-&gt;exp=0; head-&gt;next=NULL;//初始化头节点 Node *p=head; for(int i=0;i&lt;n;i++)&#123; p-&gt;next=(Node *)new Node;//尾插法建表 p=p-&gt;next; cin&gt;&gt;p-&gt;coe&gt;&gt;p-&gt;exp; p-&gt;next=NULL; &#125;&#125;//打印表void ShowPoly(Node *head)&#123; if(head-&gt;next == NULL) putchar('0'); else&#123; for(Node *p=head-&gt;next;p!=NULL;p=p-&gt;next)&#123;//遍历所有节点 if(p!=head-&gt;next&amp;&amp;p-&gt;coe&gt;0)putchar('+'); if(p-&gt;coe==1)&#123; if(p-&gt;exp==0)putchar('1'); &#125; if(p-&gt;coe==1&amp;&amp;p-&gt;exp==0)putchar('1'); else if(p-&gt;coe==-1)putchar('-'); else cout&lt;&lt;p-&gt;coe; //指数为0，1时特殊处理 switch(p-&gt;exp)&#123; case 0:break; case 1:putchar('X');break; default: p-&gt;exp&lt;0?printf("x^(%d)",p-&gt;exp):printf("x^%d",p-&gt;exp);break;//看不懂 break; &#125; &#125; &#125; cout&lt;&lt;endl;&#125;char comp(int a,int b)&#123; if(a&gt;b)return '&gt;'; if(a&lt;b)return '&lt;'; return '=';&#125;//相加void AddPoly(Node *&amp;pA, Node *&amp;pB) // 传进两个链表的头指针&#123;Node *ha = pA;Node *hb = pB;Node *qa = ha-&gt;next; // ha, hb分别跟在qa, qb的后一位置Node *qb = hb-&gt;next; // qa, qb分别指向Pa, Pb中当前比较元素while(qa &amp;&amp; qb)&#123;double sum = 0;int a = qa-&gt;exp;int b = qb-&gt;exp;switch( comp(a, b) ) &#123;case '&lt;':ha = qa;qa = qa-&gt;next; // 非ha = ha-&gt;next;break;case '=':sum = qa-&gt;coe + qb-&gt;coe;if(sum != 0.0) &#123;qa-&gt;coe = sum;ha = qa;&#125;else &#123;if(ha-&gt;next != qa)cout &lt;&lt; "Error: ha-&gt;next != qa" &lt;&lt; endl;ha-&gt;next = ha-&gt;next-&gt;next; // 删除和为0的结点，ha不变，还在qa后一位置&#125;if(hb-&gt;next != qb)cout &lt;&lt; "Error: hb-&gt;next != qb" &lt;&lt; endl;hb-&gt;next = hb-&gt;next-&gt;next;qb = hb-&gt;next;qa = ha-&gt;next;break;case '&gt;':hb-&gt;next = hb-&gt;next-&gt;next; // 删除qb指向的结点qb-&gt;next = ha-&gt;next; // 将qb插入ha后qa前ha-&gt;next = qb;qb = hb-&gt;next; // not qb = ha-&gt;nextha = ha-&gt;next;break;default:cout &lt;&lt; "Error!" &lt;&lt; endl;break;&#125;&#125;if(qb)ha-&gt;next = qb;&#125;int main()&#123; Node *A=NULL; Node *B=NULL; int countA; int countB; cout&lt;&lt;"输入A的项数"&lt;&lt;endl;cin&gt;&gt;countA; cout&lt;&lt;"输入B的项数"&lt;&lt;endl;cin&gt;&gt;countB; CreatPoly(A,countA); CreatPoly(B,countB); cout&lt;&lt;"A="&lt;&lt;endl; ShowPoly(A); cout&lt;&lt;"B="&lt;&lt;endl; ShowPoly(B); AddPoly(A,B); cout&lt;&lt;"A+B="&lt;&lt;endl; ShowPoly(A); delete(A);&#125; 03 栈 正则表达式运算123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;iostream&gt;using namespace std;#define maxsize 1000//中则表达式str转换为后缀表达式void trans(char str[], char exp[])&#123; struct &#123; char data[maxsize]; int top; &#125;op; char ch; int i = 0, t = 0; op.top = -1; ch = str[i]; i++; while (ch != '\0') &#123; switch (ch) &#123; case '(': op.top++; op.data[op.top] = ch; break; case ')': while (op.data[op.top] != '(') &#123; exp[t] = op.data[op.top]; op.top--; t++; &#125; op.top--; break; case '+': case '-': while (op.top != -1 &amp;&amp; op.data[op.top] != '(') &#123; exp[t] = op.data[op.top]; op.top--; t++; &#125; op.top--; op.data[op.top] = ch; break; case '*': case '/': while (op.data[op.top] == '*' || op.data[op.top] == '/') &#123; exp[t] = op.data[op.top]; op.top--; t++; &#125; op.top++; op.data[op.top] = ch; break; case ' ': break; default: while (ch &gt;= '0'&amp;&amp;ch &lt;= '9') &#123; exp[t] = ch; t++; ch = str[i]; i++; &#125; i--; exp[t] = '#'; t++; &#125; ch = str[i]; i++; &#125; while (op.top != -1) &#123; exp[t] = op.data[op.top]; t++; op.top--; &#125; exp[t] = '\0';&#125;//后缀表达式的求值float compvalue(char exp[])&#123; struct &#123; float data[maxsize]; int top; &#125;st; float d; char ch; int t = 0; st.top = -1; ch = exp[t]; t++; while (ch != '\0') &#123; switch (ch) &#123; case '+': st.data[st.top - 1] = st.data[st.top - 1] + st.data[st.top]; st.top--; break; case '-': st.data[st.top - 1] = st.data[st.top - 1] - st.data[st.top]; st.top--; break; case '*': st.data[st.top - 1] = st.data[st.top - 1] * st.data[st.top]; st.top--; break; case '/': if (st.data[st.top] != 0) st.data[st.top - 1] = st.data[st.top - 1] / st.data[st.top]; else &#123; printf("\nerror! \n"); exit(0); &#125; st.top--; break; default: d = 0; while (ch &gt;= '0'&amp;&amp;ch &lt;= '9') &#123; d = 10 * d + ch - '0'; ch = exp[t]; t++; &#125; st.top++; st.data[st.top] = d; &#125; ch = exp[t]; t++; &#125; return st.data[st.top];&#125;int main()&#123; char str[maxsize], exps[maxsize]; printf("please input a expressions,just include +,-,*,/and integers:"); cin &gt;&gt; str;//输入一个中缀表达式 printf("old is: %s\n", str); trans(str, exps);//转换 printf("after is: %s\n", exps); printf("the result is: %g\n", compvalue(exps)); //求值并输出 return 0;&#125; ![])(http://i1.piimg.com/567571/a11fae0ace0176df.png) 04 车厢排序问题123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210#include &lt;iostream&gt; using namespace std;template&lt;class T&gt;class My_queue;template&lt;class T&gt;class Node&#123;private: T data; Node&lt;T&gt; *next;public: Node() &#123; next = 0; &#125; Node(T d) &#123; data = d; next = 0; &#125; friend My_queue&lt;T&gt;;&#125;;template&lt;class T&gt;class My_queue&#123;private: Node&lt;T&gt; *tail;public: My_queue() &#123; tail = new Node&lt;T&gt;(); tail-&gt;next = tail; &#125; bool empty() &#123; return (tail-&gt;next == tail); &#125; void push(T d) &#123; Node&lt;T&gt; *p = new Node&lt;T&gt;(d); p-&gt;next = tail-&gt;next; tail-&gt;next = p; tail = p; &#125; T front() &#123; if (empty()) &#123; cout &lt;&lt; "queue is empty!" &lt;&lt; endl; exit(0); &#125; Node&lt;T&gt; *p = tail-&gt;next; T data = p-&gt;next-&gt;data; return data; &#125; T back() &#123; if (empty()) &#123; cout &lt;&lt; "queue is empty!" &lt;&lt; endl; exit(0); &#125; T data = tail-&gt;data; return data; &#125; void pop() &#123; Node&lt;T&gt; *p = tail-&gt;next; Node&lt;T&gt; *q = p-&gt;next; p-&gt;next = q-&gt;next; if (q == tail) tail = p; delete q; &#125;&#125;;void OutPut(int&amp; minH, int&amp; minQ, My_queue&lt;int&gt; H[], int k, int n);bool Hold(int c, int&amp; minH, int&amp; minQ, My_queue&lt;int&gt; H[], int k);bool Rail_Road(int p[], int n, int k)&#123; //k个缓冲轨，车厢初始排序为p[1...n] //创建与缓冲轨对应的队列 My_queue&lt;int&gt; *H; H = new My_queue&lt;int&gt;[k]; int NowOut = 1; //下一次要出轨的车厢 int minH = n + 1; //缓冲轨中编号最小的车厢 int minQ = k; //编号最小的车厢所在缓冲轨的编号 //车厢重排序 for (int i = 0; i&lt;n; i++) &#123; if (p[i] == NowOut) &#123; cout &lt;&lt; "Move car " &lt;&lt; p[i] &lt;&lt; " from input to output" &lt;&lt; endl; NowOut++; //从缓冲轨中输出 while (minH == NowOut) &#123; OutPut(minH, minQ, H, k, n); NowOut++; if (NowOut == n + 1) //输出全部车厢后返回 return true; &#125; &#125; else &#123; //将p[i]放入某个缓冲轨 if (!Hold(p[i], minH, minQ, H, k)) return false; &#125; &#125; return true;&#125;void OutPut(int&amp; minH, int&amp; minQ, My_queue&lt;int&gt; H[], int k, int n)&#123; //该函数实现把一节车厢从缓冲轨送至出轨处 //同时修改minH minQ的值 int c; //从队列中pop掉编号最小的车厢minH c = H[minQ].front(); H[minQ].pop(); cout &lt;&lt; "Move car " &lt;&lt; c &lt;&lt; " from holding queue " &lt;&lt; minQ + 1 &lt;&lt; " to output " &lt;&lt; endl; //检查所有队列，搜索新的minH minQ minH = n + 1; for (int i = 0; i&lt;k; i++) if ((!H[i].empty()) &amp;&amp; (H[i].front()&lt;minH)) &#123; minH = H[i].front(); minQ = i; &#125;&#125;bool Hold(int c, int&amp; minH, int&amp; minQ, My_queue&lt;int&gt; H[], int k)&#123; //该函数是将车厢c放入缓冲轨中 //为车厢c寻找最优缓冲轨 int BestQueue = k;//初始化缓冲轨的编号 int BestLast = 0; //最优缓冲轨的队尾车厢编号 int x; //扫描缓冲轨 for (int i = 0; i&lt;k; i++) &#123; if (!H[i].empty()) &#123; x = H[i].back(); if (c&gt;x &amp;&amp; x&gt;BestLast) &#123; BestLast = x; BestQueue = i; &#125; &#125; else &#123; //H[i]为空时 if (BestQueue == k) BestQueue = i; &#125; &#125; if (BestQueue == k) //没有可用的缓冲轨 return false; H[BestQueue].push(c); cout &lt;&lt; "Move car " &lt;&lt; c &lt;&lt; " from input to holding queue " &lt;&lt; BestQueue + 1 &lt;&lt; endl; //必要时修改minH和minS if (c&lt;minH) &#123; minH = c; minQ = BestQueue; &#125; return true;&#125;int main()&#123; int p[9] = &#123; 3,6,9,2,4,7,1,8,5 &#125;; if (Rail_Road(p, 9, 3)) cout &lt;&lt; "车厢重排序成功" &lt;&lt; endl; else cout &lt;&lt; "车厢重排序失败" &lt;&lt; endl; getchar();&#125; 05 三元组实现稀疏矩阵的转置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;iostream&gt;using namespace std;struct node&#123; int r;//行标 int c;//列标 double dat;//数据&#125;;class triple&#123;private: int row;//行数 int col;//列数 int num;//非零个数 node *ptr;//存放数组的首地址public: triple(int co,int ro,int nu):col(co),row(ro),num(nu) &#123; ptr=new node[num];//分配num，盛放num个元素 cout&lt;&lt;"请输入"&lt;&lt;num&lt;&lt;"个三元组元素\n"&lt;&lt;"格式为：2 3 6.7\n其中2为行标，3为列标，6.7为数据元素"&lt;&lt;endl; for(int i=0;i&lt;num;i++) &#123; cin&gt;&gt;ptr[i].r; cin&gt;&gt;ptr[i].c; cin&gt;&gt;ptr[i].dat; &#125; &#125; ~triple()&#123;delete[]ptr;&#125;void print()&#123; int flag=ptr[0].r; cout&lt;&lt;"第"&lt;&lt;flag&lt;&lt;"行元素为："; for(int i=0;i&lt;num;i++) &#123; if(ptr[i].r!=flag) &#123; cout&lt;&lt;"\n"; flag=ptr[i].r; cout&lt;&lt;endl; cout&lt;&lt;"第"&lt;&lt;flag&lt;&lt;"行元素为："; &#125; cout&lt;&lt;"("&lt;&lt;ptr[i].r&lt;&lt;","&lt;&lt;ptr[i].c&lt;&lt;","&lt;&lt;ptr[i].dat&lt;&lt;")"; &#125;&#125;void transpose()&#123; int flag=0; for(int i=1;i&lt;=col;i++) &#123; for(int j=0;j&lt;num;j++) &#123; if(ptr[j].c==i) &#123; if(flag!=ptr[j].c) &#123; flag=ptr[j].c; cout&lt;&lt;"\n第"&lt;&lt;ptr[j].c&lt;&lt;"行为："; &#125; cout&lt;&lt;"("&lt;&lt;ptr[j].c&lt;&lt;","&lt;&lt;ptr[j].r&lt;&lt;","&lt;&lt;ptr[j].dat&lt;&lt;")"; &#125; &#125; &#125;&#125;&#125;;int main()&#123; cout&lt;&lt;"请输入数组的行列和元素个数:\n"; int a[3]; for(int i=0;i&lt;3;i++) &#123; cin&gt;&gt;a[i]; &#125; triple t(a[0],a[1],a[2]); t.print();//输出原矩阵 cout&lt;&lt;"转制后的矩阵为:\n"; t.transpose();&#125; 06 二叉树后序遍历的非递归算法define _CRT_SECURE_NO_DEPRECATE//转载请标明出处，原文地址：http://blog.csdn.net/hackbuteer1/article/details/6583988#include&lt;iostream&gt; #include&lt;queue&gt; #include&lt;stack&gt; using namespace std;//二叉树结点的描述 typedef struct BiTNode&#123; char data; struct BiTNode *lchild, *rchild; //左右孩子 &#125;BiTNode, *BiTree;//按先序遍历创建二叉树 //BiTree *CreateBiTree() //返回结点指针类型 //void CreateBiTree(BiTree &amp;root) //引用类型的参数 void CreateBiTree(BiTNode **root) //二级指针作为函数参数 &#123; char ch; //要插入的数据 scanf("\n%c", &amp;ch); //cin&gt;&gt;ch; if (ch == '#') *root = NULL; else &#123; *root = (BiTNode *)malloc(sizeof(BiTNode)); (*root)-&gt;data = ch; printf("请输入%c的左孩子：", ch); CreateBiTree(&amp;((*root)-&gt;lchild)); printf("请输入%c的右孩子：", ch); CreateBiTree(&amp;((*root)-&gt;rchild)); &#125;&#125;//前序遍历的算法程序 void PreOrder(BiTNode *root)&#123; if (root == NULL) return; printf("%c ", root-&gt;data); //输出数据 PreOrder(root-&gt;lchild); //递归调用，前序遍历左子树 PreOrder(root-&gt;rchild); //递归调用，前序遍历右子树 &#125;//中序遍历的算法程序 void InOrder(BiTNode *root)&#123; if (root == NULL) return; InOrder(root-&gt;lchild); //递归调用，前序遍历左子树 printf("%c ", root-&gt;data); //输出数据 InOrder(root-&gt;rchild); //递归调用，前序遍历右子树 &#125;//后序遍历的算法程序 void PostOrder(BiTNode *root)&#123; if (root == NULL) return; PostOrder(root-&gt;lchild); //递归调用，前序遍历左子树 PostOrder(root-&gt;rchild); //递归调用，前序遍历右子树 printf("%c ", root-&gt;data); //输出数据 &#125;/*二叉树的非递归前序遍历，前序遍历思想：先让根进栈，只要栈不为空，就可以做弹出操作，每次弹出一个结点，记得把它的左右结点都进栈，记得右子树先进栈，这样可以保证右子树在栈中总处于左子树的下面。*/void PreOrder_Nonrecursive(BiTree T) //先序遍历的非递归 &#123; if (!T) return; stack&lt;BiTree&gt; s; s.push(T); while (!s.empty()) &#123; BiTree temp = s.top(); cout &lt;&lt; temp-&gt;data &lt;&lt; " "; s.pop(); if (temp-&gt;rchild) s.push(temp-&gt;rchild); if (temp-&gt;lchild) s.push(temp-&gt;lchild); &#125;&#125;void PreOrder_Nonrecursive1(BiTree T) //先序遍历的非递归&#123; if (!T) return; stack&lt;BiTree&gt; s; BiTree curr = T; while (curr != NULL || !s.empty()) &#123; while (curr != NULL) &#123; cout &lt;&lt; curr-&gt;data &lt;&lt; " "; s.push(curr); curr = curr-&gt;lchild; &#125; if (!s.empty()) &#123; curr = s.top(); s.pop(); curr = curr-&gt;rchild; &#125; &#125;&#125;void PreOrder_Nonrecursive2(BiTree T) //先序遍历的非递归 &#123; if (!T) return; stack&lt;BiTree&gt; s; while (T) // 左子树上的节点全部压入到栈中 &#123; s.push(T); cout &lt;&lt; T-&gt;data &lt;&lt; " "; T = T-&gt;lchild; &#125; while (!s.empty()) &#123; BiTree temp = s.top()-&gt;rchild; // 栈顶元素的右子树 s.pop(); // 弹出栈顶元素 while (temp) // 栈顶元素存在右子树，则对右子树同样遍历到最下方 &#123; cout &lt;&lt; temp-&gt;data &lt;&lt; " "; s.push(temp); temp = temp-&gt;lchild; &#125; &#125;&#125;void InOrderTraverse1(BiTree T) // 中序遍历的非递归 &#123; if (!T) return; BiTree curr = T; // 指向当前要检查的节点 stack&lt;BiTree&gt; s; while (curr != NULL || !s.empty()) &#123; while (curr != NULL) &#123; s.push(curr); curr = curr-&gt;lchild; &#125;//while if (!s.empty()) &#123; curr = s.top(); s.pop(); cout &lt;&lt; curr-&gt;data &lt;&lt; " "; curr = curr-&gt;rchild; &#125; &#125;&#125;void InOrderTraverse(BiTree T) // 中序遍历的非递归 &#123; if (!T) return; stack&lt;BiTree&gt; s; BiTree curr = T-&gt;lchild; // 指向当前要检查的节点 s.push(T); while (curr != NULL || !s.empty()) &#123; while (curr != NULL) // 一直向左走 &#123; s.push(curr); curr = curr-&gt;lchild; &#125; curr = s.top(); s.pop(); cout &lt;&lt; curr-&gt;data &lt;&lt; " "; curr = curr-&gt;rchild; &#125;&#125;void PostOrder_Nonrecursive1(BiTree T) // 后序遍历的非递归 &#123; stack&lt;BiTree&gt; S; BiTree curr = T; // 指向当前要检查的节点 BiTree previsited = NULL; // 指向前一个被访问的节点 while (curr != NULL || !S.empty()) // 栈空时结束 &#123; while (curr != NULL) // 一直向左走直到为空 &#123; S.push(curr); curr = curr-&gt;lchild; &#125; curr = S.top(); // 当前节点的右孩子如果为空或者已经被访问，则访问当前节点 if (curr-&gt;rchild == NULL || curr-&gt;rchild == previsited) &#123; cout &lt;&lt; curr-&gt;data &lt;&lt; " "; previsited = curr; S.pop(); curr = NULL; &#125; else curr = curr-&gt;rchild; // 否则访问右孩子 &#125;&#125;void PostOrder_Nonrecursive(BiTree T) // 后序遍历的非递归 双栈法 &#123; stack&lt;BiTree&gt; s1, s2; BiTree curr; // 指向当前要检查的节点 s1.push(T); while (!s1.empty()) // 栈空时结束 &#123; curr = s1.top(); s1.pop(); s2.push(curr); if (curr-&gt;lchild) s1.push(curr-&gt;lchild); if (curr-&gt;rchild) s1.push(curr-&gt;rchild); &#125; while (!s2.empty()) &#123; printf("%c ", s2.top()-&gt;data); s2.pop(); &#125;&#125;int visit(BiTree T)&#123; if (T) &#123; printf("%c ", T-&gt;data); return 1; &#125; else return 0;&#125;void LeverTraverse(BiTree T) //方法一、非递归层次遍历二叉树 &#123; queue &lt;BiTree&gt; Q; BiTree p; p = T; if (visit(p) == 1) Q.push(p); while (!Q.empty()) &#123; p = Q.front(); Q.pop(); if (visit(p-&gt;lchild) == 1) Q.push(p-&gt;lchild); if (visit(p-&gt;rchild) == 1) Q.push(p-&gt;rchild); &#125;&#125;void LevelOrder(BiTree BT) //方法二、非递归层次遍历二叉树 &#123; BiTNode *queue[10];//定义队列有十个空间 if (BT == NULL) return; int front, rear; front = rear = 0; queue[rear++] = BT; while (front != rear)//如果队尾指针不等于对头指针时 &#123; cout &lt;&lt; queue[front]-&gt;data &lt;&lt; " "; //输出遍历结果 if (queue[front]-&gt;lchild != NULL) //将队首结点的左孩子指针入队列 &#123; queue[rear] = queue[front]-&gt;lchild; rear++; //队尾指针后移一位 &#125; if (queue[front]-&gt;rchild != NULL) &#123; queue[rear] = queue[front]-&gt;rchild; //将队首结点的右孩子指针入队列 rear++; //队尾指针后移一位 &#125; front++; //对头指针后移一位 &#125;&#125;int depth(BiTNode *T) //树的深度 &#123; if (!T) return 0; int d1, d2; d1 = depth(T-&gt;lchild); d2 = depth(T-&gt;rchild); return (d1&gt;d2 ? d1 : d2) + 1; //return (depth(T-&gt;lchild)&gt;depth(T-&gt;rchild)?depth(T-&gt;lchild):depth(T-&gt;rchild))+1; &#125;int CountNode(BiTNode *T)&#123; if (T == NULL) return 0; return 1 + CountNode(T-&gt;lchild) + CountNode(T-&gt;rchild);&#125;int main(void)&#123; BiTNode *root = NULL; //定义一个根结点 int flag = 1, k; printf(" 本程序实现二叉树的基本操作。\n"); printf("可以进行建立二叉树，递归先序、中序、后序遍历，非递归先序、中序遍历及非递归层序遍历等操作。\n"); while (flag) &#123; printf("\n"); printf("|--------------------------------------------------------------|\n"); printf("| 二叉树的基本操作如下: |\n"); printf("| 0.创建二叉树 |\n"); printf("| 1.递归先序遍历 |\n"); printf("| 2.递归中序遍历 |\n"); printf("| 3.递归后序遍历 |\n"); printf("| 4.非递归先序遍历 |\n"); printf("| 5.非递归中序遍历 |\n"); printf("| 6.非递归后序遍历 |\n"); printf("| 7.非递归层序遍历 |\n"); printf("| 8.二叉树的深度 |\n"); printf("| 9.二叉树的结点个数 |\n"); printf("| 10.退出程序 |\n"); printf("|--------------------------------------------------------------|\n"); printf(" 请选择功能："); scanf("%d", &amp;k); switch (k) &#123; case 0: printf("请建立二叉树并输入二叉树的根节点："); CreateBiTree(&amp;root); break; case 1: if (root) &#123; printf("递归先序遍历二叉树的结果为："); PreOrder(root); printf("\n"); &#125; else printf(" 二叉树为空！\n"); break; case 2: if (root) &#123; printf("递归中序遍历二叉树的结果为："); InOrder(root); printf("\n"); &#125; else printf(" 二叉树为空！\n"); break; case 3: if (root) &#123; printf("递归后序遍历二叉树的结果为："); PostOrder(root); printf("\n"); &#125; else printf(" 二叉树为空！\n"); break; case 4: if (root) &#123; printf("非递归先序遍历二叉树："); PreOrder_Nonrecursive1(root); printf("\n"); &#125; else printf(" 二叉树为空！\n"); break; case 5: if (root) &#123; printf("非递归中序遍历二叉树："); InOrderTraverse1(root); printf("\n"); &#125; else printf(" 二叉树为空！\n"); break; case 6: if (root) &#123; printf("非递归后序遍历二叉树："); PostOrder_Nonrecursive(root); printf("\n"); &#125; else printf(" 二叉树为空！\n"); break; case 7: if (root) &#123; printf("非递归层序遍历二叉树："); //LeverTraverse(root); LevelOrder(root); printf("\n"); &#125; else printf(" 二叉树为空！\n"); break; case 8: if (root) printf("这棵二叉树的深度为：%d\n", depth(root)); else printf(" 二叉树为空！\n"); break; case 9: if (root) printf("这棵二叉树的结点个数为：%d\n", CountNode(root)); else printf(" 二叉树为空！\n"); break; default: flag = 0; printf("程序运行结束，按任意键退出！\n"); &#125; &#125; system("pause"); return 0;&#125; 07 图的两种遍历方法及对应的生成树 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152#define _CRT_SECURE_NO_WARNINGS//图的遍历是指按某条搜索路径访问图中每个结点，使得每个结点均被访问一次，而且仅被访问一次。图的遍历有深度遍历算法和广度遍历算法，程序如下：#include &lt;iostream&gt;#include&lt;stdio.h&gt;#define INFINITY 32767#define MAX_VEX 20 //最大顶点个数#define QUEUE_SIZE (MAX_VEX+1) //队列长度using namespace std;bool *visited; //访问标志数组 //图的邻接矩阵存储结构typedef struct &#123; char *vexs; //顶点向量 int arcs[MAX_VEX][MAX_VEX]; //邻接矩阵 int vexnum, arcnum; //图的当前顶点数和弧数&#125;Graph;//队列类class Queue &#123;public: void InitQueue() &#123; base = (int *)malloc(QUEUE_SIZE * sizeof(int)); front = rear = 0; &#125; void EnQueue(int e) &#123; base[rear] = e; rear = (rear + 1) % QUEUE_SIZE; &#125; void DeQueue(int &amp;e) &#123; e = base[front]; front = (front + 1) % QUEUE_SIZE; &#125;public: int *base; int front; int rear;&#125;;//图G中查找元素c的位置int Locate(Graph G, char c) &#123; for (int i = 0; i&lt;G.vexnum; i++) if (G.vexs[i] == c) return i; return -1;&#125;//创建无向网void CreateUDN(Graph &amp;G) &#123; int i, j, w, s1, s2; char a, b, temp; printf("输入顶点数和弧数:"); scanf("%d%d", &amp;G.vexnum, &amp;G.arcnum); temp = getchar(); //接收回车 G.vexs = (char *)malloc(G.vexnum * sizeof(char)); //分配顶点数目 printf("输入%d个顶点.\n", G.vexnum); for (i = 0; i&lt;G.vexnum; i++) &#123; //初始化顶点 printf("输入顶点%d:", i); scanf("%c", &amp;G.vexs[i]); temp = getchar(); //接收回车 &#125; for (i = 0; i&lt;G.vexnum; i++) //初始化邻接矩阵 for (j = 0; j&lt;G.vexnum; j++) G.arcs[i][j] = INFINITY; printf("输入%d条弧.\n", G.arcnum); for (i = 0; i&lt;G.arcnum; i++) &#123; //初始化弧 printf("输入弧%d:", i); scanf("%c %c %d", &amp;a, &amp;b, &amp;w); //输入一条边依附的顶点和权值 temp = getchar(); //接收回车 s1 = Locate(G, a); s2 = Locate(G, b); G.arcs[s1][s2] = G.arcs[s2][s1] = w; &#125;&#125;//图G中顶点k的第一个邻接顶点int FirstVex(Graph G, int k) &#123; if (k &gt;= 0 &amp;&amp; k&lt;G.vexnum) &#123; //k合理 for (int i = 0; i&lt;G.vexnum; i++) if (G.arcs[k][i] != INFINITY) return i; &#125; return -1;&#125;//图G中顶点i的第j个邻接顶点的下一个邻接顶点int NextVex(Graph G, int i, int j) &#123; if (i &gt;= 0 &amp;&amp; i&lt;G.vexnum &amp;&amp; j &gt;= 0 &amp;&amp; j&lt;G.vexnum) &#123; //i,j合理 for (int k = j + 1; k&lt;G.vexnum; k++) if (G.arcs[i][k] != INFINITY) return k; &#125; return -1;&#125;//深度优先遍历void DFS(Graph G, int k) &#123; int i; if (k == -1) &#123; //第一次执行DFS时,k为-1 for (i = 0; i&lt;G.vexnum; i++) if (!visited[i]) DFS(G, i); //对尚未访问的顶点调用DFS &#125; else &#123; visited[k] = true; printf("%c ", G.vexs[k]); //访问第k个顶点 for (i = FirstVex(G, k); i &gt;= 0; i = NextVex(G, k, i)) if (!visited[i]) DFS(G, i); //对k的尚未访问的邻接顶点i递归调用DFS &#125;&#125;//广度优先遍历void BFS(Graph G) &#123; int k; Queue Q; //辅助队列Q Q.InitQueue(); for (int i = 0; i&lt;G.vexnum; i++) if (!visited[i]) &#123; //i尚未访问 visited[i] = true; printf("%c ", G.vexs[i]); Q.EnQueue(i); //i入列 while (Q.front != Q.rear) &#123; Q.DeQueue(k); //队头元素出列并置为k for (int w = FirstVex(G, k); w &gt;= 0; w = NextVex(G, k, w)) if (!visited[w]) &#123; //w为k的尚未访问的邻接顶点 visited[w] = true; printf("%c ", G.vexs[w]); Q.EnQueue(w); &#125; &#125; &#125;&#125;//主函数void main() &#123; int i; Graph G; CreateUDN(G); visited = (bool *)malloc(G.vexnum * sizeof(bool)); printf("\n深度优先遍历: "); for (i = 0; i&lt;G.vexnum; i++) visited[i] = false; DFS(G, -1); printf("\n广度优先遍历: "); for (i = 0; i&lt;G.vexnum; i++) visited[i] = false; BFS(G); printf("\n程序结束.\n"); getchar();&#125; 08 给定一个有向图，对其拓扑排序123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154#include &lt;cstdlib&gt;#include &lt;iostream&gt;#include &lt;stack&gt;#define Maxsize 30#define INFINITY 99999using namespace std;typedef struct ArcNode&#123; int adjvex; struct ArcNode *nextarc;&#125;ArcNode;typedef struct adjlist&#123; char name[10]; int indegree; ArcNode *firstarc;&#125;adjlist;typedef struct&#123; int vexnum, arcnum; adjlist ver[Maxsize];&#125;ALGraph;int Locatecity(ALGraph G, char v[]);void createGraph();void output(ALGraph G);void FindInDegree(ALGraph &amp;G);void TopologicalSort(ALGraph &amp;G);void TopologicalSort(ALGraph &amp;G)&#123; int i, j, e, count; stack&lt;int&gt; s; ArcNode *p; FindInDegree(G); for (i = 0; i&lt;G.vexnum; i++) if (!G.ver[i].indegree) s.push(i); count = 0; //对顶点进行计数 cout &lt;&lt; "拓扑排序的结果如下: \n"; while (!s.empty()) &#123; e = s.top(); cout &lt;&lt; G.ver[e].name &lt;&lt; " "; count++; s.pop(); for (p = G.ver[e].firstarc; p; p = p-&gt;nextarc) &#123; if (!(--G.ver[p-&gt;adjvex].indegree)) s.push(p-&gt;adjvex); &#125;//for &#125;//while cout &lt;&lt; endl; if (count&lt;G.vexnum) &#123; cout &lt;&lt; "该有向图有回路\n"; return; &#125;//if&#125;void FindInDegree(ALGraph &amp;G)&#123; int indeg, i, j; ArcNode *p; for (i = 0; i&lt;G.vexnum; i++) &#123; indeg = 0; for (j = 0; j&lt;G.vexnum; j++) &#123; if (G.ver[j].firstarc != NULL) &#123; p = G.ver[j].firstarc; while (p) &#123; if (p-&gt;adjvex == i) indeg++; p = p-&gt;nextarc; &#125;//while &#125;//if &#125;//for G.ver[i].indegree = indeg; &#125;//for&#125;void createGraph()&#123; ALGraph G; cout &lt;&lt; "请输入图的顶点个数: \n"; cin &gt;&gt; G.vexnum; cout &lt;&lt; "请输入弧数:\n"; cin &gt;&gt; G.arcnum; for (int i = 0; i&lt;G.vexnum; i++) &#123; cout &lt;&lt; "第 " &lt;&lt; i + 1 &lt;&lt; " 个顶点的名称\n"; cin &gt;&gt; G.ver[i].name; G.ver[i].indegree = 0; //都初始化为零 G.ver[i].firstarc = NULL; &#125;//for int n, m; char v1[10], v2[10]; for (int j = 0; j&lt;G.arcnum; j++) &#123; cout &lt;&lt; "请输入第 " &lt;&lt; j + 1 &lt;&lt; " 条弧的弧尾与弧头" &lt;&lt; endl; cin &gt;&gt; v1 &gt;&gt; v2; n = Locatecity(G, v1); m = Locatecity(G, v2); ArcNode *p, *q, *t; p = (ArcNode*)malloc(sizeof(ArcNode)); p-&gt;adjvex = m; p-&gt;nextarc = NULL; if (G.ver[n].firstarc == NULL) G.ver[n].firstarc = p; else &#123; q = G.ver[n].firstarc; while (q-&gt;nextarc) q = q-&gt;nextarc; q-&gt;nextarc = p; &#125;//else &#125;//for output(G); TopologicalSort(G);&#125;void output(ALGraph G)&#123; int i, j; ArcNode *p; cout &lt;&lt; "有向图的邻接边的对应关系为:\n"; for (i = 0; i&lt;G.vexnum; i++) &#123; if (G.ver[i].firstarc != NULL) &#123; p = G.ver[i].firstarc; while (p) &#123; cout &lt;&lt; p-&gt;adjvex &lt;&lt; " "; p = p-&gt;nextarc; &#125;//while &#125;//if cout &lt;&lt; endl; &#125;//for&#125;int Locatecity(ALGraph G, char v[]) //定位v在G中的位置的函数&#123; int i; for (i = 0; i&lt;G.vexnum; i++) if (!strcmp(G.ver[i].name, v)) break; return i;&#125;int main()&#123; createGraph(); system("PAUSE"); return 0;&#125; 09 二叉排序树的建立，删除，插入节点，查找123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183#include&lt;iostream&gt;#include&lt;stdio.h&gt;using namespace std;#include&lt;malloc.h&gt;#define MaxSize 100typedef int KeyType;typedef char InfoType;typedef struct node&#123; KeyType key; InfoType data; struct node *lchild, *rchild;&#125;BSTNode;int path[MaxSize];void DispBST(BSTNode *b);int InsetBST(BSTNode *&amp;p, KeyType k)&#123; if (p == NULL) &#123; p = (BSTNode *)malloc(sizeof(BSTNode)); p-&gt;key = k; p-&gt;lchild = p-&gt;rchild = NULL; return 1; &#125; else if (k == p-&gt;key) return 0; else if (k &lt; p-&gt;key) return InsetBST(p-&gt;lchild, k); else return InsetBST(p-&gt;rchild, k);&#125;BSTNode *CreatBST(KeyType A[], int n)&#123; BSTNode *bt = NULL; int i = 0; while (i&lt;n) &#123; if (InsetBST(bt, A[i]) == 1) &#123; printf("第%d步 插入%d:", i + 1, A[i]); DispBST(bt); i++; &#125; &#125; return bt;&#125;void Delete1(BSTNode *p, BSTNode *&amp;r)&#123; BSTNode *q; if (r-&gt;rchild != NULL) Delete1(p, r-&gt;rchild); else &#123; p-&gt;key = r-&gt;key; q = r; r = r-&gt;lchild; free(q); &#125;&#125;void Delete(BSTNode *&amp;p)&#123; BSTNode *q; if (p-&gt;rchild == NULL) &#123; q = p; p = p-&gt;lchild; free(q); &#125; else if (p-&gt;lchild == NULL) &#123; q = p; p = p-&gt;rchild; free(q); &#125; else Delete1(p, p-&gt;lchild);&#125;int DeleteBST(BSTNode *&amp;bt, KeyType k)&#123; if (bt == NULL) return 0; else &#123; if (k &lt; bt-&gt;key) return DeleteBST(bt-&gt;lchild, k); else if (k &gt; bt-&gt;key) return DeleteBST(bt-&gt;rchild, k); else &#123; Delete(bt); return 1; &#125; &#125;&#125;void SearchBST(BSTNode *bt, KeyType k, KeyType path[], int i)&#123; int j; if (bt == NULL) return; else if (k == bt-&gt;data) &#123; path[i + 1] = bt-&gt;key; for (j = 0; j &lt;= i + 1; j++) &#123; printf("%3d", path[j]); &#125; &#125; else &#123; path[i + 1] = bt-&gt;key; if (k &lt; bt-&gt;key) SearchBST(bt-&gt;lchild, k, path, i + 1); else SearchBST(bt-&gt;rchild, k, path, i + 1); &#125;&#125;int SearchBST2(BSTNode *bt, KeyType k)&#123; if (bt == NULL) return 0; else if (k == bt-&gt;key) &#123; printf("%3d", bt-&gt;data); return 1; &#125; else if (k &lt; bt-&gt;key) SearchBST2(bt-&gt;lchild, k); else SearchBST2(bt-&gt;rchild, k); printf("%3d", bt-&gt;key);&#125;void DispBST(BSTNode *bt)&#123; if (bt != NULL) &#123; printf("%d", bt-&gt;key); if (bt-&gt;lchild != NULL || bt-&gt;rchild != NULL) &#123; printf("("); DispBST(bt-&gt;lchild); if (bt-&gt;rchild != NULL) printf(","); DispBST(bt-&gt;rchild); printf(")"); &#125; &#125;&#125;KeyType predt = -32767;int JundgBST(BSTNode *bt)&#123; int b1, b2; if (bt == NULL) return 1; else &#123; b1 = JundgBST(bt-&gt;lchild); if (b1 == 0 || predt &gt;= bt-&gt;key) return 0; predt = bt-&gt;key; b2 = JundgBST(bt-&gt;rchild); return b2; &#125;&#125;void main()&#123; BSTNode *bt; KeyType k = 6; int a[] = &#123; 4,9,3,8,7,0,1,2,5,6 &#125;, n = 10; printf("创建一颗BST树"); bt = CreatBST(a, n); printf("BST："); DispBST(bt); printf("bt%s\n", (JundgBST(bt) ? "是一颗树" : "不是一颗树")); printf("查找%d关键字(递归，顺序)", k); SearchBST(bt, k, path, -1); printf("查找%d关键字(非递归，逆序)", k); SearchBST2(bt, k); printf("删除操作：\n"); printf("原BST："); DispBST(bt); printf("\n"); printf("删除节点4"); DeleteBST(bt, 4); DispBST(bt); getchar();&#125; 10 希尔排序 与 快速排序的比较123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#define _CRT_SECURE_NO_DEPRECATE#include&lt;stdio.h&gt;#define Max 30typedef struct&#123; int key;&#125;RecType;RecType R[Max], S[Max];void ShellSort(RecType R[], int n)&#123; int i, j, gap; RecType tmp; gap = n / 2; while (gap&gt;0) &#123; for (i = gap; i &lt; n; i++) &#123; tmp = R[i]; j = i - gap; while (j &gt;= 0 &amp;&amp; tmp.key&lt;R[j].key) &#123; R[j + gap] = R[j]; j = j - gap; &#125; R[j + gap] = tmp; &#125; gap = gap / 2; &#125;&#125;void QuickSort(RecType R[], int s, int t)&#123; int i = s, j = t; RecType tmp; if (s &lt; j) &#123; tmp = R[s]; while (i != j) &#123; while (j &gt; i&amp;&amp;R[j].key &gt; tmp.key) j--; R[i] = R[j]; while (i &lt; j&amp;&amp;R[i].key &lt; tmp.key) i++; R[j] = R[i]; &#125; R[i] = tmp; QuickSort(R, s, i - 1); QuickSort(R, i + 1, t); &#125;&#125;void main()&#123; int n, i; printf("请输入关键字个数：\n"); scanf("%d", &amp;n); printf("请输入关键字序列：\n"); for (int i = 0; i &lt; n; i++) &#123; scanf("%d", &amp;R[i].key); S[i].key = R[i].key; &#125; ShellSort(R, n); printf("希尔排序结果为："); for (i = 0; i &lt; n; i++) printf("%d", R[i].key); printf("\n"); QuickSort(S, 0, n - 1); printf("快速排序结果为："); for (i = 0; i &lt; n; i++) printf("%d", S[i].key);&#125; 11123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;stdio.h&gt;int tile = 0;//L型骨牌数量int Matrix[100][100];//定义数据结构void ChessBoard(int tr, int tc, int dr, int dc, int size)&#123; //tr tc 行号 列号 if (size == 1) return; int t = tile++;//L型骨牌号 int s = size / 2;//分割棋盘 if (dr &lt; tr + s&amp;&amp;dc &lt; tc + s)//用L型骨牌覆盖左上角棋盘 ChessBoard(tr, tc, dr, dc, s);//特殊方格在此棋盘中 else &#123; //特殊方格不在此棋盘中，t号L型骨牌覆盖右下角 Matrix[tr + s - 1][tc + s - 1];//覆盖本子棋盘其余方格 ChessBoard(tr, tc, tr + s - 1, tc + s - 1, s); &#125; if (dr &lt; tr + s&amp;&amp;dc &gt;= tc + s)//用L型骨牌号覆盖右上角棋盘 ChessBoard(tr, tc, dr, dc, s); else &#123; //特殊方格不在此棋盘中，t号L型骨牌覆盖左下角 Matrix[tr + s - 1][tc + s] = t;//覆盖本子棋盘其余方格 ChessBoard(tr, tc + s, tr + s - 1, tc + s, s); &#125; if (dr &gt;= tr + s&amp;&amp;dc&lt;tc + s)//用L型骨牌覆盖左下角子棋盘 ChessBoard(tr + s, tc, dr, dc, s); else &#123; //特殊方格不在此棋盘中，t号L型骨牌覆盖右上角 Matrix[tr + s][tc + s] = t;//覆盖本子棋盘其余方格 ChessBoard(tr, tc + s, tr + s - 1, tc + s, s); &#125; if (dr &gt;= tr + s&amp;&amp;dc &gt;= tc + s)//用L骨牌覆盖右上角子棋盘 ChessBoard(tr + s, tc + s, dr, dc, s); else &#123; //特殊方格不在此棋盘中，t号L型骨牌覆盖右上角 Matrix[tr + s][tc + s] = t;//覆盖本子棋盘其余方格 ChessBoard(tr, tc + s, tr + s, tc + s, s); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[数据结构上机指导]]></title>
    <url>%2F2017%2F03%2F24%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8A%E6%9C%BA%E6%8C%87%E5%AF%BC%2F</url>
    <content type="text"><![CDATA[1.1 求素数12345678910111213141516171819202122232425262728293031323334#include&lt;stdio.h&gt;#include&lt;math.h&gt;#include&lt;iostream&gt;bool prime(int n)&#123; int i; for (i = 2; i &lt;= (int)sqrt(n); i++) &#123; if (n%i == 0) return false; else return true; &#125;&#125;int main()&#123; int n, i, j = 0; printf("n:" ); scanf("%d",&amp;n); printf("小于等于%d的素数", n); if (n&gt;2) &#123; printf("%4d", n); j++; &#125; for (i = 3; i &lt;= n; i += 2) if (prime(i)) &#123; printf("%4d", i); if (j != 0 &amp;&amp; ++j % 10 == 0) printf("\n"); &#125; printf("\n");&#125; 1.2 求正整数各位数字之和12345678910111213141516171819#include&lt;stdio.h&gt;int func(int num)&#123; int s=0; do&#123; s+=num%10; num/=10; &#125;while(num); return (s);&#125;int main()&#123; int n; printf("输入一个整数："); scanf("%d",&amp;n); printf("各位数字之和:%d",func(n) );&#125; 1.3 求一个字符串是否为回文1234567891011121314151617181920212223242526272829#include&lt;stdio.h&gt;#include&lt;string.h&gt;#define MAX 100//算法bool func(char s[])&#123; bool flag=true; int i,j,slen=strlen(s); for(i=0,j=slen-1;i&lt;j;i++,j--)&#123; if(s[i]!=s[j])&#123; flag=false; break; &#125; &#125; return (flag);&#125;int main()&#123; char s[MAX]; printf("输入一串字符：" ); scanf("%s",s); if(func(s))&#123; printf("%s是回文字符串",s);&#125; else&#123; printf("%s不是回文字符串",s );&#125;&#125; 2.1 实现顺序表基本运算*123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134//文件1#include&lt;stdio.h&gt;#include&lt;malloc.h&gt;#define MaxSize 50typedef char ElemTypetypedef struct&#123; ElemType date[MaxSize]; int length;&#125;SqList;//初始化线性表void InitList(SqList *&amp; L)&#123;L=(SqList *)malloc(SqList);L-&gt;length;&#125;//销毁线性表void DestroyList(SqList *L)&#123;free(L)&#125;//判断线性表是否为空bool ListEmpty(SqList *L)&#123;return L-&gt;length==0;&#125;//求线性表的长度int ListLength(SqList *L)&#123;return (L-&gt;length);&#125;//输出线性表void DispList(SqList *L)&#123;int i; if(ListEmpty(L))return; for(i=0;i&lt;n;i++)&#123; printf(" %c",L-&gt;data[i] ); &#125;&#125; //求线性表中数据元素的值bool GetElem(SqList *L,int i,ElemType &amp;e)&#123;if(i&lt;1||i&gt;L-&gt;length) return false; e=L-&gt;data[i-1]; return true;&#125;//按元素值查找int LocatElem(SqList *L,ElemType e)&#123;int i=0; while(i&lt;L-&gt;length&amp;&amp;L-&gt;data[i]!=e) i++;if(i&gt;=L-&gt;length) return 0;else return i+1; &#125;//插入数据元素bool ListInsert(SqList *L,int i,ElemType e)&#123;int j; if(i&lt;1||i&gt;L-&gt;length+1) return false; i--; for(j=L-&gt;length;j&gt;i;j--) L-&gt;data[j]=L-&gt;data[j-1]; L-&gt;data[i]=e; L-&gt;length++; return true; &#125;//删除数据元素bool ListDelete(SqList *&amp;L,int i,ElemType &amp;e)&#123;int j; if(i&lt;1||i&gt;L-&gt;length) return false; i--; e=L-&gt;data[i]; for(j=i;j&lt;L-&gt;length;j++) L-&gt;data[j]=L-&gt;data[j+1]; L-&gt;length--; return true; &#125;//文件2#include&lt;stdio.h&gt;#include&lt;malloc.h&gt;#define MaxSize 50typedef char ElemTypetypedef struct&#123; ElemType date[MaxSize]; int length;&#125;SqList;extern void InitList(SqList *&amp; L);extern void DestroyList(SqList *L);extern bool ListEmpty(SqList *L);extern int ListLength(SqList *L);extern void DispList(SqList *L);extern bool GetElem(SqList *L,int i,ElemType &amp;e);extern int LocatElem(SqList *L,ElemType e);extern bool ListInsert(SqList *L,int i,ElemType e);extern bool ListDelete(SqList *&amp;L,int i,ElemType &amp;e);void main()&#123; SqList *L;ElemType e; printf("顺序表的基本运算如下：" ); printf("初始化线性表"); InitList(L); printf("(2)采用尾插法建表"); ListInsert(L,1,'a'); ListInsert(L,2,'b'); ListInsert(L,3,'c'); ListInsert(L,4,'d'); ListInsert(L,5,'e'); printf("(3)输出顺序表"); DispList(L); printf("(4)顺序表L的长度=%d\n",ListLength(L)); printf("(5)顺序表为%s\n",ListEmpty(L)?"空":"非空"); GetElem(L,3,e); printf("(6)线性表L的第三个元素%c\n",e ); printf("(7)元素a的位置=%d\n",LocatElem(L,'a') ); printf("(8)在第四个位置插入f\n" ); ListInsert(L,4.f); printf("(9)输出顺序表\n" ); DispList(L); printf("删除L的第三个元素\n" ); ListDelete(L,3,e); printf("输出线性表\n" ); DispList(L); printf("释放线性表\n", ); DestroyList(L);&#125; 2.2 实现单链表各种基本运算方法]]></content>
  </entry>
  <entry>
    <title><![CDATA[qqbot]]></title>
    <url>%2F2017%2F03%2F22%2Fqqbot%2F</url>
    <content type="text"><![CDATA[只有两步，但只能查看信息，搜索信息 pip install qqbot qqbot 扫码 SmartqqBot+图灵机器人 python的安装 pip的安装 下载SmartqqBot源码 注册图灵账号并创建机器人获得apikey 然后开始搞事情 1.python的安装 pip的安装 别忘啦配置路径 python安装 重点说pip（为安装一些依赖库而生）这个坑python官网 图灵机器人插件配置 运行run.py]]></content>
  </entry>
  <entry>
    <title><![CDATA[eclipse开发计算器]]></title>
    <url>%2F2017%2F03%2F20%2Feclipse%E5%BC%80%E5%8F%91%E8%AE%A1%E7%AE%97%E5%99%A8%2F</url>
    <content type="text"><![CDATA[eclipse目录结构三大部分 AndroidManifest.xml layout(res资源的一部分) src AndroidManifest.xml123456789101112131415161718192021222324252627&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.jisuanqil" android:versionCode="1" android:versionName="1.0" &gt; &lt;uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" /&gt; &lt;application android:allowBackup="true" android:icon="@drawable/ic_launcher" android:label="@string/app_name" android:theme="@style/AppTheme" &gt; &lt;activity android:name="com.example.jisuanqil.MainActivit" android:label="@string/app_name" &gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.MAIN" /&gt; &lt;category android:name="android.intent.category.LAUNCHER" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt;&lt;/manifest&gt; layout(res资源的一部分)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent" android:orientation="vertical" android:background="#000000" &gt; &lt;EditText android:layout_width="fill_parent" android:layout_height="60dip" android:background="#FFFFFF" android:editable="false" android:id="@+id/et_showview" android:gravity="bottom|right" android:textSize="20sp" /&gt; &lt;LinearLayout android:layout_width="fill_parent" android:layout_height="fill_parent" android:layout_marginTop="20dip" android:gravity="center_horizontal" android:orientation="vertical" &gt; &lt;LinearLayout android:layout_width="fill_parent" android:layout_height="wrap_content" android:gravity="center_horizontal" android:orientation="horizontal" &gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_clear" android:background="#FFFFFF" android:text="C" /&gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:layout_marginLeft="10dip" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_del" android:background="#FFFFFF" android:text="DEL" /&gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:layout_marginLeft="10dip" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_divide" android:background="#FFFFFF" android:text="÷" /&gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:layout_marginLeft="10dip" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_multiply" android:background="#FFFFFF" android:text="×" /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width="fill_parent" android:layout_height="wrap_content" android:layout_marginTop="10dip" android:gravity="center_horizontal" android:orientation="horizontal" &gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_7" android:background="#FFFFFF" android:text="7" /&gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:layout_marginLeft="10dip" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_8" android:background="#FFFFFF" android:text="8" /&gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:layout_marginLeft="10dip" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_9" android:background="#FFFFFF" android:text="9" /&gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:layout_marginLeft="10dip" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_minus" android:background="#FFFFFF" android:text="－" /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width="fill_parent" android:layout_height="wrap_content" android:layout_marginTop="10dip" android:gravity="center_horizontal" android:orientation="horizontal" &gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_4" android:background="#FFFFFF" android:text="4" /&gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:layout_marginLeft="10dip" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_5" android:background="#FFFFFF" android:text="5" /&gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:layout_marginLeft="10dip" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_6" android:background="#FFFFFF" android:text="6" /&gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:layout_marginLeft="10dip" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_pluse" android:background="#FFFFFF" android:text="＋" /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width="fill_parent" android:layout_height="wrap_content" android:layout_marginTop="10dip" android:gravity="center_horizontal" android:orientation="horizontal" &gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="wrap_content" android:orientation="vertical" &gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="wrap_content" android:orientation="horizontal" &gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_1" android:background="#FFFFFF" android:text="1" /&gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:layout_marginLeft="10dip" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_2" android:background="#FFFFFF" android:text="2" /&gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:layout_marginLeft="10dip" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_3" android:background="#FFFFFF" android:text="3" /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_marginTop="10dip" android:orientation="horizontal" &gt; &lt;Button android:layout_width="130dp" android:layout_height="60dp" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_0" android:background="#FFFFFF" android:text="0" /&gt; &lt;Button android:layout_width="60dp" android:layout_height="60dp" android:layout_marginLeft="10dip" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:text="." android:id="@+id/btn_point" android:background="#FFFFFF" android:textSize="20sp"/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;Button android:layout_width="60dip" android:layout_height="130dip" android:layout_marginLeft="10dip" android:gravity="bottom|right" android:paddingBottom="10dp" android:paddingRight="10dp" android:textSize="20sp" android:id="@+id/btn_equal" android:background="#FFFFFF" android:text="=" /&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt;&lt;/LinearLayout&gt; src123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170package com.example.jisuanqil;import java.util.ArrayList;import java.util.Arrays;import android.app.Activity;import android.os.Bundle;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;public class MainActivity extends Activity implements OnClickListener &#123; Button btn_0; Button btn_1; Button btn_2; Button btn_3; Button btn_4; Button btn_5; Button btn_6; Button btn_7; Button btn_8; Button btn_9; Button btn_point;// 小数点 Button btn_divide;// 除以 Button btn_multiply;// 乘以 Button btn_minus;// 减去 Button btn_pluse;// 加 Button btn_equal;// 等于 Button btn_clear; Button btn_del; EditText et_showview; boolean needclear; protected void onCreat(Bundle saveInstenceState)&#123; super.onCreate(saveInstenceState); setContentView(R.layout.activity); btn_0 = (Button) findViewById(R.id.btn_0); btn_1 = (Button) findViewById(R.id.btn_1); btn_2 = (Button) findViewById(R.id.btn_2); btn_3 = (Button) findViewById(R.id.btn_3); btn_4 = (Button) findViewById(R.id.btn_4); btn_5 = (Button) findViewById(R.id.btn_5); btn_6 = (Button) findViewById(R.id.btn_6); btn_7 = (Button) findViewById(R.id.btn_7); btn_8 = (Button) findViewById(R.id.btn_8); btn_9 = (Button) findViewById(R.id.btn_9); btn_point = (Button) findViewById(R.id.btn_point);// 小数点 btn_divide = (Button) findViewById(R.id.btn_divide);// 除以 btn_multiply = (Button) findViewById(R.id.btn_multiply);// 乘以 btn_minus = (Button) findViewById(R.id.btn_minus);// 减去 btn_pluse = (Button) findViewById(R.id.btn_pluse);// 加 btn_equal = (Button) findViewById(R.id.btn_equal);// 等于 btn_clear = (Button) findViewById(R.id.btn_clear); btn_del = (Button) findViewById(R.id.btn_del); et_showview = (EditText) findViewById(R.id.et_showview); btn_0.setOnClickListener(this); btn_1.setOnClickListener(this); btn_2.setOnClickListener(this); btn_3.setOnClickListener(this); btn_4.setOnClickListener(this); btn_5.setOnClickListener(this); btn_6.setOnClickListener(this); btn_7.setOnClickListener(this); btn_8.setOnClickListener(this); btn_9.setOnClickListener(this); btn_point.setOnClickListener(this); btn_divide.setOnClickListener(this); btn_multiply.setOnClickListener(this); btn_minus.setOnClickListener(this); btn_pluse.setOnClickListener(this); btn_equal.setOnClickListener(this); btn_clear.setOnClickListener(this); btn_del.setOnClickListener(this); &#125; public void onClick(View v)&#123; String str = et_showview.getText().toString(); switch (v.getId()) &#123; case R.id.btn_0: case R.id.btn_1: case R.id.btn_2: case R.id.btn_3: case R.id.btn_4: case R.id.btn_5: case R.id.btn_6: case R.id.btn_7: case R.id.btn_8: case R.id.btn_9: case R.id.btn_point: if(needclear)&#123; str = ""; et_showview.setText(""); &#125; et_showview.setText(str + ((Button) v).getText()); break; case R.id.btn_pluse: case R.id.btn_minus: case R.id.btn_multiply: case R.id.btn_divide: if(needclear)&#123; et_showview.setText(""); &#125; et_showview.setText(str +" "+((Button) v).getText()+" "); break; case R.id.btn_equal: getResult(); break; case R.id.btn_del: if (str != null &amp;&amp; !str.equals("")) &#123; et_showview.setText(str.substring(0, str.length() - 1)); &#125; break; case R.id.btn_clear: et_showview.setText(""); break; &#125; &#125; public void getResult()&#123; needclear = true; String exp = et_showview.getText().toString(); double r = 0; int space = exp.indexOf(' ');//用于搜索空格位置 String s1 = exp.substring(0, space);//s1用于保存第一个运算数 String op = exp.substring(space + 1, space + 2);//op用于保存运算符 String s2 = exp.substring(space + 3);//s2用于保存第二个运算数 double arg1 = Double.parseDouble(s1);//将运算数从string转换为Single double arg2 = Double.parseDouble(s2); if(op.equals("＋"))&#123; r = arg1 + arg2; &#125;else if(op.equals("－"))&#123; r = arg1 - arg2; &#125;else if(op.equals("×"))&#123; r = arg1 * arg2; &#125;else if(op.equals("÷"))&#123; if (arg2 == 0) &#123; r=0; &#125; else &#123; r = arg1 / arg2; &#125; &#125; if(!s1.contains(".")&amp;&amp;!s2.contains("."))&#123; int result = (int)r; et_showview.setText(result+""); &#125;else&#123; et_showview.setText(r+""); &#125; &#125; &#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[网络问题]]></title>
    <url>%2F2017%2F03%2F11%2F%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[未识别的网络 已连接 重启一下网卡 点禁用 网络受限 已连接 右键打开网络共享中心 无intenet 安全 开始-运行-输入”netsh winsock reset”,然后重启系统 确认可行]]></content>
  </entry>
  <entry>
    <title><![CDATA[守望先锋专题]]></title>
    <url>%2F2017%2F03%2F10%2F%E5%AE%88%E6%9C%9B%E5%85%88%E9%94%8B%2F</url>
    <content type="text"><![CDATA[Computer gamesOur topic is computer games.we have three parts to share with you .First,i will told you the best computer game –overwatchAnd then,miss xu will teach you to how to make a computer games.At last,miss Li will show you the the most successful gaming platform-steam. Part one:overwatch First,the company which made it,Blizzard.Many people think that Blizzard is like a CG company more than games company.and say that blizard company make CG by heart,make games by feet.their 3d models about buildings and heroes is one of the best in the word.For example,you can see .this two pictures are real place.and up two pictures are blizzaid model builded for overwatch.In overwatch,the places we are palying are designed based on our real life palce.like yiliaosi, king rote,66 rote and so on.so blizzaid is not only a games company and also the CG company.that’s blizzaid. Second ,let me make a simple introduce about blizzaid games.World of Warcraft (WOW) i think that everyone have seen the movie about it.DiabloStarCraftStorm heroHearth Stone What is overwatch?In future world,Overwatch is group name .we have different group like smart machine,black feet and so on.different hero belong to difference group . Overwatch:Represent hero :wenshidun flash faji and so on,In the future,overwatch is made for end the country war,there are doctor,Soldiers ,scientists and so on.but after the war,the group is broken because people don’t need them.Until,the smart robots ouni update his system and not fellow human any more.the new war is coming. people need overwatch,the world need more hero,so overwatch heroes get together again. Black feet:Represent hero :death ,black flowerBlack feet is also the enemy to overwatch.;their Faith are different,overwatch think the world need save,but black feet think the world need rebuild.they all fight for their faith.black feet want kill the key man so that it can rebuild the world quickly,on the anther hand ,overwatch protect the people that black feet want to kill. Smart machine:Attractive robot,they update their system by themselve.and think that human would be dangrous if they do noting changed.and save human only one way –Launching the war,And they did it. The hero story: crazy rabbitCrazy rabbit is doctor who want to build something with human soul.at first,the king of country interested and support the rabbit do his research.until the rabbit failed many times and start use human body do his research ,the people of the country are worried about it .the king realized it and decided to push the rabbit out of his country.In doctor rabbit,even using human body ,he still can make the thing made by part of death body alive.In this time, evil angel coming.and take what doctor rabbit want –the soul.finally,the doctor rabbit finish his research and create a monster–the pig. The new hero aolishaThe genius girl yifei update the old robot system and give it a new name.The story happen in lubini.one day,unkown enemy attract the airport,and the defined robot can stop them.after that ,people don’t thrust that robot and don’t use them.until The genius girl yifei rebuild it.the new robot has been given a heart by yifei and that make it more powerful.]]></content>
  </entry>
  <entry>
    <title><![CDATA[计算机网络]]></title>
    <url>%2F2017%2F03%2F08%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[物理层数据链路层网络层运输层]]></content>
  </entry>
  <entry>
    <title><![CDATA[产品经理练成]]></title>
    <url>%2F2017%2F02%2F24%2F%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%BB%83%E6%88%90%2F</url>
    <content type="text"><![CDATA[几种软件模型 瀑布模型 快速原型模型 螺旋模型 增量模型 统一过程模型 RUP 瀑布 快速模型的区别RUP12345678简而言之：可以用迭代开发来更好的应对变化,瀑布模型属于软件工程阶段的产物软件开发的效率,质量,以及软件开发相关的管理工作.软件越发复杂,RUP可以用迭代开发来更好的应对变化,使软件的实践更加完整. 瀑布123456简而言之：太死板，不易变动。瀑布模型的优点：有利于大型软件开发过程中人员的组织、管理，有利于软件开发方法和工具的研究，从而提高了大型软件项目开发的质量和效率。瀑布模型的缺点：（1）开发过程一般不能逆转，否则代价太大；（2）实际的项目开发很难严格按该模型进行；（3）客户往往很难清楚地给出所有的需求，而该模型却要求如此。（4）软件的实际情况必须到项目开发的后期客户才能看到，这要求客户有足够的耐心。瀑布模型的使用范围：（1）用户的需求非常清楚全面，且在开发过程中没有或很少变化；（2）开发人员对软件的应用领域很熟悉；（3）用户的使用环境非常稳定；（4）开发工作对用户参与的要求很低。 快速原型12345简而言之：开发费用低、开发周期短 准确的原型设计比较困难快速原型模型的优点：（1）可以得到比较良好的需求定义，容易适应需求的变化；（2）有利于开发与培训的同步；（3）开发费用低、开发周期短且对用户更友好。快速原型模型的缺点：（1）客户与开发者对原型理解不同；（2） 准确的原型设计比较困难；（3） 不利于开发人员的创新。快速原型模型的使用范围：（1）对所开发的领域比较熟悉而且有快速的原型开发工具；（2）项目招投标时，可以以原型模型作为软件的开发模型；（3）进行产品移植或升级时，或对已有产品原型进行客户化工作时，原型模型是非常适合的。]]></content>
  </entry>
  <entry>
    <title><![CDATA[android studio开发环境搭建]]></title>
    <url>%2F2017%2F02%2F22%2Fandriod%20studio%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[先说android studio 1.下载android studio2.下载JDK 并配置系统变量.3.下载SDK]]></content>
  </entry>
  <entry>
    <title><![CDATA[数据结构实验题]]></title>
    <url>%2F2017%2F02%2F20%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E9%A2%98%2F</url>
    <content type="text"><![CDATA[0112345678910111213141516171819202122232425#include&lt;iostream&gt;using namespace std;int main()&#123; int n,count; cin&gt;&gt;n; if(n&gt;=2)&#123; printf("%d ",2); count++; &#125; for(int i=0;i&lt;n;i++)&#123; for(int j=2;j*j&lt;i;j++)&#123; if(i%j==0)&#123; continue; &#125; else&#123; printf("%d ",i); count++; if(count%10==0)&#123; printf("\n"); &#125; &#125; &#125; &#125;&#125; 03123456789101112131415161718192021#include&lt;iostream&gt;#include &lt;stdio.h&gt;#include&lt;string.h&gt;using namespace std;int main()&#123; string s; cin&gt;&gt;s; string g=s; for(int i=0;i&lt;s.size();i++)&#123; g[s.size()-i-1]=s[i]; &#125; if(s==g)&#123; printf("回文"); &#125; else&#123; printf("非回文"); &#125;&#125; 顺序表 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;iostream&gt;typedef int ElemType;void CreateList(SqList *&amp;L,ElemType a[],int n)//由a中的a个元素建立顺序表&#123; int i; L=(SqList *)malloc(sizeof(SqList)); for(i=0;i&lt;n;i++) L-&gt;data[i]=a[i]; L-&gt;length=n;&#125;void InitList(SqList *&amp;L）//初始化线性表&#123; L=(SqList *)malloc(sizeof(SqList)); L-&gt;length=0;&#125;void LocatElem(SqList *L,ElemType e)//查找元素&#123; int i=0; while(i&lt;L-&gt;length&amp;&amp;L-&gt;data[i]!=e) i++; if(i&gt;=L-&gt;length) return 0; else return i+1;&#125;bool ListInsert(SqList *&amp;L,int i,ElemType e)//插入元素&#123; int j; if(i&lt;1||i&gt;L-&gt;length+1) return false; i--; for(j=L-&gt;length;j&gt;i;j--) L-&gt;data[j]=L-&gt;data[j-1]; L-&gt;data[i]=e; L-&gt;length++; return trun;&#125;using namespace std;int main()&#123; CreateList la,lb; int j,i; i=initlist(&amp;la); if(i==1) &#125; 顺序表 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#define MAXSIZE 100typedef int DataType;#define OK 1#define ERROR -1#define FALSE 0#define True 2typedef struct&#123;DataType data[MAXSIZE];int length;&#125; SqList;int InitList(SqList *L )//初始化&#123;L-&gt;length=0; //空表，长度为0return OK;&#125;int ListEmpty(SqList *L)//判断是否为空表&#123;if (L-&gt;length==0)return True;if (L-&gt;length!=0)return FALSE;&#125;int ListLength(SqList L)//求表长&#123;return (L.length);&#125;void ListTraverse(SqList L)//输出表&#123;int i;for(i=0;i&lt;L.length;i++)printf("%d ",L.data[i]);printf("\n");&#125;int ListInsert(SqList *L,int i,DataType e)//插入元素&#123;int k;if (L-&gt;length==MAXSIZE)return ERROR;if (i&lt;1 || i&gt;L-&gt;length+1)return ERROR;if (i&lt;=L-&gt;length)&#123;for(k=L-&gt;length-1;k&gt;=i-1;k--)L-&gt;data[k+1]=L-&gt;data[k];&#125;L-&gt;data[i-1]=e;L-&gt;length++;return OK;&#125;int ListDelete(SqList *L,int i,DataType *e)//删除元素&#123;int k;if (L-&gt;length==0) return ERROR;if (i&lt;1 || i&gt;L-&gt;length) return ERROR;*e=L-&gt;data[i-1];if (i&lt;L-&gt;length)&#123;for(k=i;k&lt;L-&gt;length;k++)L-&gt;data[k-1]=L-&gt;data[k];&#125;L-&gt;length--;return OK;&#125;int ListFindEle(SqList *L,DataType e)// 查找元素&#123;int i;for (i=1; i&lt;=L-&gt;length; i++)&#123;if (e == L-&gt;data[i-1])return i;&#125;return FALSE ;&#125;int ListAlter(SqList *L,int i,DataType *e)//修改元素&#123;if (i&lt;1||i&gt;L-&gt;length)return ERROR;L-&gt;data[i-1]=*e;return OK;&#125;void ClearList(SqList *L)//清空表&#123;L-&gt;length=0; //将线性表的长度置为0&#125;//释放表空间void DestroyList(SqList *L) //释放线性表占据的所有存储空间&#123;if (L-&gt;data)free(L-&gt;data);&#125;int main()&#123;int tmp=0,locat=0,res=0,n,i;SqList *list;list=(SqList*)malloc(sizeof(*list));printf(" ***********************************\n");printf("* 1---------初始化 *\n");printf("* 2---------判断是否为空表 *\n");printf("* 3---------求表长 *\n");printf("* 4---------输出表*\n");printf("* 5---------插入元素 *\n");printf("* 6---------删除元素 *\n");printf("* 7---------查找元素 *\n");printf("* 8---------修改元素 *\n");printf("* 9---------清空表 *\n");printf("* 10--------释放表空间 *\n");printf("* 11--------输入线性表初始值 *\n");printf("* 12--------退出 *\n");printf(" ************************************\n");while(1)&#123;printf("请选择菜单号（1-12）:");scanf("%d",&amp;n);if(n==0||n&gt;11)break;switch(n)&#123;case 1:InitList(list);printf("已完成初始化!\n");break;case 2:if(ListEmpty(list)==True)printf("是空表!\n");elseprintf("不是空表!\n");break;case 3:printf("线性表长度为:%d\n",ListLength(*list));break;case 4:printf("线性表元素的值为:");ListTraverse(*list);break;case 5:printf("要插入的位置和数值为:");scanf("%d %d",&amp;locat,&amp;res);ListInsert(list,locat,res);printf("插入完成!\n");break;case 6:printf("要删除的位置为:");scanf("%d",&amp;locat);ListDelete(list,locat,&amp;res);printf("删除完成!\n");break;case 7:printf("要查找的位置为:");scanf("%d",&amp;locat);printf("该位置的值为:%d\n",ListFindEle(list,locat));break;case 8:printf("要修改的位置和数值为:");scanf("%d %d",&amp;locat,&amp;res);ListAlter(list,locat,&amp;res);printf("修改完成!\n");break;case 9:ClearList(list);printf("表中内容已清空!\n");break;case 10: DestroyList(list);printf("释放成功!\n");break;case 11:InitList(list);printf("请输入顺序表长度:");scanf("%d",&amp;list-&gt;length);printf("请输入顺序表的值:");for(i=0;i&lt; list-&gt;length;i++)scanf("%d",&amp;list-&gt;data[i]);printf("线性元素的值为:\n");ListTraverse(*list);break;case 12:exit(1);default:break;&#125;&#125;return 0;&#125; 0412345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt; struct lnode &#123; int ID; struct lnode *next; &#125;; void BubbleSort(struct lnode * head); int main() &#123; int n, i, d; while(scanf("%d", &amp;n) != EOF) &#123; //初始化带头节点的链表 struct lnode *head, *s, *r, *p; r = head; for(i = 0; i &lt; n; i ++) &#123; scanf("%d", &amp;d); s -&gt; ID = d; r -&gt; next = s; r = s; &#125; r -&gt; next = NULL; //冒泡排序 BubbleSort(head); //打印输出 for(p = head -&gt; next; p != NULL; p = p -&gt; next) &#123; if(p -&gt; next == NULL) &#123; printf("%d\n", p -&gt; ID); &#125;else &#123; printf("%d ", p -&gt; ID); &#125; &#125; &#125; return 0; &#125; void BubbleSort(struct lnode *head) &#123; struct lnode *f, *p, *x, *y; f = NULL; if(head -&gt; next == NULL || head -&gt; next -&gt; next == NULL) &#123; return; &#125; while(f != head-&gt;next-&gt;next) &#123; for(p = head; p -&gt; next -&gt; next != f; p = p -&gt; next) &#123; if(p -&gt; next -&gt; ID &gt; p -&gt; next -&gt; next -&gt;ID) &#123; x = p -&gt; next; y = p -&gt; next -&gt; next; p -&gt; next = y; x -&gt; next = y -&gt; next; y -&gt; next = x; &#125; &#125; f = p -&gt; next; &#125; &#125; 04123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#include&lt;iostream&gt;#include&lt;cstdlib&gt;#include&lt;cstdio&gt;using namespace std;struct Node&#123; char Element; int length; Node *last,*next; &#125;;typedef char ElementType;typedef Node *List;List L; List CreateList(List &amp;L)&#123; List I=(List)malloc(sizeof(Node)); int length=0;L-&gt;next=L-&gt;last=nullptr; return I;&#125;void insect(List &amp;L,ElementType a)&#123; L-&gt;length++; Node*n=(Node *)malloc(sizeof(Node)); n-&gt;Element=a; if(L-&gt;next==nullptr)&#123; L-&gt;last=n;L-&gt;next=n; n-&gt;last=n;n-&gt;next=n; &#125; else&#123; L-&gt;last-&gt;next;//L原来的最后一个节点的next指向新最后一个节点 n-&gt;last=L-&gt;last;//新最后一个节点的last指向旧最后一个节点 n-&gt;next=L-&gt;next;//新最后一个节点指向第一个节点（循环链表） L-&gt;next-&gt;last=n;//第一个节点指向最后一个节点 L-&gt;last=n;//指定最后一个节点 &#125;&#125;void print(List &amp;L)&#123; int n=L-&gt;length; Node *Node=L-&gt;next; for(int i=0;i&lt;n;i++)&#123; cout&lt;&lt;Node-&gt;Element; Node=Node-&gt;next; &#125;&#125;void output3th(List &amp;L)&#123; Node *Node=L-&gt;next; for(int i=0;i&lt;3;i++)&#123; Node=Node-&gt;next; &#125; cout&lt;&lt;Node-&gt;Element&lt;&lt;endl;&#125;void location(List &amp;L)&#123; char a; Node *Node=L-&gt;next; for(int i=1;i&lt;=L-&gt;length;i++)&#123; if(Node-&gt;Element==a)&#123; cout&lt;&lt;"a location"&lt;&lt;i; &#125; else Node=Node-&gt;next; &#125;&#125;void insect4f(List &amp;L)&#123; Node *m=(Node *)malloc(sizeof(Node)); Node *Node=L-&gt;next; for(int i=1;i&lt;=3;i++)&#123; Node-&gt;next=m; L-&gt;last-&gt;last-&gt;last=m; m-&gt;last=Node-&gt;next; m-&gt;next=L-&gt;last-&gt;last; &#125;&#125;void delete3th(List &amp;l)&#123; Node *tmp,*Node=L-&gt;next; for(int i=1;i&lt;=3;i++)&#123; Node=Node-&gt;next; &#125; tmp=Node;free(tmp);//删掉啦第三个节点 L-&gt;next-&gt;next-&gt;next=L-&gt;last-&gt;last;//第二个节点的next指向第四个节点 L-&gt;last-&gt;last-&gt;last=L-&gt;next-&gt;next;//第四个节点的last指向第二个节点&#125;void DestroyList(List &amp;L)&#123; Node *tmp,*Node=L-&gt;next; for(int i=0;i&lt;L-&gt;length;i++)&#123; tmp=Node; Node=Node-&gt;next; free(tmp); &#125; free(L);&#125;int printlength(List &amp;L)&#123; return L-&gt;length;&#125;int main()&#123; char a,b,c,d,e,f; List L=CreateList(L); insect(L,a);insect(L,b);insect(L,c);insect(L,d);insect(L,e); print(L); cout&lt;&lt;L-&gt;length&lt;&lt;endl; cout&lt;&lt;printlength(L)&lt;&lt;endl; output3th(L); location(L); insect4f(L); print(L); delete3th(L); print(L); DestroyList(L);&#125; 05123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;iostream&gt;#include&lt;stdlib.h&gt;#include&lt;stdio.h&gt;typedef Node2 *HList;//1.数据储存//创建存储结构#define MaxCol 10typedef int ElemType;typedef struct Node1&#123; ElemType data[MaxCol]; struct Node1 *next;&#125;DList;//指定每个表的行列数typedef struct Node2&#123; int Row, Col; DList *next;&#125;HList;//2.运算方法//建表void CreateTable(HList)&#123; int i, j; DList *r, *s; h = (HList *)malloc(sizeof(HList)); printf("表的行列数：\n"); scanf("%d%d", &amp;h-&gt;Row, &amp;h-&gt;Col); for (int i = 0; i &lt; h-&gt;Row; i++) &#123; printf("第%d行：", i + 1); s = (DList *)malloc(sizeof(DList); for (int j = 0; j-&gt;h-&gt;Col; j++) &#123; scanf("%d", &amp;s-&gt;data[j]); if (h-&gt;next == NULL) h-&gt;next = s; else r-&gt;next = s; r = s; &#125; r-&gt;next=NULL; &#125;&#125;//销毁单链表void DestroyTable(HList *h)&#123; DList *pre = h-&gt;next, *p = pre-&gt;next; while (p!=NULL) &#123; free(pre); pre = p; p = p-&gt;next; &#125; free(pre); free(h);&#125;//输出单链表void DispTable(HList *h)&#123; int j; DList *p = h-&gt;next; while (p!=NULL) &#123; for (j = 0; j &lt; h-&gt;Col; j++) &#123; printf("%4d", p-&gt;data[j]); printf("\n"); p = p-&gt;next; &#125; &#125;&#125;//表连接运算法void LinkTable(HList *h1,HList *h2,HList *h)&#123; int i, j; DList *p = h-&gt;next, *q, *s, *r; printf("连接字段是：第一个表序号，第二个表序号："); scanf("%d%d", &amp;i, &amp;j); h = (HList)malloc(sizeof(HList)); h-&gt;Row = 0; h-&gt;Col = h1-&gt;Col + h2-&gt;Col; h-&gt;next = NULL; while (p!=NULL) &#123; q = h2-&gt;next; while (q != NULL) &#123; if (p-&gt;data[i - 1] == q-&gt;data[j - 1]) &#123; s = (DList)malloc(sizeof(HList)); for (int k= 0; k &lt; h1-&gt;Col; k++) s-&gt;data[k] = p-&gt;data[k]; for (int k = 0; k &lt; h2-&gt;Col; k++) s-&gt;data[h1-&gt;Col + k] = q-&gt;data[k]; if (h-&gt;next == NULL) h-&gt;next = s; else r-&gt;next = s; r = s; h-&gt;Row++; &#125; p = p-&gt;next; &#125; r-&gt;next = NULL; &#125;&#125;void main()&#123; HList *h1, *h2, *h; printf("表1：、n"); CreateTable(h1); printf("表2：\n"); CreateTable(h2); LinkTable(h1, h2, h); printf("链接结果表：\n"); DispTable(h); DestroyTable(h1); DestroyTable(h2); DestroyTable(h);&#125; 061234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;iostream&gt;using namespace std;typedef struct&#123; int i, j; int pre;&#125;Box;typedef struct&#123; Box data[10]; int front, rear;&#125;QuType;bool mgpath1(int xi, int yi, int xe, int ye)&#123; int i, j, find = 0, di; QuType qu; qu.front = qu.rear = -1; qu.rear++; qu.data[qu.rear].i = xi; qu.data[qu.rear].j = yi; //(xi, yi)进队 qu.data[qu.rear].pre = -1; mg[xi][yi] = -1; while (qu.front != qu.rear &amp;&amp; !find) &#123; qu.front++; i = qu.data[qu.front].i; j = qu.data[qu.front].j; if (i == xe&amp;&amp;j == ye) &#123; find = 1; print(qu, qu.front); return true; &#125; for (di = 0; di &lt; 4; di++) &#123; switch (di) &#123; case 0:i = qu.data[qu.front].i - 1; j = qu.data[qu.front].j; break; case 1:i = qu.data[qu.front].i; j = qu.data[qu.front].j + 1; break; case 2:i = qu.data[qu.front].i + 1; j = qu.data[qu.front].j; break; case 3:i = qu.data[qu.front].i; j = qu.data[qu.front].j - 1; break; &#125; if (mg[i][j] == 0) &#123; qu.rear++; qu.data[qu.rear].i = i; qu.data[qu.rear].j = j; qu.data[qu.rear].pre = qu.front; mg[i][j] = -1; &#125; &#125; &#125; return false;&#125;//从队列qu中输出路径void print(QuType qu, int front)&#123; int k = front, j, ns = 0; printf(&quot;\n&quot;); do &#123; j = k; k = qu.data[k].pre; qu.data[j].pre = -1; &#125; while (k != 0); printf(&quot;迷宫路径如下：、n&quot;); k = 0; while (k&lt;10) &#123; if (qu.data[k].pre == -1) &#123; ns++; printf(&quot;\t(%d,%d)&quot;, qu.data[k].i, qu.data[k].j); if (ns % 5 == 0) printf(&quot;\n&quot;); &#125; k++; &#125; printf(&quot;\n&quot;);&#125;void main()&#123; int M, N; cin &gt;&gt; M &gt;&gt; N; if (!mgpath1(1, 1, M, N)) printf(&quot;迷宫误解&quot;);&#125; 0712345678910111213141516171819202122232425262728293031323334353637#include&lt;iostream&gt;#include&lt;stdio.h&gt;using namespace std;typedef string SqString;int index(SqString s, SqString t)&#123; unsigned int i = 0, j = 0; while ( i&lt;s.length()&amp;&amp;j&lt;t.length()) &#123; if (s[i] == t[j]) &#123; i++; j++; &#125; else &#123; i = i - j + 1; j = 0; &#125; if(j&lt;=t.length()) break; &#125; if (j &lt;= t.length())&#123; return(i - t.length());&#125; else&#123; return(-1);&#125;&#125;int main()&#123; string s = "aaaaab"; string t = "aaab"; index(s, t); return 0;&#125; 08```//创建二叉树 #includevoid CreatBTNode(BTnode &amp;b,char str){ BTNode St[MaxSize],p; int top=-1,k,j=0; char ch; b=NULL; ch=str[j]; while(ch!=’\0’) {switch(ch) { case ‘(‘:top++,St[top]=p;k=1;break; case ‘)’:top–;break; case ‘,’:k=z;break; default:p=(BTNode *)malloc(sizeof(BTNode)); p-&gt;data=ch;p-&gt;lchild=p-&gt;rchild=NULL; if(b==NULL) b=p; else { switch(k) { case1:St[top]-&gt;lchild=p;break; case2:St[top]-&gt;rchild=p;break; } } } j++;ch=str[j]; }} //查找节点/递归模型f(b,x)=NULLf(b,x)=bf(b,x)=pf(b,x)=f(b-&gt;rchild,x) ///对应的递归算法BTNode FindNode(BTNode b,ElemType x){ BTNode *p; if(b==NULL) return NULL; else if(b-&gt;data==x) return b; else { p=FindNode(b-&gt;lchild,x); if(p!=NULL) return p; else return FindNode(b-&gt;rchild,x); } } //找孩子节点BTNode lchildNode(BTNode p){ return p-&gt;lchild;} BTNode rchildNode(BTNode p){ return p-&gt;rchild;} //求高度/递归模型f(b)=0f(b)=MAX{f(b-&gt;lchild),f(b-&gt;rchild)} ///递归算法int BTNodeHeight(BTNode *b){ int lchild,rchild; if(b==NULL) return 0; else { lchild= BTNodeHeight(b-&gt;lchild);//求左子树的高度 rchild=BTNodeHeight(b-&gt;rchild); return (lchild&gt;rchild?(lchild+1:rchild+1)); } } //输出二叉树void DispBTNode(BTNode *b){ if(b!=NULL) { printf(“%c”,b-&gt;data); if(b-&gt;lchild!=NULL||b-&gt;rchild!=NULL) { printf(“(\n” ); DispBTNode(b-&gt;lchild); if(b-&gt;rchild!=NULL) printf(“,\n” ); DispBTNode(b-&gt;rchild); printf(“)\n” ); } }} //二叉树的遍历//先序遍历void PreOrder(BTNode b){ if(b!=NULL) { printf(“%c\n”,b-&gt;data ); PreOrder(b-&gt;lchild); PreOrder(b-&gt;rchild); }}//中根遍历void InOrder(BTNode b){ if(b!=NULL) { InOrder(b-&gt;lchild); printf(“%c\n”,b-&gt;data ); InOrder(b-&gt;rchild); }}//后根遍历 void PostOrder(BTNode b){ if(b!=NULL) { PostOrder(b-&gt;lchild); PostOrder(b-&gt;rchild); printf(“%c\n”,b-&gt;data ); }}void main(){ BTNode b,p,lp,*rp; CreatBTNode(b,”A(B(D,E(H(J,K(L,M(,N))))),C(F,G(,I)))”); printf(“二叉树的基本运算”)； printf(“(1)输出二叉树：”); DispBTNode(b);printf(“\n” ); }]]></content>
  </entry>
  <entry>
    <title><![CDATA[Adobe After Effects]]></title>
    <url>%2F2017%2F02%2F17%2FAdobe%20After%20Effects%2F</url>
    <content type="text"><![CDATA[如何使用AE模板做视频 AE下载地址 Adobe全套下载地址 AE模板网站1 AE基友c4d AE模板网站3 AE界面简介 AE模板导入后的各部分介绍 AE模板修改 渲染及导出格式选择 1.AE模板资源AE模板有收费的和免费的，其中免费做的最好的是newcger，其他收费网站参差不齐。AE的基友c4d(负责AE里面的模型处理)，所以c4d网站也是需要的。 2.AE界面简介 3.AE模板介绍导入模板后。。。。。接下来要做的：]]></content>
  </entry>
  <entry>
    <title><![CDATA[HTML]]></title>
    <url>%2F2017%2F02%2F14%2FHTML%2F</url>
    <content type="text"><![CDATA[1.HTML框架HTML决定网页内容，CSS决定网页样式，javascripe决定网页行为。 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="ucf-8"&gt;//编码方式ucf-8&lt;title&gt;fuck&lt;/title&gt;//标题&lt;body&gt;//body里面是网页的内容&lt;/body&gt;&lt;/head&gt;&lt;/html&gt;//就TM这样简单 CSS以styl标签搞事情123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;style&gt;body //body的样式&#123; background-color:#d0e4fe;&#125;h1 //h1的样式&#123; color:orange; text-align:center;&#125;p //page的样式&#123; font-family:"Times New Roman"; font-size:20px;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;CSS 实例!&lt;/h1&gt;&lt;p&gt;这是一个段落。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; scripe标签1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt; &lt;/head&gt;&lt;body&gt;&lt;div style="text-align:center"&gt; &lt;button onclick="playPause()"&gt;播放/暂停&lt;/button&gt; &lt;button onclick="makeBig()"&gt;放大&lt;/button&gt; &lt;button onclick="makeSmall()"&gt;缩小&lt;/button&gt; &lt;button onclick="makeNormal()"&gt;普通&lt;/button&gt; &lt;br&gt; &lt;video id="video1" width="420"&gt; &lt;source src="mov_bbb.mp4" type="video/mp4"&gt; &lt;source src="mov_bbb.ogg" type="video/ogg"&gt; 您的浏览器不支持 HTML5 video 标签。 &lt;/video&gt;&lt;/div&gt;&lt;script&gt;var myVideo=document.getElementById("video1");function playPause()&#123; if (myVideo.paused) myVideo.play(); else myVideo.pause();&#125; function makeBig()&#123; myVideo.width=560;&#125; function makeSmall()&#123; myVideo.width=320;&#125; function makeNormal()&#123; myVideo.width=420;&#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 简单的网页以及两个常用搜索代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;fuck&lt;/title&gt;&lt;style media="screen"&gt;input[type=text] &#123; //静态栏搜索 width: 130px; box-sizing: border-box; border: 2px solid #ccc; border-radius: 4px; font-size: 16px; background-color: white; background-image: url('searchicon.png'); background-position: 10px 10px; background-repeat: no-repeat; padding: 12px 20px 12px 40px; -webkit-transition: width 0.4s ease-in-out; transition: width 0.4s ease-in-out;&#125;input[type=text]:focus &#123; width: 100%;&#125;body&#123; background-image: url('http://p1.bqimg.com/567571/1487e5929ef40176.jpg');&#125;#myInput &#123; //动态栏搜索 background-image: url('https://static.runoob.com/images/mix/searchicon.png'); /* 搜索按钮 */ background-position: 10px 12px; /* 定位搜索按钮 */ background-repeat: no-repeat; /* 不重复图片 */ width: 100%; font-size: 16px; padding: 12px 20px 12px 40px; border: 1px solid #ddd; margin-bottom: 12px;&#125;&lt;/style&gt;&lt;body&gt; &lt;input type="text" id="myInput" onkeyup="myFunction()" placeholder="搜索..."&gt; &lt;form&gt; &lt;input type="text" name="search" placeholder="Search.."&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级真题]]></title>
    <url>%2F2017%2F02%2F11%2FPAT%E4%B9%99%E7%BA%A7%E7%9C%9F%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1001123456789101112131415161718192021222324#include &lt;stdio.h&gt;#include &lt;iostream&gt;using namespace std;int main()&#123; int n; scanf("%d", &amp;n); int count = 0; while(n != 1)&#123; if(n % 2 != 0)&#123; n = (3 * n + 1) / 2; count ++; &#125; else&#123; n /= 2; count ++; &#125; &#125; printf("%d\n", count); return 0; cin&gt;&gt;n;&#125; 10051234567891011121314151617181920212223#include&lt;iostream&gt;using namespace std;int main()&#123; int bai,shi,ge,n; cin&gt;&gt;n; ge=n%10; shi=(n-ge)/10%10; bai=(n-shi*10-ge)/100%10; if(bai!=0) for(int i=0;i&lt;bai;i++)&#123; printf("B"); &#125; if(shi!=0) for(int i=0;i&lt;shi;i++)&#123; printf("S"); &#125; if(ge!=0) for(int i=0;i&lt;ge;i++)&#123; printf("G"); &#125;&#125; 1006123456789101112131415161718192021222324252627#include&lt;iostream&gt;#include&lt;stdio.h&gt;using namespace std;int array[100000];int main()&#123; int n; cin&gt;&gt;n; for(int i=2;i&lt;n/2+1;i++)&#123; for(int j=2;i*j&lt;=n;j++)&#123; array[i*j]=1; &#125; &#125; int tmp=2,count; for(int j=2;j&lt;=n;j++)&#123; if(array[j]==0)&#123; if(j-tmp==2)&#123; count++; tmp=j; &#125; else&#123; tmp=j; &#125; &#125; &#125; printf("%d",count);&#125; 10071234567891011121314#include&lt;iostream&gt;#include&lt;stdio.h&gt;using namespace std;int main()&#123; int n,m,a[100]; cin&gt;&gt;n&gt;&gt;m; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;a[(i+m)%n]); &#125; for(int i=0;i&lt;n;i++)&#123; printf("%d ",a[i]); &#125;&#125; 10141234567891011121314#include&lt;iostream&gt;#include&lt;sstdio&gt;#include&lt;sstring&gt;using namespace std;int main()&#123; int n,lowline,eline; cin&gt;&gt;renshu&gt;&gt;lowline&gt;&gt;eline&gt;&gt;endl; int man[n][4]; for(int i=0;i&lt;n;i++)&#123; scanf("%d %d %d",man[i][0],man[i][1],man[i][2]); &#125; &#125; 1021123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;iostream&gt;#include&lt;sstdio&gt;#include&lt;sstring&gt;using namespace std;int main()&#123; string s; gets(s); int count[10]; for(int i=0;i&lt;s.size();i++)&#123; if(s[i]-48=0)&#123; count[0]++; &#125; else if(s[i]-48=1)&#123; count[1]++; &#125; else if(s[i]-48=2)&#123; count[2]++; &#125; else if(s[i]-48=3)&#123; count[3]++; &#125; else if(s[i]-48=4)&#123; count[4]++; &#125; else if(s[i]-48=5)&#123; count[5]++; &#125; else if(s[i]-48=6)&#123; count[6]++; &#125; else if(s[i]-48=7)&#123; count[7]++; &#125; else if(s[i]-48=8)&#123; count[8]++; &#125; else if(s[i]-48=9)&#123; count[9]++; &#125; for(int j=0;j&lt;10;j++)&#123; printf("%d :%d",j,count[j]); &#125; &#125;&#125; 102312345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;#include&lt;sstream&gt;#include&lt;string.h&gt;#include&lt;cmath&gt;using namespace std;int main()&#123; string s; cin&gt;&gt;s; string num1,num2; for(int i=1;i&lt;s.find('E');i++)&#123; num1[i]=s[i]; &#125; for(int i=s.find('E')+1;i&lt;s.size();i++)&#123; num2[i]=s[i]; &#125; if(s[0]="+"&amp;&amp;s.find('E')+1=='+')&#123; printf("%d",num1*pow(10,num2)); &#125; if(s[0]="+"&amp;&amp;s.find('E')+1=='-')&#123; printf("%d",1/(num1*pow(10,num2))); &#125; if(s[0]="-"&amp;&amp;s.find('E')+1=='+')&#123; printf("-%d",num1*pow(10,num2)); &#125; if(s[0]="-"&amp;&amp;s.find('E')+1=='-')&#123; printf("-%d",1/(num1*pow(10,num2))); &#125;&#125; 102512345678910111213#include&lt;iostream&gt;using namespace std;int main()&#123; float c1,c2; cin&gt;&gt;c1&gt;&gt;c2; float time=c2-c1+50; int hour=time/360000; int minute=(time-hour*360000)/6000; int second=(time-hour*360000-minute*6000)/100; printf("%02f %02f %02f",hour,minute,second);&#125; 10561234567891011121314151617181920#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main()&#123; int n; scanf("%d",&amp;n); vector&lt;int&gt; v(n); int sum; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;v[i]); &#125; for(int i=0;i&lt;n;i++)&#123; for(int j=i+1;j&lt;n;j++)&#123; sum+=v[i]*10+v[j]; sum+=v[j]*10+v[i]; &#125; &#125; printf("%d",sum);&#125; 1057123456789101112131415161718192021222324252627#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main()&#123; string s; gets(s); int sum; for(int i=0;i&lt;s,size();i++)&#123; if(s[i]&gt;='A'&amp;&amp;s[i]=&lt;'Z')&#123; sum=sum+s[i]-64; &#125; else if(s[i]&gt;='a'&amp;&amp;s[i]=&lt;'z')&#123; sum=sum+s[i]-96; &#125; int count1,count0; while(sum!=0)&#123;//十进制转二进制 除2 if(sum%2==0)&#123; count0++; &#125; eles if(sum%2==1)&#123; count1++; &#125; sum=sum/2; &#125; &#125;&#125; 106112345678910111213141516171819202122232425262728#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main()&#123; int n,m; scanf("%d %d",&amp;n,&amp;m); vector&lt;int&gt; vatual(m); vector&lt;int&gt; key(m); int sum=0,g; for(int i=0;i&lt;m;i++)&#123; scanf("%d",&amp;vatual[i]); &#125; for(int i=0;i&lt;m;i++)&#123; scanf("%d",&amp;key[i]); &#125; for(int i=0;i&lt;n;i++)&#123; for(int i=0;i&lt;m;i++)&#123; scanf("%d",&amp;g); if(g==key[i])&#123; sum=sum+key[i]; &#125; &#125;&#125; printf("%d\n",sum);&#125; 106312345678910111213141516#include&lt;cmach&gt;#include&lt;iostream&gt;using namespace std;int main()&#123; int n,a,b; cin&gt;&gt;n; double mo; double max=0; for(i=0;i&lt;n;i++)&#123; scanf("%f %f",&amp;a.&amp;b); mo=sqrt(a*a+b*b); max=(mo&gt; max)?mo:max; &#125; printf("%0.2lf",max);&#125; 106412345678910111213141516171819202122232425262728293031323334#include&lt;iostream&gt;#include&lt;sstdio&gt;#include&lt;vector&gt;#include&lt;string&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int n; vector&lt;int&gt; v; string s; sum=0; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)&#123; cin&gt;&gt;s for(j=0;j&lt;=s.size();j++)&#123; sum=sum+s[j]-'0'; &#125; vector&lt;int&gt;::iterator result=find(v.begin,v.end(),sum); if(result=v.end())&#123; v.push_back(sum); &#125; &#125; sort(v.begin,v.end()); printf("%d",v.size()); for(i=0;i&lt;v.size();i++)&#123; if(i==0)&#123; printf("%d",v[i]); &#125; else&#123; printf(" %d",v[i]); &#125; &#125;&#125; 1065123456789101112131415161718192021222324252627282930313233#include&lt;sstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;using namespace std;int table[100000]int main ()&#123; int n; int a,b; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)&#123; scanf("%d %d",&amp;a,&amp;b); table[a]=b; table[b]=a; &#125; scanf("%d",&amp;n); vector&lt;int&gt; v(n); vector&lt;int&gt; doge; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;v[i]); &#125; for(int i=0;i&lt;n;i++)&#123; vector&lt;int&gt;::iterator result=find(v.begin(),v.end(),table[v[i]]); if(result==v.end()) doge.push_back(v[i]); &#125; sort(doge.begin(),doge.end()); for(int i=0;i&lt;doge.size();i++)&#123; printf("%05d",doge[i]); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[排序算法]]></title>
    <url>%2F2017%2F02%2F10%2F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[排序算法的稳定性：排序算法稳定性的简单形式化定义为：如果Ai = Aj，排序前Ai在Aj之前，排序后Ai还在Aj之前，则称这种排序算法是稳定的。通俗地讲就是保证排序前后两个相等的数的相对顺序不变。（冒泡，直接插入排序，归并排序是稳定的，简单选择排序，希尔排序，堆排序，快排是不稳定的。） #鸡尾酒排序12345678910111213141516171819int A[] = &#123; 6, 5, 3, 1, 8, 7, 2, 4 &#125;; // 从小到大定向冒泡排序 int n = sizeof(A) / sizeof(int); int left = 0; // 初始化边界 int right = n - 1;while (left &lt; right) &#123; for (int i = left; i &lt; right; i++) // 前半轮,将最大元素放到后面 if (A[i] &gt; A[i + 1]) &#123; exchange(A, i, i + 1); &#125; right--; for (int i = right; i &gt; left; i--) // 后半轮,将最小元素放到前面 if (A[i - 1] &gt; A[i]) &#123; exchange(A, i - 1, i); &#125; left++; &#125; #冒泡排序 1234567891011int A[] = &#123; 6, 5, 3, 1, 8, 7, 2, 4 &#125;; // 从小到大冒泡排序 int n = sizeof(A) / sizeof(int); for (int j = 0; j &lt; n - 1; j++) // 每次最大元素就像气泡一样"浮"到数组的最后 &#123; for (int i = 0; i &lt; n - 1 - j; i++) // 依次比较相邻的两个元素,使较大的那个向后移 &#123; if (A[i] &gt; A[i + 1]) // 如果条件改成A[i] &gt;= A[i + 1],则变为不稳定的排序算法 &#123; exchange(A, i, i + 1); &#125; &#125; #快速排序 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950void exchange(int A[], int i, int j) // 交换A[i]和A[j]&#123; int temp = A[i]; A[i] = A[j]; A[j] = temp;&#125;int partition(int A[], int left, int right) // 划分函数&#123; int pivot = A[right]; // 选择最后一个元素作为基准 int tail = left - 1; // tail为小于基准的子数组最后一个元素的索引 for (int i = left; i &lt; right; i++) // 遍历基准以外的其他元素 &#123; if (A[i] &lt;= pivot) // 把小于等于基准的元素放到前一个子数组中 &#123; tail++; exchange(A, tail, i); &#125; &#125; exchange(A, tail + 1, right); // 最后把基准放到前一个子数组的后边,剩下的子数组既是大于基准的子数组 // 该操作很有可能把后面元素的稳定性打乱,所以快速排序是不稳定的排序算法 return tail + 1; // 返回基准的索引&#125;void quicksort(int A[], int left, int right)&#123; int pivot_index; // 基准的索引 if (left &lt; right) &#123; pivot_index = partition(A, left, right); quicksort(A, left, pivot_index-1); quicksort(A, pivot_index+1, right); &#125;&#125;int main()&#123; int A[] = &#123; 5, 2, 9, 4, 7, 6, 1, 3, 8 &#125;;// 从小到大快速排序 int n = sizeof(A) / sizeof(int); quicksort(A, 0, n - 1); printf("快速排序结果："); for (int i = 0; i &lt; n; i++) &#123; printf("%d ",A[i]); &#125; printf("\n"); return 0;&#125; #插入排序 12345678910111213141516int A[] = &#123; 6, 5, 3, 1, 8, 7, 2, 4 &#125;;// 从小到大插入排序 int n = sizeof(A) / sizeof(int); int i, j, get; for (i = 1; i &lt; n; i++) // 类似抓扑克牌排序 &#123; get = A[i]; // 右手抓到一张扑克牌 j = i - 1; // 拿在左手上的牌总是排序好的 while (j &gt;= 0 &amp;&amp; A[j] &gt; get) // 将抓到的牌与手牌从右向左进行比较 &#123; A[j + 1] = A[j]; // 如果该手牌比抓到的牌大,就将其右移 j--; &#125; A[j + 1] = get;// 直到该手牌比抓到的牌小(或二者相等),将抓到的牌插入到该手牌右边(相等元素的相对次序未变,所以插入排序是稳定的) &#125; #二分插入排序123456789101112131415161718192021222324int A[] = &#123; 5, 2, 9, 4, 7, 6, 1, 3, 8 &#125;;// 从小到大二分插入排序 int n = sizeof(A) / sizeof(int); int i, j, get, left, right, middle; for (i = 1; i &lt; n; i++) // 类似抓扑克牌排序 &#123; get = A[i]; // 右手抓到一张扑克牌 left = 0; // 拿在左手上的牌总是排序好的,所以可以用二分法 right = i - 1; // 手牌左右边界进行初始化 while (left &lt;= right) // 采用二分法定位新牌的位置 &#123; middle = (left + right) / 2; if (A[middle] &gt; get) right = middle - 1; else left = middle + 1; &#125; for (j = i - 1; j &gt;= left; j--) // 将欲插入新牌位置右边的牌整体向右移动一个单位 &#123; A[j + 1] = A[j]; &#125; A[left] = get; // 将抓到的牌插入手牌 &#125; #希尔排序 1234567891011121314151617181920212223int A[] = &#123; 5, 2, 9, 4, 7, 6, 1, 3, 8 &#125;;// 从小到大希尔排序 int n = sizeof(A) / sizeof(int); int i, j, get; int h = 0; while (h &lt;= n) // 生成初始增量 &#123; h = 3*h + 1; &#125; while (h &gt;= 1) &#123; for (i = h; i &lt; n; i++) &#123; j = i - h; get = A[i]; while ((j &gt;= 0) &amp;&amp; (A[j] &gt; get)) &#123; A[j + h] = A[j]; j = j - h; &#125; A[j + h] = get; &#125; h = (h - 1) / 3; // 递减增量 &#125; #归并排序 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182int L[10]; // 两个子数组定义成全局变量（辅助存储空间,大小正比于元素的个数）int R[10];void merge(int A[], int left, int middle, int right)// 合并两个已排好序的数组A[left...middle]和A[middle+1...right]&#123; int n1 = middle - left + 1; // 两个数组的大小 int n2 = right - middle; for (int i = 0; i &lt; n1; i++) // 把两部分分别拷贝到两个数组中 L[i] = A[left + i]; for (int j = 0; j &lt; n2; j++) R[j] = A[middle + j + 1]; L[n1] = INT_MAX; // 使用无穷大作为哨兵值放在子数组的末尾 R[n2] = INT_MAX; // 这样可以免去检查某个子数组是否已读完的步骤 int i = 0; int j = 0; for (int k = left; k &lt;= right; k++) // 依次比较两个子数组中的值，每次取出更小的那一个放入原数组 &#123; if (L[i] &lt;= R[j]) &#123; A[k] = L[i]; i++; &#125; else &#123; A[k] = R[j]; j++; &#125; &#125;&#125;void mergesort_recursion(int A[], int left, int right) // 递归实现的归并排序(自顶向下)&#123; int middle = (left + right) / 2; if (left &lt; right) // 当待排序的序列长度为1时(left == right)，递归“开始回升” &#123; mergesort_recursion(A, left, middle); mergesort_recursion(A, middle + 1, right); merge(A, left, middle, right); &#125;&#125;void mergesort_iteration(int A[], int left, int right) // 非递归(迭代)实现的归并排序(自底向上)&#123; int low, middle, high; // 子数组索引,前一个为A[low...middle],后一个子数组为A[middle+1...high] for (int size = 1; size &lt;= right - left; size *= 2) // 子数组的大小初始为1,每轮翻倍 &#123; low = left; while (low + size - 1 &lt;= right - 1 )// 后一个子数组存在(需要归并) &#123; middle = low + size - 1; high = middle + size; if (high &gt; right) // 后一个子数组大小不足size high = right; merge(A, low, middle, high); low = high + 1; // 前一个子数组索引向后移动 &#125; &#125;&#125;int main()&#123; int A1[] = &#123; 6, 5, 3, 1, 8, 7, 2, 4 &#125;; // 从小到大归并排序 int A2[] = &#123; 6, 5, 3, 1, 8, 7, 2, 4 &#125;; int n1 = sizeof(A1) / sizeof(int); int n2 = sizeof(A2) / sizeof(int); mergesort_recursion(A1, 0, n1 - 1); // 递归实现 mergesort_iteration(A2, 0, n2 - 1); // 非递归实现 printf("递归实现的归并排序结果："); for (int i = 0; i &lt; n1; i++) &#123; printf("%d ",A1[i]); &#125; printf("\n"); printf("非递归实现的归并排序结果："); for (int i = 0; i &lt; n2; i++) &#123; printf("%d ", A2[i]); &#125; printf("\n"); return 0;&#125; #堆排序 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;stdio.h&gt;// 分类 -------------- 内部比较排序// 数据结构 ---------- 数组// 最差时间复杂度 ---- O(nlogn)// 最优时间复杂度 ---- O(nlogn)// 平均时间复杂度 ---- O(nlogn)// 所需辅助空间 ------ O(1)// 稳定性 ------------ 不稳定int heapsize; // 堆大小void exchange(int A[], int i, int j) // 交换A[i]和A[j]&#123; int temp = A[i]; A[i] = A[j]; A[j] = temp;&#125;void heapify(int A[], int i) // 堆调整函数(这里使用的是最大堆)&#123; int leftchild = 2 * i + 1; // 左孩子索引 int rightchild = 2 * i + 2; // 右孩子索引 int largest; // 选出当前结点与左右孩子之中的最大值 if (leftchild &lt; heapsize &amp;&amp; A[leftchild] &gt; A[i]) largest = leftchild; else largest = i; if (rightchild &lt; heapsize &amp;&amp; A[rightchild] &gt; A[largest]) largest = rightchild; if (largest != i) &#123; exchange(A, i, largest); // 把当前结点和它的最大(直接)子节点进行交换 heapify(A, largest); // 递归调用，继续从当前结点向下进行堆调整 &#125;&#125;void buildheap(int A[], int n) // 建堆函数&#123; heapsize = n; for (int i = heapsize / 2 - 1; i &gt;= 0; i--) // 对每一个非叶结点 heapify(A, i); // 不断的堆调整&#125;void heapsort(int A[], int n)&#123; buildheap(A, n); for (int i = n - 1; i &gt;= 1; i--) &#123; exchange(A, 0, i); // 将堆顶元素(当前最大值)与堆的最后一个元素互换(该操作很有可能把后面元素的稳定性打乱,所以堆排序是不稳定的排序算法) heapsize--; // 从堆中去掉最后一个元素 heapify(A, 0); // 从新的堆顶元素开始进行堆调整 &#125;&#125;int main()&#123; int A[] = &#123; 5, 2, 9, 4, 7, 6, 1, 3, 8 &#125;;// 从小到大堆排序 int n = sizeof(A) / sizeof(int); heapsort(A, n); printf("堆排序结果："); for (int i = 0; i &lt; n; i++) &#123; printf("%d ", A[i]); &#125; printf("\n"); return 0;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[deploy报错及其解决方法]]></title>
    <url>%2F2017%2F02%2F01%2Fhexo%20deploy%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[#报错提示1： 123INFO Deploying: gitFATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.iocs/troubleshooting.htmlTypeError: source.replace is not a function 解决方法:_config.yml中的depoloy设置（这是正确的前提，特别注意冒号后要有空格，repo配置时要写成https形式，type类型要是git）12345deploy: type: git repo: https://github.com/jack00000/jack00000.github.io.git branch: master message: blog git bash中应该输入的命令123npm install hexo-deployer-git --save//安装deploy的依赖文件hexo g//重新生成public文件hexo d//部署到github上 ##正确后的提示代码： ##如果实在不会hexo deploy，教你一种直接的方法： 1234打开blog目录找到public文件将public里面的文件上传到你新建的仓库xxxx.githu.io然后直接打开游览器，输入xxxx.github.io #blog文件，public文件，以及部署成功示例图 其实你的静态文件就是public里面的文件，只要把public的东西上传到github就行]]></content>
  </entry>
  <entry>
    <title><![CDATA[markdown基本语法]]></title>
    <url>%2F2017%2F01%2F02%2Fmarkdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[#markdown基本语法 ##1.插入图片形式的链接(视频之类的)123[![][pic]][douban][pic]:http://p1.bpimg.com/567571/f3788a440ee3c976.png[douban]: http://book.douban.com/subject/1141406/ ##2.插入文字形式的链接1[一段文字](https://www.baidu.com/) ##3.插入图片1![](http://p1.bpimg.com/567571/f3788a440ee3c976.png) ##来一波福利（点击图片有惊喜）： ##设置照片圆角]]></content>
  </entry>
  <entry>
    <title><![CDATA[绿点]]></title>
    <url>%2F2017%2F01%2F01%2F%E7%BB%BF%E7%82%B9%E5%9B%A2%E9%98%9F%2F</url>
    <content type="text"><![CDATA[#绿点团队圣诞趴 绿点团队（Bright Green），2013年11月创建于武汉工程大学，以“锐意进取不断创新”为核心精神的创新创业团队。在校友企业-深圳市纯水一号水处理科技有限公司喻遵军先生等提供的专项资金支持下组建，得到机电工程学院副院长杨红的支持和指导，入驻机电工程学院创新创业中心，由武汉工程大学副教授，网络红人张志作为第一任指导老师，强调学生自我管理，提倡项目制绩效导向，帮助孵化各种先进项目小组。秉承开放原则，以武汉工程大学机电工程学院为主导，吸收了计算机院、国际学院、管理学院、艺术学院、理学院、法商学院等多个院系，组成多元文化的精英团队。 来图片，不说话：]]></content>
  </entry>
  <entry>
    <title><![CDATA[github+hexo建站]]></title>
    <url>%2F2016%2F12%2F18%2Fgithub%2Bhexo%E5%BB%BA%E7%AB%99%2F</url>
    <content type="text"><![CDATA[1. 安装nodo.js , git，学习markdown语言如何安装nodo.js 如何安装git什么是markdown如何在github上建立仓库(注意：仓库名一定要是 你的github用户名.github.io )如何使本地仓库与github的仓库建立关联 你要知道git的基本使用如：1234//先cd你的仓库，然后git add .//添加你的修改git commit -m&quot;注释&quot;// -m可以不用写注释git push//提交 2.安装HEXO1npm install hexo-cli -g //cmd中输入 3.hexo 命令1234567//打开一个文件夹hexo init blog//创建一个博客文件cd blog//打开博客文件npm install//生成node_modules依赖文件hexo server//部署到本地服务器hexo g//生成静态文件（上传到gihub的你建的仓库就可以用啦）hexo d//一键部署到服务器（前提在_config.yml中配置delopy） 4.theme的转换在github上搜索hexo theme将下载好的theme文件放在theme目录之下在配置文件config.yml找到theme变量将变量的值landspace改为刚下载的theme的文件名，如果这步出错，首先怀疑是不是theme出啦问题。（一定要记住保存，再打开git bash 搞事情）hexo g生成静态文件到public把pulic的文件传到github.io仓库就行 5.使用markdown写博文介绍一款不错的markdown在线编辑器cmd markdown几种流行的客户端（注意：写博文，文件名一定要是xxxx.md,不然hexo g不能识别你写的文件）markdown语言很简单，简单来说，就是不用鼠标就能完成简单排版的语言 6.一键部署到github在config.yml末尾处配置deploy12345deploy: type: git repo: https://github.com/jack00000/jack00000.github.io.git branch: master message: blog 在git bash中输入命令123npm install hexo-deployer-git --savehexo ghexo d 打开xxxx.github.io看下成功没。（注意：由于版本原因，type：github报错的话改成github）]]></content>
  </entry>
  <entry>
    <title><![CDATA[Valine -- 一款极简的评论系统]]></title>
    <url>%2F2016%2F08%2F17%2FValine%20--%20%E4%B8%80%E6%AC%BE%E6%9E%81%E7%AE%80%E7%9A%84%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[Hexo 中的解决方案 获取 APP ID 和 APP KEY 1.点击这里登录或注册Leancloud2.点这里创建应用，应用名看个人喜好。3.选择刚刚创建的应用&gt;设置&gt;选择应用 Key，然后你就能看到你的APP ID和APP KEY了，参考下图： 4.为了您的数据安全，请填写应用&gt;设置&gt;安全设置中的Web 安全域名(自己的域名就行)，如下图： 注：该解决方案基于Hexo主题–NexT.Pisces 配置_config.yml 主题目录下的/themes/next/_config.yml中添加：1234567891011121314151617181920212223242526272829valine: enable: true appId: Your_AppId appKey: Your_AppKey``` 修改comments.swig注：因为我没有其他的评论系统需求，所以将其他的删掉了。点这里，查看原主题的comments.swig备份文件打开/themes/next/layout/_partials/comments.swig，整个文件修改为：```swig&#123;% if page.comments %&#125; &lt;div class="comments" id="comments"&gt; &#123;% if (theme.valine and theme.valine.enable)%&#125; &lt;script src="//cdn1.lncld.net/static/js/3.0.4/av-min.js"&gt;&lt;/script&gt; &lt;script src='/lib/Valine.min.js'&gt;&lt;/script&gt; &lt;script&gt; new Valine(&#123; av: AV, el: '.comments' , app_id: '&#123;&#123; theme.valine.appId &#125;&#125;', app_key: '&#123;&#123; theme.valine.appKey &#125;&#125;', placeholder: 'ヾﾉ≧∀≦)o来啊，快活啊!' &#125;); &lt;/script&gt; &#123;% endif %&#125; &lt;/div&gt;&#123;% endif %&#125; 注：我引入的Valine路径为：/lib/Valine.min.js，是已将文件Valine.min.js放到了目录/themes/next/source/lib/下。 好了，差不多了，如果你看到你的文章页面出现了如下图所示的评论框，那么恭喜你，你已装逼成功，赶紧去炫耀吧。ヽ(￣▽￣)ﾉ 评论数据管理 插播一下，关于评论数据管理，请自行登录Leancloud应用管理。具体步骤：登录&gt;选择你创建的应用&gt;存储&gt;选择ClassComment，然后就可以尽情的发挥你的权利啦(～￣▽￣)～]]></content>
  </entry>
  <entry>
    <title><![CDATA[不写到博客总忘，没办法]]></title>
    <url>%2F2016%2F04%2F28%2F%E4%B8%8D%E5%86%99%E5%88%B0%E5%8D%9A%E5%AE%A2%E6%80%BB%E5%BF%98%EF%BC%8C%E6%B2%A1%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[未识别的网络 已连接 重启一下网卡 点禁用 网络受限 已连接 右键打开网络共享中心 无intenet 安全 开始-运行-输入”netsh winsock reset”,然后重启系统 确认可行]]></content>
  </entry>
</search>
